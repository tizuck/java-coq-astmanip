// Generated from coq.g4 by ANTLR 4.7.1

    package antlr;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class coqParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, T__120=121, T__121=122, T__122=123, T__123=124, T__124=125, 
		T__125=126, T__126=127, T__127=128, T__128=129, T__129=130, T__130=131, 
		T__131=132, T__132=133, T__133=134, T__134=135, T__135=136, T__136=137, 
		T__137=138, T__138=139, T__139=140, T__140=141, T__141=142, T__142=143, 
		T__143=144, T__144=145, T__145=146, T__146=147, T__147=148, T__148=149, 
		T__149=150, T__150=151, T__151=152, T__152=153, T__153=154, T__154=155, 
		T__155=156, T__156=157, T__157=158, T__158=159, T__159=160, T__160=161, 
		T__161=162, T__162=163, T__163=164, T__164=165, T__165=166, T__166=167, 
		T__167=168, T__168=169, T__169=170, T__170=171, T__171=172, T__172=173, 
		T__173=174, T__174=175, T__175=176, T__176=177, T__177=178, T__178=179, 
		T__179=180, T__180=181, T__181=182, T__182=183, T__183=184, T__184=185, 
		T__185=186, T__186=187, T__187=188, T__188=189, T__189=190, T__190=191, 
		T__191=192, T__192=193, T__193=194, T__194=195, T__195=196, T__196=197, 
		T__197=198, T__198=199, T__199=200, T__200=201, T__201=202, T__202=203, 
		T__203=204, T__204=205, T__205=206, T__206=207, T__207=208, T__208=209, 
		T__209=210, T__210=211, T__211=212, T__212=213, T__213=214, T__214=215, 
		T__215=216, T__216=217, T__217=218, T__218=219, T__219=220, T__220=221, 
		T__221=222, T__222=223, T__223=224, T__224=225, T__225=226, T__226=227, 
		T__227=228, T__228=229, T__229=230, T__230=231, T__231=232, T__232=233, 
		T__233=234, T__234=235, T__235=236, T__236=237, T__237=238, T__238=239, 
		T__239=240, T__240=241, T__241=242, T__242=243, T__243=244, T__244=245, 
		T__245=246, T__246=247, T__247=248, T__248=249, T__249=250, T__250=251, 
		T__251=252, T__252=253, T__253=254, T__254=255, T__255=256, T__256=257, 
		T__257=258, T__258=259, T__259=260, T__260=261, T__261=262, T__262=263, 
		T__263=264, T__264=265, T__265=266, T__266=267, T__267=268, T__268=269, 
		T__269=270, T__270=271, T__271=272, T__272=273, T__273=274, T__274=275, 
		T__275=276, T__276=277, T__277=278, T__278=279, T__279=280, T__280=281, 
		T__281=282, T__282=283, T__283=284, T__284=285, T__285=286, T__286=287, 
		T__287=288, T__288=289, T__289=290, T__290=291, T__291=292, T__292=293, 
		T__293=294, T__294=295, T__295=296, T__296=297, T__297=298, T__298=299, 
		T__299=300, T__300=301, T__301=302, T__302=303, T__303=304, T__304=305, 
		T__305=306, T__306=307, T__307=308, T__308=309, T__309=310, T__310=311, 
		T__311=312, ADD=313, LISTADD=314, LISTCONC=315, MUL=316, DIV=317, MOD=318, 
		MOD2=319, SUB=320, ORB=321, COLON=322, LESS=323, GREATER=324, LOEQ=325, 
		GOEQ=326, EQUAL=327, GUILL=328, COLG=329, LCOL=330, AND=331, OR=332, EQUIV=333, 
		IMPLIES=334, TILDE=335, POW=336, KeySOME=337, KeyLOCAL=338, KeyREC=339, 
		KeyREVERSE=340, KeySTARSTAR=341, STRING=342, IDENT=343, ACCESS_IDENT=344, 
		NUM=345, WS=346, BLOCKCOMMENT=347;
	public static final int
		RULE_coq_file = 0, RULE_coq_fragment = 1, RULE_bullet = 2, RULE_command = 3, 
		RULE_undefined_command = 4, RULE_structural_command = 5, RULE_proof_command = 6, 
		RULE_collection = 7, RULE_section_subset_expr = 8, RULE_tactic_invocation = 9, 
		RULE_binding_list = 10, RULE_num_binding_list_body = 11, RULE_ident_binding_list_body = 12, 
		RULE_atomic_tactic = 13, RULE_non_logical = 14, RULE_automatizing = 15, 
		RULE_classical_tactics = 16, RULE_inversion = 17, RULE_equality_inductive_sets = 18, 
		RULE_equality = 19, RULE_checking_properties = 20, RULE_decision_procedures = 21, 
		RULE_automation = 22, RULE_conversion_tactics_hypo = 23, RULE_performing_computation = 24, 
		RULE_qualidNumAt = 25, RULE_rewriting_expressions = 26, RULE_rew_prefix = 27, 
		RULE_case_analysis_induction = 28, RULE_controlling_proof_flow = 29, RULE_managing_local_context = 30, 
		RULE_applying_theorem = 31, RULE_goal_occurrences = 32, RULE_at_occurences = 33, 
		RULE_occurences = 34, RULE_first_goal_occurences_body = 35, RULE_second_goal_occurences_body = 36, 
		RULE_second_goal_occurences_body_body = 37, RULE_intro_pattern = 38, RULE_action_intro_pattern = 39, 
		RULE_disj_conj_intro_pattern = 40, RULE_equal_intro_pattern = 41, RULE_naming_intro_pattern = 42, 
		RULE_intro_pattern_list = 43, RULE_intro_pattern_list_body = 44, RULE_flag = 45, 
		RULE_pattern2 = 46, RULE_lemma = 47, RULE_expr = 48, RULE_expr2 = 49, 
		RULE_pairedSequenceLocalAppExprBody = 50, RULE_tacexpr3 = 51, RULE_tacexpr2 = 52, 
		RULE_tacexpr1 = 53, RULE_atom = 54, RULE_message_token = 55, RULE_tacarg = 56, 
		RULE_let_clause = 57, RULE_context_rule = 58, RULE_context_hyp = 59, RULE_match_rule = 60, 
		RULE_test = 61, RULE_selector = 62, RULE_integ = 63, RULE_int_selector_body = 64, 
		RULE_toplevel_selector = 65, RULE_ltac = 66, RULE_ltac_def = 67, RULE_term = 68, 
		RULE_above_term = 69, RULE_above_term_ex_below_70 = 70, RULE_below_term = 71, 
		RULE_below_term_ex_minus = 72, RULE_atomic_term = 73, RULE_rew_term = 74, 
		RULE_rew2_term = 75, RULE_arg = 76, RULE_arg_body = 77, RULE_binders = 78, 
		RULE_binders_with_one_param = 79, RULE_binder = 80, RULE_name = 81, RULE_qualid = 82, 
		RULE_metavariable = 83, RULE_sort = 84, RULE_fix_bodies = 85, RULE_cofix_bodies = 86, 
		RULE_fix_body = 87, RULE_cofix_body = 88, RULE_annotation = 89, RULE_match_item = 90, 
		RULE_dep_ret_type = 91, RULE_return_type = 92, RULE_equation = 93, RULE_mult_pattern = 94, 
		RULE_pattern = 95, RULE_pattern_without_implicits = 96, RULE_or_pattern = 97, 
		RULE_exists_term = 98, RULE_return_term = 99, RULE_equation_term = 100, 
		RULE_forall_term = 101, RULE_fun_term = 102, RULE_ident_assign_term = 103, 
		RULE_fix_term = 104, RULE_fix_body_term = 105, RULE_cofix_term = 106, 
		RULE_name_assign_term = 107, RULE_pattern_assign_term = 108, RULE_if_then_else_term = 109, 
		RULE_record = 110, RULE_record_keyword = 111, RULE_field = 112, RULE_field_term = 113, 
		RULE_record_term = 114, RULE_field_def = 115, RULE_field_def_term = 116, 
		RULE_module_type = 117, RULE_module_binding = 118, RULE_module_bindings = 119, 
		RULE_module_expression = 120, RULE_sentence = 121, RULE_assumption = 122, 
		RULE_assumption_keyword = 123, RULE_assums = 124, RULE_definition = 125, 
		RULE_inductive = 126, RULE_ind_body = 127, RULE_ind_body_alloc = 128, 
		RULE_ind_body_alloc_element = 129, RULE_fixpoint = 130, RULE_implicitArgs = 131, 
		RULE_assertion = 132, RULE_assertion_keyword = 133, RULE_goal = 134, RULE_proof = 135, 
		RULE_proof_body = 136, RULE_ident = 137;
	public static final String[] ruleNames = {
		"coq_file", "coq_fragment", "bullet", "command", "undefined_command", 
		"structural_command", "proof_command", "collection", "section_subset_expr", 
		"tactic_invocation", "binding_list", "num_binding_list_body", "ident_binding_list_body", 
		"atomic_tactic", "non_logical", "automatizing", "classical_tactics", "inversion", 
		"equality_inductive_sets", "equality", "checking_properties", "decision_procedures", 
		"automation", "conversion_tactics_hypo", "performing_computation", "qualidNumAt", 
		"rewriting_expressions", "rew_prefix", "case_analysis_induction", "controlling_proof_flow", 
		"managing_local_context", "applying_theorem", "goal_occurrences", "at_occurences", 
		"occurences", "first_goal_occurences_body", "second_goal_occurences_body", 
		"second_goal_occurences_body_body", "intro_pattern", "action_intro_pattern", 
		"disj_conj_intro_pattern", "equal_intro_pattern", "naming_intro_pattern", 
		"intro_pattern_list", "intro_pattern_list_body", "flag", "pattern2", "lemma", 
		"expr", "expr2", "pairedSequenceLocalAppExprBody", "tacexpr3", "tacexpr2", 
		"tacexpr1", "atom", "message_token", "tacarg", "let_clause", "context_rule", 
		"context_hyp", "match_rule", "test", "selector", "integ", "int_selector_body", 
		"toplevel_selector", "ltac", "ltac_def", "term", "above_term", "above_term_ex_below_70", 
		"below_term", "below_term_ex_minus", "atomic_term", "rew_term", "rew2_term", 
		"arg", "arg_body", "binders", "binders_with_one_param", "binder", "name", 
		"qualid", "metavariable", "sort", "fix_bodies", "cofix_bodies", "fix_body", 
		"cofix_body", "annotation", "match_item", "dep_ret_type", "return_type", 
		"equation", "mult_pattern", "pattern", "pattern_without_implicits", "or_pattern", 
		"exists_term", "return_term", "equation_term", "forall_term", "fun_term", 
		"ident_assign_term", "fix_term", "fix_body_term", "cofix_term", "name_assign_term", 
		"pattern_assign_term", "if_then_else_term", "record", "record_keyword", 
		"field", "field_term", "record_term", "field_def", "field_def_term", "module_type", 
		"module_binding", "module_bindings", "module_expression", "sentence", 
		"assumption", "assumption_keyword", "assums", "definition", "inductive", 
		"ind_body", "ind_body_alloc", "ind_body_alloc_element", "fixpoint", "implicitArgs", 
		"assertion", "assertion_keyword", "goal", "proof", "proof_body", "ident"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'.'", "'--'", "'---'", "'+++'", "'***'", "'...'", "'From'", "'Require'", 
		"'Import'", "'Export'", "'Section'", "'End'", "'Module'", "'['", "']'", 
		"':='", "'Type'", "'<+'", "'Include'", "'Qed'", "'Defined'", "'Admitted'", 
		"'Proof'", "'using'", "'with'", "'All'", "'Type*'", "'('", "')'", "'Default'", 
		"'Using'", "'Suggest'", "'Abort'", "'Existential'", "'Grab'", "'Variables'", 
		"'Undo'", "'Restart'", "'Focus'", "'Unfocus'", "'Unfocused'", "'{'", "'|'", 
		"'}'", "'Guarded'", "'Automatic'", "'Introduction'", "'Optimize'", "'Heap'", 
		"'Collection'", "'Fewer'", "'Many'", "'section_subset_expr'", "'cycle'", 
		"'swap'", "'revgoals'", "'shelve'", "'shelve_unifiable'", "'btauto'", 
		"'omega'", "'ring'", "'ring_simplify'", "'field'", "'field_simplify'", 
		"'field_simplify_eq'", "'fourier'", "'classical_left'", "'classical_right'", 
		"'functional'", "'inversion'", "'quote'", "'decide'", "'equality'", "'compare'", 
		"'simplify_eq'", "'esimplify_eq'", "'dependent'", "'rewrite'", "'<-'", 
		"'f_equal'", "'reflexivity'", "'symmetry'", "'in'", "'transitivity'", 
		"'constr_eq'", "'unify'", "'is_evar'", "'has_evar'", "'is_var'", "'tauto'", 
		"'dtauto'", "'intuition'", "'dintuition'", "'rtauto'", "'firstorder'", 
		"'tactic'", "'congruence'", "'congruence n'", "'auto'", "'eauto'", "'with *'", 
		"'info_auto'", "'debug'", "'trivial'", "'info_trivial'", "'autounfold'", 
		"'clause'", "'autorewrite'", "'easy'", "'now'", "'conv_tactic'", "','", 
		"'cbv'", "'lazy'", "'compute'", "'vm_compute'", "'native_compute'", "'red'", 
		"'hnf'", "'cbn'", "'simpl'", "'at'", "'unfold'", "'%'", "'fold'", "'pattern'", 
		"'erewrite'", "'by'", "'replace'", "'subst'", "'stepl'", "'stepr'", "'change'", 
		"'?'", "'!'", "'destruct'", "'edestruct'", "'as'", "'eq'", "'case'", "'ecase'", 
		"'simple'", "'case_eq'", "'induction'", "'einduction'", "'elim'", "'eelim'", 
		"'elimtype'", "'double'", "'generalizing'", "'destruction'", "'discriminate'", 
		"'ediscriminate'", "'injection'", "'einjection'", "'inversion_clear'", 
		"'inversion_sigma'", "'fix'", "'struct'", "'cofix'", "'assert'", "'eassert'", 
		"'pose'", "'proof'", "'epose'", "'enough'", "'eenough'", "'cut'", "'specialize'", 
		"'generalize'", "'evar'", "'instantiate'", "'Value'", "'of'", "'admit'", 
		"'give_up'", "'absurd'", "'contradiction'", "'contradict'", "'exfalso'", 
		"'intro'", "'intros'", "'@'", "'until'", "'after'", "'before'", "'top'", 
		"'bottom'", "'clear'", "'clearbody'", "'revert'", "'move'", "'rename'", 
		"'into'", "'set'", "'eset'", "'remember'", "'eremember'", "'eqn:'", "'decompose'", 
		"'sum'", "'record'", "'exact'", "'eexact'", "'assumption'", "'eassumption'", 
		"'notypeclasses'", "'refine'", "'apply'", "'eapply'", "'lapply'", "'constructor'", 
		"'split'", "'exists'", "'left'", "'right'", "'econstructor'", "'eexists'", 
		"'eleft'", "'eright'", "'|-'", "'_'", "'&'", "'or'", "'beta'", "'delta'", 
		"'match'", "'iota'", "'zeta'", "';'", "'do'", "'progress'", "'repeat'", 
		"'try'", "'once'", "'exactly_once'", "'timeout'", "'time'", "'only'", 
		"'tryif'", "'then'", "'else'", "'fun'", "'=>'", "'let'", "'goal'", "'end'", 
		"'lazymatch'", "'multimatch'", "'abstract'", "'solve'", "'first'", "'idtac'", 
		"'fail'", "'fresh'", "'context'", "'eval'", "'redexpr'", "'type'", "'constr'", 
		"'uconstr'", "'type_term'", "'numgoals'", "'guard'", "'assert_fails'", 
		"'assert_suceeds'", "'()'", "'..'", "'ltac'", "'all'", "'par'", "'Ltac'", 
		"'forall'", "'exists2'", "'''", "'if'", "'rew'", "'Prop'", "'Set'", "'for'", 
		"'return'", "'Record'", "'Inductive'", "'CoInductive'", "'{|'", "'|}'", 
		"'Definition'", "'module'", "'Axiom'", "'Conjecture'", "'Parameter'", 
		"'Parameters'", "'Variable'", "'Hypothesis'", "'Hypotheses'", "'Let'", 
		"'where'", "'Fixpoint'", "'CoFixpoint'", "'Theorem'", "'Lemma'", "'Remark'", 
		"'Fact'", "'Corollary'", "'Proposition'", "'Example'", "'Goal'", "'Qed.'", 
		"'Defined.'", "'Admitted.'", "'lemma'", "'rec'", "'+'", "'++'", "'::'", 
		"'*'", "'/'", "'//'", "'mod'", "'-'", "'||'", "':'", "'<'", "'>'", "'<='", 
		"'>='", "'='", "'<>'", "':>'", "'<:'", "'/\\'", "'\\/'", "'<->'", "'->'", 
		"'~'", "'^'", "'Some'", "'Local'", "'Rec'", "'reverse'", "'**'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "ADD", "LISTADD", "LISTCONC", "MUL", "DIV", "MOD", "MOD2", "SUB", 
		"ORB", "COLON", "LESS", "GREATER", "LOEQ", "GOEQ", "EQUAL", "GUILL", "COLG", 
		"LCOL", "AND", "OR", "EQUIV", "IMPLIES", "TILDE", "POW", "KeySOME", "KeyLOCAL", 
		"KeyREC", "KeyREVERSE", "KeySTARSTAR", "STRING", "IDENT", "ACCESS_IDENT", 
		"NUM", "WS", "BLOCKCOMMENT"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "coq.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public coqParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Coq_fileContext extends ParserRuleContext {
		public List<Coq_fragmentContext> coq_fragment() {
			return getRuleContexts(Coq_fragmentContext.class);
		}
		public Coq_fragmentContext coq_fragment(int i) {
			return getRuleContext(Coq_fragmentContext.class,i);
		}
		public Coq_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_coq_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCoq_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCoq_file(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCoq_file(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Coq_fileContext coq_file() throws RecognitionException {
		Coq_fileContext _localctx = new Coq_fileContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_coq_file);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(277); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(276);
				coq_fragment();
				}
				}
				setState(279); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (T__275 - 256)) | (1L << (T__276 - 256)) | (1L << (T__277 - 256)) | (1L << (T__278 - 256)) | (1L << (T__279 - 256)) | (1L << (T__280 - 256)) | (1L << (T__281 - 256)) | (1L << (T__282 - 256)) | (1L << (T__283 - 256)) | (1L << (T__284 - 256)) | (1L << (T__285 - 256)) | (1L << (T__286 - 256)) | (1L << (T__287 - 256)) | (1L << (T__288 - 256)) | (1L << (T__289 - 256)) | (1L << (T__290 - 256)) | (1L << (T__291 - 256)) | (1L << (T__292 - 256)) | (1L << (T__293 - 256)) | (1L << (T__294 - 256)) | (1L << (T__295 - 256)) | (1L << (T__296 - 256)) | (1L << (T__297 - 256)) | (1L << (T__298 - 256)) | (1L << (T__299 - 256)) | (1L << (T__300 - 256)) | (1L << (T__301 - 256)) | (1L << (T__302 - 256)) | (1L << (T__303 - 256)) | (1L << (T__304 - 256)) | (1L << (T__305 - 256)) | (1L << (T__306 - 256)) | (1L << (T__307 - 256)) | (1L << (T__308 - 256)) | (1L << (T__309 - 256)) | (1L << (T__310 - 256)) | (1L << (T__311 - 256)) | (1L << (ADD - 256)) | (1L << (LISTADD - 256)) | (1L << (LISTCONC - 256)) | (1L << (MUL - 256)) | (1L << (DIV - 256)) | (1L << (MOD - 256)) | (1L << (MOD2 - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SUB - 320)) | (1L << (ORB - 320)) | (1L << (COLON - 320)) | (1L << (LESS - 320)) | (1L << (GREATER - 320)) | (1L << (LOEQ - 320)) | (1L << (GOEQ - 320)) | (1L << (EQUAL - 320)) | (1L << (GUILL - 320)) | (1L << (COLG - 320)) | (1L << (LCOL - 320)) | (1L << (AND - 320)) | (1L << (OR - 320)) | (1L << (EQUIV - 320)) | (1L << (IMPLIES - 320)) | (1L << (TILDE - 320)) | (1L << (POW - 320)) | (1L << (KeySOME - 320)) | (1L << (KeyLOCAL - 320)) | (1L << (KeyREC - 320)) | (1L << (KeyREVERSE - 320)) | (1L << (KeySTARSTAR - 320)) | (1L << (STRING - 320)) | (1L << (IDENT - 320)) | (1L << (ACCESS_IDENT - 320)) | (1L << (NUM - 320)) | (1L << (WS - 320)) | (1L << (BLOCKCOMMENT - 320)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Coq_fragmentContext extends ParserRuleContext {
		public Coq_fragmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_coq_fragment; }
	 
		public Coq_fragmentContext() { }
		public void copyFrom(Coq_fragmentContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LtacFragmentContext extends Coq_fragmentContext {
		public LtacContext ltac() {
			return getRuleContext(LtacContext.class,0);
		}
		public LtacFragmentContext(Coq_fragmentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLtacFragment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLtacFragment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLtacFragment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SentenceFragmentContext extends Coq_fragmentContext {
		public SentenceContext sentence() {
			return getRuleContext(SentenceContext.class,0);
		}
		public SentenceFragmentContext(Coq_fragmentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSentenceFragment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSentenceFragment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSentenceFragment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommandFragmentContext extends Coq_fragmentContext {
		public CommandContext command() {
			return getRuleContext(CommandContext.class,0);
		}
		public CommandFragmentContext(Coq_fragmentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCommandFragment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCommandFragment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCommandFragment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Coq_fragmentContext coq_fragment() throws RecognitionException {
		Coq_fragmentContext _localctx = new Coq_fragmentContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_coq_fragment);
		try {
			setState(288);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				_localctx = new SentenceFragmentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(281);
				sentence();
				}
				break;
			case 2:
				_localctx = new LtacFragmentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(282);
				ltac();
				setState(283);
				match(T__0);
				}
				break;
			case 3:
				_localctx = new CommandFragmentContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(285);
				command();
				setState(286);
				match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BulletContext extends ParserRuleContext {
		public BulletContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bullet; }
	 
		public BulletContext() { }
		public void copyFrom(BulletContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AddContext extends BulletContext {
		public AddContext(BulletContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAdd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAdd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAdd(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubContext extends BulletContext {
		public SubContext(BulletContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSub(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSub(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSub(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Sub2Context extends BulletContext {
		public Sub2Context(BulletContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSub2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSub2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSub2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MulContext extends BulletContext {
		public MulContext(BulletContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMul(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMul(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMul(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Sub3Context extends BulletContext {
		public Sub3Context(BulletContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSub3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSub3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSub3(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DotContext extends BulletContext {
		public DotContext(BulletContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDot(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Add2Context extends BulletContext {
		public Add2Context(BulletContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAdd2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAdd2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAdd2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Mul3Context extends BulletContext {
		public Mul3Context(BulletContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMul3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMul3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMul3(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Mul2Context extends BulletContext {
		public Mul2Context(BulletContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMul2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMul2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMul2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Add3Context extends BulletContext {
		public Add3Context(BulletContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAdd3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAdd3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAdd3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BulletContext bullet() throws RecognitionException {
		BulletContext _localctx = new BulletContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_bullet);
		try {
			setState(300);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUB:
				_localctx = new SubContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(290);
				match(SUB);
				}
				break;
			case ADD:
				_localctx = new AddContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(291);
				match(ADD);
				}
				break;
			case MUL:
				_localctx = new MulContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(292);
				match(MUL);
				}
				break;
			case T__1:
				_localctx = new Sub2Context(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(293);
				match(T__1);
				}
				break;
			case LISTADD:
				_localctx = new Add2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(294);
				match(LISTADD);
				}
				break;
			case KeySTARSTAR:
				_localctx = new Mul2Context(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(295);
				match(KeySTARSTAR);
				}
				break;
			case T__2:
				_localctx = new Sub3Context(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(296);
				match(T__2);
				}
				break;
			case T__3:
				_localctx = new Add3Context(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(297);
				match(T__3);
				}
				break;
			case T__4:
				_localctx = new Mul3Context(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(298);
				match(T__4);
				}
				break;
			case T__5:
				_localctx = new DotContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(299);
				match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommandContext extends ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_command; }
	 
		public CommandContext() { }
		public void copyFrom(CommandContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StructCommandContext extends CommandContext {
		public Structural_commandContext structural_command() {
			return getRuleContext(Structural_commandContext.class,0);
		}
		public StructCommandContext(CommandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStructCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStructCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStructCommand(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UndefinedCommandContext extends CommandContext {
		public Undefined_commandContext undefined_command() {
			return getRuleContext(Undefined_commandContext.class,0);
		}
		public UndefinedCommandContext(CommandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUndefinedCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUndefinedCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUndefinedCommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommandContext command() throws RecognitionException {
		CommandContext _localctx = new CommandContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_command);
		try {
			setState(304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new StructCommandContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(302);
				structural_command();
				}
				break;
			case 2:
				_localctx = new UndefinedCommandContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(303);
				undefined_command();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Undefined_commandContext extends ParserRuleContext {
		public Undefined_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undefined_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUndefined_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUndefined_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUndefined_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Undefined_commandContext undefined_command() throws RecognitionException {
		Undefined_commandContext _localctx = new Undefined_commandContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_undefined_command);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(307); 
			_errHandler.sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					setState(306);
					matchWildcard();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(309); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			} while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Structural_commandContext extends ParserRuleContext {
		public Structural_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_structural_command; }
	 
		public Structural_commandContext() { }
		public void copyFrom(Structural_commandContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExportModuleContext extends Structural_commandContext {
		public ExportModuleContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExportModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExportModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExportModule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ImportModuleContext extends Structural_commandContext {
		public ImportModuleContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterImportModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitImportModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitImportModule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExportQualidsRequireContext extends Structural_commandContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public ExportQualidsRequireContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExportQualidsRequire(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExportQualidsRequire(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExportQualidsRequire(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ModuleExprLAddModuleContext extends Structural_commandContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<Module_expressionContext> module_expression() {
			return getRuleContexts(Module_expressionContext.class);
		}
		public Module_expressionContext module_expression(int i) {
			return getRuleContext(Module_expressionContext.class,i);
		}
		public Module_bindingsContext module_bindings() {
			return getRuleContext(Module_bindingsContext.class,0);
		}
		public ModuleExprLAddModuleContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterModuleExprLAddModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitModuleExprLAddModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitModuleExprLAddModule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ImportQualidsRequireContext extends Structural_commandContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public ImportQualidsRequireContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterImportQualidsRequire(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitImportQualidsRequire(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitImportQualidsRequire(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdModuleContext extends Structural_commandContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Module_bindingsContext module_bindings() {
			return getRuleContext(Module_bindingsContext.class,0);
		}
		public StdModuleContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdModule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ModuleTypesIncludeContext extends Structural_commandContext {
		public List<Module_typeContext> module_type() {
			return getRuleContexts(Module_typeContext.class);
		}
		public Module_typeContext module_type(int i) {
			return getRuleContext(Module_typeContext.class,i);
		}
		public ModuleTypesIncludeContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterModuleTypesInclude(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitModuleTypesInclude(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitModuleTypesInclude(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ModuleTypeColonModuleContext extends Structural_commandContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Module_typeContext module_type() {
			return getRuleContext(Module_typeContext.class,0);
		}
		public Module_bindingsContext module_bindings() {
			return getRuleContext(Module_bindingsContext.class,0);
		}
		public ModuleTypeColonModuleContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterModuleTypeColonModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitModuleTypeColonModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitModuleTypeColonModule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ImportRequireContext extends Structural_commandContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public ImportRequireContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterImportRequire(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitImportRequire(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitImportRequire(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdIncludeContext extends Structural_commandContext {
		public Module_typeContext module_type() {
			return getRuleContext(Module_typeContext.class,0);
		}
		public StdIncludeContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdInclude(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdInclude(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdInclude(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ModuleTypesLGrModuleContext extends Structural_commandContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<Module_typeContext> module_type() {
			return getRuleContexts(Module_typeContext.class);
		}
		public Module_typeContext module_type(int i) {
			return getRuleContext(Module_typeContext.class,i);
		}
		public Module_expressionContext module_expression() {
			return getRuleContext(Module_expressionContext.class,0);
		}
		public Module_bindingsContext module_bindings() {
			return getRuleContext(Module_bindingsContext.class,0);
		}
		public ModuleTypesLGrModuleContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterModuleTypesLGrModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitModuleTypesLGrModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitModuleTypesLGrModule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ModuleTypesLColonModuleContext extends Structural_commandContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<Module_typeContext> module_type() {
			return getRuleContexts(Module_typeContext.class);
		}
		public Module_typeContext module_type(int i) {
			return getRuleContext(Module_typeContext.class,i);
		}
		public ModuleTypesLColonModuleContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterModuleTypesLColonModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitModuleTypesLColonModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitModuleTypesLColonModule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdEndContext extends Structural_commandContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public StdEndContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdEnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdEnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdEnd(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExportRequireContext extends Structural_commandContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public ExportRequireContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExportRequire(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExportRequire(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExportRequire(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ModuletypeContext extends Structural_commandContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Module_bindingsContext module_bindings() {
			return getRuleContext(Module_bindingsContext.class,0);
		}
		public ModuletypeContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterModuletype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitModuletype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitModuletype(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ModuleTypeModuleContext extends Structural_commandContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Module_typeContext module_type() {
			return getRuleContext(Module_typeContext.class,0);
		}
		public ModuleTypeModuleContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterModuleTypeModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitModuleTypeModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitModuleTypeModule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ModuleExprDefModuleContext extends Structural_commandContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Module_expressionContext module_expression() {
			return getRuleContext(Module_expressionContext.class,0);
		}
		public Module_bindingsContext module_bindings() {
			return getRuleContext(Module_bindingsContext.class,0);
		}
		public Module_typeContext module_type() {
			return getRuleContext(Module_typeContext.class,0);
		}
		public ModuleExprDefModuleContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterModuleExprDefModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitModuleExprDefModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitModuleExprDefModule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdRequireContext extends Structural_commandContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public StdRequireContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdRequire(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdRequire(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdRequire(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdSectionContext extends Structural_commandContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public StdSectionContext(Structural_commandContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdSection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdSection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdSection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Structural_commandContext structural_command() throws RecognitionException {
		Structural_commandContext _localctx = new Structural_commandContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_structural_command);
		int _la;
		try {
			setState(437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				_localctx = new StdRequireContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(313);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__6) {
					{
					setState(311);
					match(T__6);
					setState(312);
					match(STRING);
					}
				}

				setState(315);
				match(T__7);
				setState(316);
				qualid(0);
				}
				break;
			case 2:
				_localctx = new ImportRequireContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(317);
				match(T__7);
				setState(318);
				match(T__8);
				setState(319);
				qualid(0);
				}
				break;
			case 3:
				_localctx = new ExportRequireContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(320);
				match(T__7);
				setState(321);
				match(T__9);
				setState(322);
				qualid(0);
				}
				break;
			case 4:
				_localctx = new ImportQualidsRequireContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(323);
				match(T__7);
				setState(324);
				match(T__8);
				setState(326); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(325);
					qualid(0);
					}
					}
					setState(328); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				}
				break;
			case 5:
				_localctx = new ExportQualidsRequireContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(330);
				match(T__7);
				setState(331);
				match(T__9);
				setState(333); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(332);
					qualid(0);
					}
					}
					setState(335); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				}
				break;
			case 6:
				_localctx = new StdSectionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(337);
				match(T__10);
				setState(338);
				ident();
				}
				break;
			case 7:
				_localctx = new StdEndContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(339);
				match(T__11);
				setState(340);
				ident();
				}
				break;
			case 8:
				_localctx = new StdModuleContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(341);
				match(T__12);
				setState(342);
				ident();
				setState(344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27) {
					{
					setState(343);
					module_bindings();
					}
				}

				}
				break;
			case 9:
				_localctx = new ModuleTypeModuleContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(346);
				match(T__12);
				setState(347);
				ident();
				setState(348);
				module_type(0);
				}
				break;
			case 10:
				_localctx = new ModuleTypeColonModuleContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(350);
				match(T__12);
				setState(351);
				ident();
				setState(353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27) {
					{
					setState(352);
					module_bindings();
					}
				}

				setState(355);
				match(COLON);
				setState(356);
				module_type(0);
				}
				break;
			case 11:
				_localctx = new ModuleTypesLColonModuleContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(358);
				match(T__12);
				setState(359);
				ident();
				setState(360);
				match(LCOL);
				setState(361);
				module_type(0);
				setState(366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==LCOL) {
					{
					{
					setState(362);
					match(LCOL);
					setState(363);
					module_type(0);
					}
					}
					setState(368);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 12:
				_localctx = new ExportModuleContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(369);
				match(T__12);
				setState(370);
				match(T__13);
				setState(371);
				match(T__9);
				setState(372);
				match(T__14);
				}
				break;
			case 13:
				_localctx = new ImportModuleContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(373);
				match(T__12);
				setState(374);
				match(T__13);
				setState(375);
				match(T__8);
				setState(376);
				match(T__14);
				}
				break;
			case 14:
				_localctx = new ModuleExprDefModuleContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(377);
				match(T__12);
				setState(378);
				ident();
				setState(380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27) {
					{
					setState(379);
					module_bindings();
					}
				}

				setState(384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(382);
					match(COLON);
					setState(383);
					module_type(0);
					}
				}

				setState(386);
				match(T__15);
				setState(387);
				module_expression();
				}
				break;
			case 15:
				_localctx = new ModuletypeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(389);
				match(T__12);
				setState(390);
				match(T__16);
				setState(391);
				ident();
				setState(393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27) {
					{
					setState(392);
					module_bindings();
					}
				}

				}
				break;
			case 16:
				_localctx = new ModuleTypesLGrModuleContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(395);
				match(T__12);
				setState(396);
				ident();
				setState(398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27) {
					{
					setState(397);
					module_bindings();
					}
				}

				setState(400);
				match(LCOL);
				setState(401);
				module_type(0);
				setState(406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==LCOL) {
					{
					{
					setState(402);
					match(LCOL);
					setState(403);
					module_type(0);
					}
					}
					setState(408);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(409);
				match(T__15);
				setState(410);
				module_expression();
				}
				break;
			case 17:
				_localctx = new ModuleExprLAddModuleContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(412);
				match(T__12);
				setState(413);
				ident();
				setState(415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27) {
					{
					setState(414);
					module_bindings();
					}
				}

				setState(417);
				match(T__15);
				setState(418);
				module_expression();
				setState(423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__17) {
					{
					{
					setState(419);
					match(T__17);
					setState(420);
					module_expression();
					}
					}
					setState(425);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 18:
				_localctx = new StdIncludeContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(426);
				match(T__18);
				setState(427);
				module_type(0);
				}
				break;
			case 19:
				_localctx = new ModuleTypesIncludeContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(428);
				match(T__18);
				setState(429);
				module_type(0);
				setState(434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__17) {
					{
					{
					setState(430);
					match(T__17);
					setState(431);
					module_type(0);
					}
					}
					setState(436);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proof_commandContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CollectionContext collection() {
			return getRuleContext(CollectionContext.class,0);
		}
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public Proof_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proof_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterProof_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitProof_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitProof_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proof_commandContext proof_command() throws RecognitionException {
		Proof_commandContext _localctx = new Proof_commandContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_proof_command);
		int _la;
		try {
			setState(519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(439);
				match(T__19);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(440);
				match(T__20);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(441);
				match(T__21);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(442);
				match(T__22);
				setState(444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (T__16 - 17)) | (1L << (T__27 - 17)) | (1L << (T__41 - 17)) | (1L << (T__71 - 17)) | (1L << (T__72 - 17)) | (1L << (T__73 - 17)) | (1L << (T__76 - 17)) | (1L << (T__79 - 17)))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (T__89 - 90)) | (1L << (T__90 - 90)) | (1L << (T__91 - 90)) | (1L << (T__92 - 90)) | (1L << (T__108 - 90)) | (1L << (T__132 - 90)) | (1L << (T__133 - 90)) | (1L << (T__138 - 90)) | (1L << (T__142 - 90)) | (1L << (T__148 - 90)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (T__156 - 157)) | (1L << (T__157 - 157)) | (1L << (T__159 - 157)) | (1L << (T__176 - 157)) | (1L << (T__178 - 157)) | (1L << (T__179 - 157)) | (1L << (T__182 - 157)) | (1L << (T__186 - 157)) | (1L << (T__187 - 157)) | (1L << (T__200 - 157)) | (1L << (T__213 - 157)) | (1L << (T__214 - 157)) | (1L << (T__215 - 157)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (T__221 - 222)) | (1L << (T__223 - 222)) | (1L << (T__226 - 222)) | (1L << (T__242 - 222)) | (1L << (T__244 - 222)) | (1L << (T__253 - 222)) | (1L << (T__254 - 222)) | (1L << (T__264 - 222)) | (1L << (T__269 - 222)) | (1L << (T__272 - 222)) | (1L << (T__273 - 222)) | (1L << (T__275 - 222)) | (1L << (T__276 - 222)) | (1L << (T__277 - 222)) | (1L << (T__278 - 222)) | (1L << (T__284 - 222)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (SUB - 311)) | (1L << (TILDE - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)) | (1L << (NUM - 311)))) != 0)) {
					{
					setState(443);
					term();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(446);
				match(T__22);
				setState(447);
				match(T__23);
				setState(449); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(448);
					ident();
					}
					}
					setState(451); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__24) {
					{
					setState(453);
					match(T__24);
					setState(454);
					expr(0);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(457);
				match(T__22);
				setState(458);
				match(T__23);
				setState(459);
				match(T__25);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(460);
				match(T__22);
				setState(461);
				match(T__23);
				setState(462);
				match(T__16);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(463);
				match(T__22);
				setState(464);
				match(T__23);
				setState(465);
				match(T__26);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(466);
				match(T__22);
				setState(467);
				match(T__23);
				setState(468);
				match(SUB);
				setState(469);
				match(T__27);
				setState(471); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(470);
					ident();
					}
					}
					setState(473); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(475);
				match(T__28);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(477);
				match(T__22);
				setState(478);
				match(T__23);
				setState(479);
				collection(0);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(480);
				match(T__29);
				setState(481);
				match(T__22);
				setState(482);
				match(T__30);
				setState(483);
				match(STRING);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(484);
				match(T__31);
				setState(485);
				match(T__22);
				setState(486);
				match(T__30);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(487);
				match(T__32);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(488);
				match(T__32);
				setState(489);
				ident();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(490);
				match(T__32);
				setState(491);
				match(T__25);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(492);
				match(T__33);
				setState(493);
				match(NUM);
				setState(494);
				match(T__15);
				setState(495);
				term();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(496);
				match(T__34);
				setState(497);
				match(T__33);
				setState(498);
				match(T__35);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(499);
				match(T__36);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(500);
				match(T__36);
				setState(501);
				match(NUM);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(502);
				match(T__37);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(503);
				match(T__38);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(504);
				match(T__38);
				setState(505);
				match(NUM);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(506);
				match(T__39);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(507);
				match(T__40);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(508);
				match(T__41);
				setState(509);
				match(T__42);
				setState(510);
				match(T__43);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(511);
				match(NUM);
				setState(512);
				match(COLON);
				setState(513);
				match(T__41);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(514);
				match(T__44);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(515);
				match(T__45);
				setState(516);
				match(T__46);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(517);
				match(T__47);
				setState(518);
				_la = _input.LA(1);
				if ( !(_la==T__22 || _la==T__48) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionContext extends ParserRuleContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public Section_subset_exprContext section_subset_expr() {
			return getRuleContext(Section_subset_exprContext.class,0);
		}
		public TerminalNode KeySOME() { return getToken(coqParser.KeySOME, 0); }
		public List<CollectionContext> collection() {
			return getRuleContexts(CollectionContext.class);
		}
		public CollectionContext collection(int i) {
			return getRuleContext(CollectionContext.class,i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCollection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCollection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCollection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionContext collection() throws RecognitionException {
		return collection(0);
	}

	private CollectionContext collection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		CollectionContext _localctx = new CollectionContext(_ctx, _parentState);
		CollectionContext _prevctx = _localctx;
		int _startState = 14;
		enterRecursionRule(_localctx, 14, RULE_collection, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(522);
				match(T__49);
				setState(523);
				ident();
				setState(524);
				match(T__15);
				setState(525);
				section_subset_expr();
				}
				break;
			case 2:
				{
				setState(527);
				match(T__49);
				setState(528);
				match(KeySOME);
				setState(529);
				match(T__15);
				setState(530);
				ident();
				setState(531);
				ident();
				setState(532);
				ident();
				}
				break;
			case 3:
				{
				setState(534);
				match(T__49);
				setState(535);
				match(T__50);
				setState(536);
				match(T__15);
				setState(537);
				match(KeySOME);
				setState(538);
				match(SUB);
				setState(539);
				ident();
				}
				break;
			case 4:
				{
				setState(540);
				match(T__49);
				setState(541);
				match(T__51);
				setState(542);
				match(T__15);
				setState(543);
				match(T__50);
				setState(544);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(545);
				match(KeySOME);
				}
				break;
			case 5:
				{
				setState(546);
				match(T__49);
				setState(547);
				match(T__51);
				setState(548);
				match(T__15);
				setState(549);
				match(T__50);
				setState(550);
				match(SUB);
				setState(551);
				match(T__27);
				setState(552);
				ident();
				setState(553);
				ident();
				setState(554);
				match(T__28);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(581);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(579);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
					case 1:
						{
						_localctx = new CollectionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_collection);
						setState(558);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(559);
						match(MUL);
						setState(560);
						collection(11);
						}
						break;
					case 2:
						{
						_localctx = new CollectionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_collection);
						setState(561);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(562);
						match(ADD);
						setState(563);
						collection(10);
						}
						break;
					case 3:
						{
						_localctx = new CollectionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_collection);
						setState(564);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(565);
						match(SUB);
						setState(566);
						collection(9);
						}
						break;
					case 4:
						{
						_localctx = new CollectionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_collection);
						setState(567);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(568);
						match(SUB);
						setState(569);
						match(T__27);
						setState(571); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(570);
							ident();
							}
							}
							setState(573); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
						setState(575);
						match(T__28);
						}
						break;
					case 5:
						{
						_localctx = new CollectionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_collection);
						setState(577);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(578);
						match(MUL);
						}
						break;
					}
					} 
				}
				setState(583);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Section_subset_exprContext extends ParserRuleContext {
		public Section_subset_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_section_subset_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSection_subset_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSection_subset_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSection_subset_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Section_subset_exprContext section_subset_expr() throws RecognitionException {
		Section_subset_exprContext _localctx = new Section_subset_exprContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_section_subset_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(584);
			match(T__52);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tactic_invocationContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Toplevel_selectorContext toplevel_selector() {
			return getRuleContext(Toplevel_selectorContext.class,0);
		}
		public Tactic_invocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tactic_invocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTactic_invocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTactic_invocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTactic_invocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tactic_invocationContext tactic_invocation() throws RecognitionException {
		Tactic_invocationContext _localctx = new Tactic_invocationContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_tactic_invocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(586);
				toplevel_selector();
				setState(587);
				match(COLON);
				}
				break;
			}
			setState(591);
			expr(0);
			setState(592);
			match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binding_listContext extends ParserRuleContext {
		public Binding_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binding_list; }
	 
		public Binding_listContext() { }
		public void copyFrom(Binding_listContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IdentBindingContext extends Binding_listContext {
		public List<Ident_binding_list_bodyContext> ident_binding_list_body() {
			return getRuleContexts(Ident_binding_list_bodyContext.class);
		}
		public Ident_binding_list_bodyContext ident_binding_list_body(int i) {
			return getRuleContext(Ident_binding_list_bodyContext.class,i);
		}
		public IdentBindingContext(Binding_listContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentBinding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentBinding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentBinding(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumBindingContext extends Binding_listContext {
		public List<Num_binding_list_bodyContext> num_binding_list_body() {
			return getRuleContexts(Num_binding_list_bodyContext.class);
		}
		public Num_binding_list_bodyContext num_binding_list_body(int i) {
			return getRuleContext(Num_binding_list_bodyContext.class,i);
		}
		public NumBindingContext(Binding_listContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumBinding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumBinding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumBinding(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BelowTermsContext extends Binding_listContext {
		public List<Below_term_ex_minusContext> below_term_ex_minus() {
			return getRuleContexts(Below_term_ex_minusContext.class);
		}
		public Below_term_ex_minusContext below_term_ex_minus(int i) {
			return getRuleContext(Below_term_ex_minusContext.class,i);
		}
		public BelowTermsContext(Binding_listContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBelowTerms(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBelowTerms(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBelowTerms(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Binding_listContext binding_list() throws RecognitionException {
		Binding_listContext _localctx = new Binding_listContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_binding_list);
		try {
			int _alt;
			setState(609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				_localctx = new NumBindingContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(595); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(594);
						num_binding_list_body();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(597); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				_localctx = new IdentBindingContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(600); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(599);
						ident_binding_list_body();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(602); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 3:
				_localctx = new BelowTermsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(605); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(604);
						below_term_ex_minus(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(607); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Num_binding_list_bodyContext extends ParserRuleContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Num_binding_list_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_num_binding_list_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNum_binding_list_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNum_binding_list_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNum_binding_list_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Num_binding_list_bodyContext num_binding_list_body() throws RecognitionException {
		Num_binding_list_bodyContext _localctx = new Num_binding_list_bodyContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_num_binding_list_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(611);
			match(T__27);
			setState(612);
			match(NUM);
			setState(613);
			match(T__15);
			setState(614);
			term();
			setState(615);
			match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ident_binding_list_bodyContext extends ParserRuleContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Ident_binding_list_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ident_binding_list_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdent_binding_list_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdent_binding_list_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdent_binding_list_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ident_binding_list_bodyContext ident_binding_list_body() throws RecognitionException {
		Ident_binding_list_bodyContext _localctx = new Ident_binding_list_bodyContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_ident_binding_list_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(617);
			match(T__27);
			setState(618);
			ident();
			setState(619);
			match(T__15);
			setState(620);
			term();
			setState(621);
			match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Atomic_tacticContext extends ParserRuleContext {
		public Atomic_tacticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atomic_tactic; }
	 
		public Atomic_tacticContext() { }
		public void copyFrom(Atomic_tacticContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InversionAtomicContext extends Atomic_tacticContext {
		public InversionContext inversion() {
			return getRuleContext(InversionContext.class,0);
		}
		public InversionAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInversionAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInversionAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInversionAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Applying_theoremAtomicContext extends Atomic_tacticContext {
		public Applying_theoremContext applying_theorem() {
			return getRuleContext(Applying_theoremContext.class,0);
		}
		public Applying_theoremAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterApplying_theoremAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitApplying_theoremAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitApplying_theoremAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Performing_computationAtomicContext extends Atomic_tacticContext {
		public Performing_computationContext performing_computation() {
			return getRuleContext(Performing_computationContext.class,0);
		}
		public Performing_computationAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPerforming_computationAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPerforming_computationAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPerforming_computationAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Case_analysis_inductionAtomicContext extends Atomic_tacticContext {
		public Case_analysis_inductionContext case_analysis_induction() {
			return getRuleContext(Case_analysis_inductionContext.class,0);
		}
		public Case_analysis_inductionAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCase_analysis_inductionAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCase_analysis_inductionAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCase_analysis_inductionAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Decision_proceduresAtomicContext extends Atomic_tacticContext {
		public Decision_proceduresContext decision_procedures() {
			return getRuleContext(Decision_proceduresContext.class,0);
		}
		public Decision_proceduresAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDecision_proceduresAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDecision_proceduresAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDecision_proceduresAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Controlling_proof_flowAtomicContext extends Atomic_tacticContext {
		public Controlling_proof_flowContext controlling_proof_flow() {
			return getRuleContext(Controlling_proof_flowContext.class,0);
		}
		public Controlling_proof_flowAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterControlling_proof_flowAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitControlling_proof_flowAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitControlling_proof_flowAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Checking_propertiesAtomicContext extends Atomic_tacticContext {
		public Checking_propertiesContext checking_properties() {
			return getRuleContext(Checking_propertiesContext.class,0);
		}
		public Checking_propertiesAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterChecking_propertiesAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitChecking_propertiesAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitChecking_propertiesAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Conversion_tactics_hypoAtomicContext extends Atomic_tacticContext {
		public Conversion_tactics_hypoContext conversion_tactics_hypo() {
			return getRuleContext(Conversion_tactics_hypoContext.class,0);
		}
		public Conversion_tactics_hypoAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterConversion_tactics_hypoAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitConversion_tactics_hypoAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitConversion_tactics_hypoAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Non_logicalAtomicContext extends Atomic_tacticContext {
		public Non_logicalContext non_logical() {
			return getRuleContext(Non_logicalContext.class,0);
		}
		public Non_logicalAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNon_logicalAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNon_logicalAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNon_logicalAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Managing_local_contextAtomicContext extends Atomic_tacticContext {
		public Managing_local_contextContext managing_local_context() {
			return getRuleContext(Managing_local_contextContext.class,0);
		}
		public Managing_local_contextAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterManaging_local_contextAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitManaging_local_contextAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitManaging_local_contextAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutomatizingAtomicContext extends Atomic_tacticContext {
		public AutomatizingContext automatizing() {
			return getRuleContext(AutomatizingContext.class,0);
		}
		public AutomatizingAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAutomatizingAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAutomatizingAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAutomatizingAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Rewriting_expressionsAtomicContext extends Atomic_tacticContext {
		public Rewriting_expressionsContext rewriting_expressions() {
			return getRuleContext(Rewriting_expressionsContext.class,0);
		}
		public Rewriting_expressionsAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRewriting_expressionsAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRewriting_expressionsAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRewriting_expressionsAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutomationAtomicContext extends Atomic_tacticContext {
		public AutomationContext automation() {
			return getRuleContext(AutomationContext.class,0);
		}
		public AutomationAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAutomationAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAutomationAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAutomationAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Classical_tacticsAtomicContext extends Atomic_tacticContext {
		public Classical_tacticsContext classical_tactics() {
			return getRuleContext(Classical_tacticsContext.class,0);
		}
		public Classical_tacticsAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterClassical_tacticsAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitClassical_tacticsAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitClassical_tacticsAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Equality_inductive_setsAtomicContext extends Atomic_tacticContext {
		public Equality_inductive_setsContext equality_inductive_sets() {
			return getRuleContext(Equality_inductive_setsContext.class,0);
		}
		public Equality_inductive_setsAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEquality_inductive_setsAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEquality_inductive_setsAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEquality_inductive_setsAtomic(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EqualityAtomicContext extends Atomic_tacticContext {
		public EqualityContext equality() {
			return getRuleContext(EqualityContext.class,0);
		}
		public EqualityAtomicContext(Atomic_tacticContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEqualityAtomic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEqualityAtomic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEqualityAtomic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Atomic_tacticContext atomic_tactic() throws RecognitionException {
		Atomic_tacticContext _localctx = new Atomic_tacticContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_atomic_tactic);
		try {
			setState(639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				_localctx = new Applying_theoremAtomicContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(623);
				applying_theorem();
				}
				break;
			case 2:
				_localctx = new Managing_local_contextAtomicContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(624);
				managing_local_context();
				}
				break;
			case 3:
				_localctx = new Controlling_proof_flowAtomicContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(625);
				controlling_proof_flow();
				}
				break;
			case 4:
				_localctx = new Case_analysis_inductionAtomicContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(626);
				case_analysis_induction();
				}
				break;
			case 5:
				_localctx = new Rewriting_expressionsAtomicContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(627);
				rewriting_expressions();
				}
				break;
			case 6:
				_localctx = new Performing_computationAtomicContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(628);
				performing_computation();
				}
				break;
			case 7:
				_localctx = new Conversion_tactics_hypoAtomicContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(629);
				conversion_tactics_hypo();
				}
				break;
			case 8:
				_localctx = new AutomationAtomicContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(630);
				automation();
				}
				break;
			case 9:
				_localctx = new Decision_proceduresAtomicContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(631);
				decision_procedures();
				}
				break;
			case 10:
				_localctx = new Checking_propertiesAtomicContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(632);
				checking_properties();
				}
				break;
			case 11:
				_localctx = new EqualityAtomicContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(633);
				equality();
				}
				break;
			case 12:
				_localctx = new Equality_inductive_setsAtomicContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(634);
				equality_inductive_sets();
				}
				break;
			case 13:
				_localctx = new InversionAtomicContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(635);
				inversion();
				}
				break;
			case 14:
				_localctx = new Classical_tacticsAtomicContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(636);
				classical_tactics();
				}
				break;
			case 15:
				_localctx = new AutomatizingAtomicContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(637);
				automatizing();
				}
				break;
			case 16:
				_localctx = new Non_logicalAtomicContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(638);
				non_logical();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_logicalContext extends ParserRuleContext {
		public Non_logicalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_logical; }
	 
		public Non_logicalContext() { }
		public void copyFrom(Non_logicalContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Shelve_unifiableContext extends Non_logicalContext {
		public Shelve_unifiableContext(Non_logicalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterShelve_unifiable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitShelve_unifiable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitShelve_unifiable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SwapContext extends Non_logicalContext {
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public SwapContext(Non_logicalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSwap(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSwap(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSwap(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RevgoalsContext extends Non_logicalContext {
		public RevgoalsContext(Non_logicalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRevgoals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRevgoals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRevgoals(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CycleContext extends Non_logicalContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public CycleContext(Non_logicalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCycle(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCycle(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCycle(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShelveContext extends Non_logicalContext {
		public ShelveContext(Non_logicalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterShelve(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitShelve(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitShelve(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_logicalContext non_logical() throws RecognitionException {
		Non_logicalContext _localctx = new Non_logicalContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_non_logical);
		int _la;
		try {
			setState(658);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__53:
				_localctx = new CycleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(641);
				match(T__53);
				setState(643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUB) {
					{
					setState(642);
					match(SUB);
					}
				}

				setState(645);
				match(NUM);
				}
				break;
			case T__54:
				_localctx = new SwapContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(646);
				match(T__54);
				setState(648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUB) {
					{
					setState(647);
					match(SUB);
					}
				}

				setState(650);
				match(NUM);
				setState(652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUB) {
					{
					setState(651);
					match(SUB);
					}
				}

				setState(654);
				match(NUM);
				}
				break;
			case T__55:
				_localctx = new RevgoalsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(655);
				match(T__55);
				}
				break;
			case T__56:
				_localctx = new ShelveContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(656);
				match(T__56);
				}
				break;
			case T__57:
				_localctx = new Shelve_unifiableContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(657);
				match(T__57);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AutomatizingContext extends ParserRuleContext {
		public AutomatizingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_automatizing; }
	 
		public AutomatizingContext() { }
		public void copyFrom(AutomatizingContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RingContext extends AutomatizingContext {
		public RingContext(AutomatizingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRing(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Ring_simplifyContext extends AutomatizingContext {
		public List<Below_term_ex_minusContext> below_term_ex_minus() {
			return getRuleContexts(Below_term_ex_minusContext.class);
		}
		public Below_term_ex_minusContext below_term_ex_minus(int i) {
			return getRuleContext(Below_term_ex_minusContext.class,i);
		}
		public Ring_simplifyContext(AutomatizingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRing_simplify(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRing_simplify(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRing_simplify(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Field_simplify_eqContext extends AutomatizingContext {
		public Field_simplify_eqContext(AutomatizingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterField_simplify_eq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitField_simplify_eq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitField_simplify_eq(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BtautoContext extends AutomatizingContext {
		public BtautoContext(AutomatizingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBtauto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBtauto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBtauto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Field_simplifyContext extends AutomatizingContext {
		public List<Below_term_ex_minusContext> below_term_ex_minus() {
			return getRuleContexts(Below_term_ex_minusContext.class);
		}
		public Below_term_ex_minusContext below_term_ex_minus(int i) {
			return getRuleContext(Below_term_ex_minusContext.class,i);
		}
		public Field_simplifyContext(AutomatizingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterField_simplify(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitField_simplify(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitField_simplify(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FourierContext extends AutomatizingContext {
		public FourierContext(AutomatizingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFourier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFourier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFourier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FieldAutomatizingContext extends AutomatizingContext {
		public FieldAutomatizingContext(AutomatizingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFieldAutomatizing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFieldAutomatizing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFieldAutomatizing(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OmegaContext extends AutomatizingContext {
		public OmegaContext(AutomatizingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterOmega(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitOmega(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitOmega(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AutomatizingContext automatizing() throws RecognitionException {
		AutomatizingContext _localctx = new AutomatizingContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_automatizing);
		try {
			int _alt;
			setState(678);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__58:
				_localctx = new BtautoContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(660);
				match(T__58);
				}
				break;
			case T__59:
				_localctx = new OmegaContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(661);
				match(T__59);
				}
				break;
			case T__60:
				_localctx = new RingContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(662);
				match(T__60);
				}
				break;
			case T__61:
				_localctx = new Ring_simplifyContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(663);
				match(T__61);
				setState(665); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(664);
						below_term_ex_minus(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(667); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,39,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case T__62:
				_localctx = new FieldAutomatizingContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(669);
				match(T__62);
				}
				break;
			case T__63:
				_localctx = new Field_simplifyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(670);
				match(T__63);
				setState(672); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(671);
						below_term_ex_minus(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(674); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case T__64:
				_localctx = new Field_simplify_eqContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(676);
				match(T__64);
				}
				break;
			case T__65:
				_localctx = new FourierContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(677);
				match(T__65);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Classical_tacticsContext extends ParserRuleContext {
		public Classical_tacticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classical_tactics; }
	 
		public Classical_tacticsContext() { }
		public void copyFrom(Classical_tacticsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Classical_leftContext extends Classical_tacticsContext {
		public Classical_leftContext(Classical_tacticsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterClassical_left(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitClassical_left(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitClassical_left(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Classical_rightContext extends Classical_tacticsContext {
		public Classical_rightContext(Classical_tacticsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterClassical_right(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitClassical_right(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitClassical_right(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Classical_tacticsContext classical_tactics() throws RecognitionException {
		Classical_tacticsContext _localctx = new Classical_tacticsContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_classical_tactics);
		try {
			setState(682);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__66:
				_localctx = new Classical_leftContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(680);
				match(T__66);
				}
				break;
			case T__67:
				_localctx = new Classical_rightContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(681);
				match(T__67);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InversionContext extends ParserRuleContext {
		public InversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inversion; }
	 
		public InversionContext() { }
		public void copyFrom(InversionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QuoteContext extends InversionContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public QuoteContext(InversionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQuote(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQuote(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQuote(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentFunctionalInversionContext extends InversionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public IdentFunctionalInversionContext(InversionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentFunctionalInversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentFunctionalInversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentFunctionalInversion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumFunctionalInversionContext extends InversionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public NumFunctionalInversionContext(InversionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumFunctionalInversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumFunctionalInversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumFunctionalInversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InversionContext inversion() throws RecognitionException {
		InversionContext _localctx = new InversionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_inversion);
		try {
			int _alt;
			setState(702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				_localctx = new IdentFunctionalInversionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(684);
				match(T__68);
				setState(685);
				match(T__69);
				setState(686);
				ident();
				setState(688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(687);
					qualid(0);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NumFunctionalInversionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(690);
				match(T__68);
				setState(691);
				match(T__69);
				setState(692);
				match(NUM);
				setState(694);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(693);
					qualid(0);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new QuoteContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(696);
				match(T__70);
				setState(698); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(697);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(700); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,45,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_inductive_setsContext extends ParserRuleContext {
		public Equality_inductive_setsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_inductive_sets; }
	 
		public Equality_inductive_setsContext() { }
		public void copyFrom(Equality_inductive_setsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TermESimplify_EqContext extends Equality_inductive_setsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermESimplify_EqContext(Equality_inductive_setsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermESimplify_Eq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermESimplify_Eq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermESimplify_Eq(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CompareContext extends Equality_inductive_setsContext {
		public List<Atomic_termContext> atomic_term() {
			return getRuleContexts(Atomic_termContext.class);
		}
		public Atomic_termContext atomic_term(int i) {
			return getRuleContext(Atomic_termContext.class,i);
		}
		public CompareContext(Equality_inductive_setsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCompare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCompare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCompare(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumESimplify_EqContext extends Equality_inductive_setsContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumESimplify_EqContext(Equality_inductive_setsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumESimplify_Eq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumESimplify_Eq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumESimplify_Eq(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DecideEqualityContext extends Equality_inductive_setsContext {
		public DecideEqualityContext(Equality_inductive_setsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDecideEquality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDecideEquality(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDecideEquality(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Simplify_EqContext extends Equality_inductive_setsContext {
		public Simplify_EqContext(Equality_inductive_setsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSimplify_Eq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSimplify_Eq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSimplify_Eq(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumSimplify_EqContext extends Equality_inductive_setsContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumSimplify_EqContext(Equality_inductive_setsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumSimplify_Eq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumSimplify_Eq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumSimplify_Eq(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermSimplify_EqContext extends Equality_inductive_setsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermSimplify_EqContext(Equality_inductive_setsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermSimplify_Eq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermSimplify_Eq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermSimplify_Eq(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DependentRewirteContext extends Equality_inductive_setsContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public DependentRewirteContext(Equality_inductive_setsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDependentRewirte(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDependentRewirte(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDependentRewirte(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equality_inductive_setsContext equality_inductive_sets() throws RecognitionException {
		Equality_inductive_setsContext _localctx = new Equality_inductive_setsContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_equality_inductive_sets);
		try {
			setState(731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				_localctx = new DecideEqualityContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(704);
				match(T__71);
				setState(705);
				match(T__72);
				}
				break;
			case 2:
				_localctx = new CompareContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(706);
				match(T__73);
				setState(707);
				atomic_term();
				setState(708);
				atomic_term();
				}
				break;
			case 3:
				_localctx = new TermSimplify_EqContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(710);
				match(T__74);
				setState(711);
				term();
				setState(714);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					setState(712);
					match(T__24);
					setState(713);
					binding_list();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new TermESimplify_EqContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(716);
				match(T__75);
				setState(717);
				term();
				setState(720);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(718);
					match(T__24);
					setState(719);
					binding_list();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new NumSimplify_EqContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(722);
				match(T__74);
				setState(723);
				match(NUM);
				}
				break;
			case 6:
				_localctx = new NumESimplify_EqContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(724);
				match(T__75);
				setState(725);
				match(NUM);
				}
				break;
			case 7:
				_localctx = new Simplify_EqContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(726);
				match(T__74);
				}
				break;
			case 8:
				_localctx = new DependentRewirteContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(727);
				match(T__76);
				setState(728);
				match(T__77);
				setState(729);
				match(T__78);
				setState(730);
				ident();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EqualityContext extends ParserRuleContext {
		public EqualityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality; }
	 
		public EqualityContext() { }
		public void copyFrom(EqualityContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SymmetryContext extends EqualityContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public SymmetryContext(EqualityContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSymmetry(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSymmetry(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSymmetry(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TransitivityContext extends EqualityContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TransitivityContext(EqualityContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTransitivity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTransitivity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTransitivity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class F_equalsContext extends EqualityContext {
		public F_equalsContext(EqualityContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterF_equals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitF_equals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitF_equals(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReflexivityContext extends EqualityContext {
		public ReflexivityContext(EqualityContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterReflexivity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitReflexivity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitReflexivity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EqualityContext equality() throws RecognitionException {
		EqualityContext _localctx = new EqualityContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_equality);
		try {
			setState(742);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__79:
				_localctx = new F_equalsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(733);
				match(T__79);
				}
				break;
			case T__80:
				_localctx = new ReflexivityContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(734);
				match(T__80);
				}
				break;
			case T__81:
				_localctx = new SymmetryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(735);
				match(T__81);
				setState(738);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(736);
					match(T__82);
					setState(737);
					ident();
					}
					break;
				}
				}
				break;
			case T__83:
				_localctx = new TransitivityContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(740);
				match(T__83);
				setState(741);
				term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Checking_propertiesContext extends ParserRuleContext {
		public Checking_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checking_properties; }
	 
		public Checking_propertiesContext() { }
		public void copyFrom(Checking_propertiesContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Is_EvarContext extends Checking_propertiesContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Is_EvarContext(Checking_propertiesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIs_Evar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIs_Evar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIs_Evar(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstrEqContext extends Checking_propertiesContext {
		public List<Atomic_termContext> atomic_term() {
			return getRuleContexts(Atomic_termContext.class);
		}
		public Atomic_termContext atomic_term(int i) {
			return getRuleContext(Atomic_termContext.class,i);
		}
		public ConstrEqContext(Checking_propertiesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterConstrEq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitConstrEq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitConstrEq(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnifyContext extends Checking_propertiesContext {
		public List<Atomic_termContext> atomic_term() {
			return getRuleContexts(Atomic_termContext.class);
		}
		public Atomic_termContext atomic_term(int i) {
			return getRuleContext(Atomic_termContext.class,i);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public UnifyContext(Checking_propertiesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnify(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnify(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnify(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Has_EvarContext extends Checking_propertiesContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Has_EvarContext(Checking_propertiesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterHas_Evar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitHas_Evar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitHas_Evar(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Is_VarContext extends Checking_propertiesContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Is_VarContext(Checking_propertiesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIs_Var(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIs_Var(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIs_Var(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Checking_propertiesContext checking_properties() throws RecognitionException {
		Checking_propertiesContext _localctx = new Checking_propertiesContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_checking_properties);
		try {
			setState(761);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__84:
				_localctx = new ConstrEqContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(744);
				match(T__84);
				setState(745);
				atomic_term();
				setState(746);
				atomic_term();
				}
				break;
			case T__85:
				_localctx = new UnifyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(748);
				match(T__85);
				setState(749);
				atomic_term();
				setState(750);
				atomic_term();
				setState(753);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					setState(751);
					match(T__24);
					setState(752);
					ident();
					}
					break;
				}
				}
				break;
			case T__86:
				_localctx = new Is_EvarContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(755);
				match(T__86);
				setState(756);
				term();
				}
				break;
			case T__87:
				_localctx = new Has_EvarContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(757);
				match(T__87);
				setState(758);
				term();
				}
				break;
			case T__88:
				_localctx = new Is_VarContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(759);
				match(T__88);
				setState(760);
				term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decision_proceduresContext extends ParserRuleContext {
		public Decision_proceduresContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decision_procedures; }
	 
		public Decision_proceduresContext() { }
		public void copyFrom(Decision_proceduresContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DtintuitionContext extends Decision_proceduresContext {
		public DtintuitionContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDtintuition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDtintuition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDtintuition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UsingWithFirstorderContext extends Decision_proceduresContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public UsingWithFirstorderContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUsingWithFirstorder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUsingWithFirstorder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUsingWithFirstorder(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CongruenceNContext extends Decision_proceduresContext {
		public CongruenceNContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCongruenceN(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCongruenceN(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCongruenceN(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TAutoContext extends Decision_proceduresContext {
		public TAutoContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CongruenceContext extends Decision_proceduresContext {
		public CongruenceContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCongruence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCongruence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCongruence(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprIntuitionContext extends Decision_proceduresContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ExprIntuitionContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExprIntuition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExprIntuition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExprIntuition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FirstorderContext extends Decision_proceduresContext {
		public FirstorderContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFirstorder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFirstorder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFirstorder(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithCongruenceContext extends Decision_proceduresContext {
		public List<Atomic_termContext> atomic_term() {
			return getRuleContexts(Atomic_termContext.class);
		}
		public Atomic_termContext atomic_term(int i) {
			return getRuleContext(Atomic_termContext.class,i);
		}
		public WithCongruenceContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithCongruence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithCongruence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithCongruence(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RtAutoContext extends Decision_proceduresContext {
		public RtAutoContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRtAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRtAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRtAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DTAutoContext extends Decision_proceduresContext {
		public DTAutoContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDTAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDTAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDTAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntuitionContext extends Decision_proceduresContext {
		public IntuitionContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntuition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntuition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntuition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UsingFirstorderContext extends Decision_proceduresContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public UsingFirstorderContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUsingFirstorder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUsingFirstorder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUsingFirstorder(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithFirstorderContext extends Decision_proceduresContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public WithFirstorderContext(Decision_proceduresContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithFirstorder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithFirstorder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithFirstorder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decision_proceduresContext decision_procedures() throws RecognitionException {
		Decision_proceduresContext _localctx = new Decision_proceduresContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_decision_procedures);
		int _la;
		try {
			int _alt;
			setState(808);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				_localctx = new TAutoContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(763);
				match(T__89);
				}
				break;
			case 2:
				_localctx = new DTAutoContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(764);
				match(T__90);
				}
				break;
			case 3:
				_localctx = new ExprIntuitionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(765);
				match(T__91);
				setState(766);
				expr(0);
				}
				break;
			case 4:
				_localctx = new IntuitionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(767);
				match(T__91);
				}
				break;
			case 5:
				_localctx = new DtintuitionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(768);
				match(T__92);
				}
				break;
			case 6:
				_localctx = new RtAutoContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(769);
				match(T__93);
				}
				break;
			case 7:
				_localctx = new FirstorderContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(770);
				match(T__94);
				}
				break;
			case 8:
				_localctx = new UsingFirstorderContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(771);
				match(T__94);
				setState(772);
				match(T__23);
				setState(774); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(773);
						qualid(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(776); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,54,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 9:
				_localctx = new WithFirstorderContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(778);
				match(T__94);
				setState(779);
				match(T__24);
				setState(781); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(780);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(783); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,55,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 10:
				_localctx = new UsingWithFirstorderContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(785);
				match(T__94);
				setState(786);
				match(T__95);
				setState(787);
				match(T__23);
				setState(789); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(788);
					qualid(0);
					}
					}
					setState(791); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(793);
				match(T__24);
				setState(795); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(794);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(797); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,57,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 11:
				_localctx = new CongruenceContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(799);
				match(T__96);
				}
				break;
			case 12:
				_localctx = new CongruenceNContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(800);
				match(T__97);
				}
				break;
			case 13:
				_localctx = new WithCongruenceContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(801);
				match(T__96);
				setState(802);
				match(T__24);
				setState(804); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(803);
						atomic_term();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(806); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,58,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AutomationContext extends ParserRuleContext {
		public AutomationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_automation; }
	 
		public AutomationContext() { }
		public void copyFrom(AutomationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Info_autoContext extends AutomationContext {
		public Info_autoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInfo_auto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInfo_auto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInfo_auto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoContext extends AutomationContext {
		public AutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Info_trivialContext extends AutomationContext {
		public Info_trivialContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInfo_trivial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInfo_trivial(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInfo_trivial(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DebugAutoContext extends AutomationContext {
		public DebugAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDebugAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDebugAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDebugAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithAutounfoldContext extends AutomationContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public WithAutounfoldContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithAutounfold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithAutounfold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithAutounfold(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumUsingWithAutoContext extends AutomationContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public List<LemmaContext> lemma() {
			return getRuleContexts(LemmaContext.class);
		}
		public LemmaContext lemma(int i) {
			return getRuleContext(LemmaContext.class,i);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public NumUsingWithAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumUsingWithAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumUsingWithAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumUsingWithAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithStarTrivialContext extends AutomationContext {
		public WithStarTrivialContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithStarTrivial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithStarTrivial(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithStarTrivial(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithUsingAutoRewriteContext extends AutomationContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public WithUsingAutoRewriteContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithUsingAutoRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithUsingAutoRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithUsingAutoRewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithInUsingAutoRewriteContext extends AutomationContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public WithInUsingAutoRewriteContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithInUsingAutoRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithInUsingAutoRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithInUsingAutoRewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UsingAutoContext extends AutomationContext {
		public List<LemmaContext> lemma() {
			return getRuleContexts(LemmaContext.class);
		}
		public LemmaContext lemma(int i) {
			return getRuleContext(LemmaContext.class,i);
		}
		public UsingAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUsingAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUsingAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUsingAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrivialContext extends AutomationContext {
		public TrivialContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTrivial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTrivial(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTrivial(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithStartAutounfoldContext extends AutomationContext {
		public WithStartAutounfoldContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithStartAutounfold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithStartAutounfold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithStartAutounfold(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UsingEAutoContext extends AutomationContext {
		public List<LemmaContext> lemma() {
			return getRuleContexts(LemmaContext.class);
		}
		public LemmaContext lemma(int i) {
			return getRuleContext(LemmaContext.class,i);
		}
		public UsingEAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUsingEAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUsingEAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUsingEAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithInClauseAutorewriteContext extends AutomationContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public WithInClauseAutorewriteContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithInClauseAutorewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithInClauseAutorewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithInClauseAutorewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NowContext extends AutomationContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public NowContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNow(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DebugTrivialContext extends AutomationContext {
		public DebugTrivialContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDebugTrivial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDebugTrivial(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDebugTrivial(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EAutoContext extends AutomationContext {
		public EAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithStartEAutoContext extends AutomationContext {
		public WithStartEAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithStartEAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithStartEAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithStartEAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithTrivialContext extends AutomationContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public WithTrivialContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithTrivial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithTrivial(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithTrivial(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumAutoContext extends AutomationContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumEAutoContext extends AutomationContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumEAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumEAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumEAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumEAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EasyContext extends AutomationContext {
		public EasyContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEasy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEasy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEasy(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumUsingWithInfo_AutoContext extends AutomationContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public List<LemmaContext> lemma() {
			return getRuleContexts(LemmaContext.class);
		}
		public LemmaContext lemma(int i) {
			return getRuleContext(LemmaContext.class,i);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public NumUsingWithInfo_AutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumUsingWithInfo_Auto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumUsingWithInfo_Auto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumUsingWithInfo_Auto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithEAutoContext extends AutomationContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public WithEAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithEAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithEAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithEAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithAutoContext extends AutomationContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public WithAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithInAutoRewriteContext extends AutomationContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public WithInAutoRewriteContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithInAutoRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithInAutoRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithInAutoRewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithStarAutoContext extends AutomationContext {
		public WithStarAutoContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithStarAuto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithStarAuto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithStarAuto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UsingTrivialContext extends AutomationContext {
		public List<LemmaContext> lemma() {
			return getRuleContexts(LemmaContext.class);
		}
		public LemmaContext lemma(int i) {
			return getRuleContext(LemmaContext.class,i);
		}
		public UsingTrivialContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUsingTrivial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUsingTrivial(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUsingTrivial(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithAutorewriteContext extends AutomationContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public WithAutorewriteContext(AutomationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithAutorewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithAutorewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithAutorewrite(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AutomationContext automation() throws RecognitionException {
		AutomationContext _localctx = new AutomationContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_automation);
		int _la;
		try {
			int _alt;
			setState(973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				_localctx = new AutoContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(810);
				match(T__98);
				}
				break;
			case 2:
				_localctx = new EAutoContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(811);
				match(T__99);
				}
				break;
			case 3:
				_localctx = new NumAutoContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(812);
				match(T__98);
				setState(813);
				match(NUM);
				}
				break;
			case 4:
				_localctx = new NumEAutoContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(814);
				match(T__99);
				setState(815);
				match(NUM);
				}
				break;
			case 5:
				_localctx = new WithStarAutoContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(816);
				match(T__98);
				setState(817);
				match(T__100);
				}
				break;
			case 6:
				_localctx = new WithAutoContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(818);
				match(T__98);
				setState(819);
				match(T__24);
				setState(821); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(820);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(823); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,60,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 7:
				_localctx = new WithEAutoContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(825);
				match(T__99);
				setState(826);
				match(T__24);
				setState(828); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(827);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(830); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,61,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				_localctx = new WithStartEAutoContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(832);
				match(T__99);
				setState(833);
				match(T__100);
				}
				break;
			case 9:
				_localctx = new UsingAutoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(834);
				match(T__98);
				setState(835);
				match(T__23);
				setState(837); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(836);
						lemma();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(839); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 10:
				_localctx = new UsingEAutoContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(841);
				match(T__99);
				setState(842);
				match(T__23);
				setState(844); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(843);
						lemma();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(846); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,63,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 11:
				_localctx = new NumUsingWithAutoContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(848);
				match(T__98);
				setState(849);
				match(NUM);
				setState(856);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(850);
					match(T__23);
					setState(852); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(851);
							lemma();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(854); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,64,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				setState(864);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					setState(858);
					match(T__24);
					setState(860); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(859);
							ident();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(862); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,66,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new NumUsingWithInfo_AutoContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(866);
				match(T__101);
				setState(867);
				match(NUM);
				setState(874);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
				case 1:
					{
					setState(868);
					match(T__23);
					setState(870); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(869);
							lemma();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(872); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,68,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				setState(882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					setState(876);
					match(T__24);
					setState(878); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(877);
							ident();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(880); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new Info_autoContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(884);
				match(T__101);
				}
				break;
			case 14:
				_localctx = new DebugAutoContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(885);
				match(T__102);
				setState(886);
				match(T__98);
				}
				break;
			case 15:
				_localctx = new TrivialContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(887);
				match(T__103);
				}
				break;
			case 16:
				_localctx = new WithTrivialContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(888);
				match(T__103);
				setState(889);
				match(T__24);
				setState(891); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(890);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(893); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 17:
				_localctx = new WithStarTrivialContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(895);
				match(T__103);
				setState(896);
				match(T__100);
				}
				break;
			case 18:
				_localctx = new UsingTrivialContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(897);
				match(T__103);
				setState(898);
				match(T__23);
				setState(900); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(899);
						lemma();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(902); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 19:
				_localctx = new DebugTrivialContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(904);
				match(T__102);
				setState(905);
				match(T__103);
				}
				break;
			case 20:
				_localctx = new Info_trivialContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(906);
				match(T__104);
				}
				break;
			case 21:
				_localctx = new WithAutounfoldContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(907);
				match(T__105);
				setState(908);
				match(T__24);
				setState(910); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(909);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(912); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(916);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					setState(914);
					match(T__82);
					setState(915);
					match(T__106);
					}
					break;
				}
				}
				break;
			case 22:
				_localctx = new WithStartAutounfoldContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(918);
				match(T__105);
				setState(919);
				match(T__24);
				setState(920);
				match(MUL);
				}
				break;
			case 23:
				_localctx = new WithAutorewriteContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(921);
				match(T__107);
				setState(922);
				match(T__24);
				setState(924); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(923);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(926); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 24:
				_localctx = new WithUsingAutoRewriteContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(928);
				match(T__107);
				setState(929);
				match(T__24);
				setState(931); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(930);
					ident();
					}
					}
					setState(933); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(935);
				match(T__23);
				setState(936);
				expr(0);
				}
				break;
			case 25:
				_localctx = new WithInAutoRewriteContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(938);
				match(T__107);
				setState(939);
				match(T__24);
				setState(941); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(940);
					ident();
					}
					}
					setState(943); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(945);
				match(T__82);
				setState(946);
				qualid(0);
				}
				break;
			case 26:
				_localctx = new WithInUsingAutoRewriteContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(948);
				match(T__107);
				setState(949);
				match(T__24);
				setState(951); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(950);
					ident();
					}
					}
					setState(953); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(955);
				match(T__82);
				setState(956);
				qualid(0);
				setState(957);
				match(T__23);
				setState(958);
				expr(0);
				}
				break;
			case 27:
				_localctx = new WithInClauseAutorewriteContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(960);
				match(T__107);
				setState(961);
				match(T__24);
				setState(963); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(962);
					ident();
					}
					}
					setState(965); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(967);
				match(T__82);
				setState(968);
				match(T__106);
				}
				break;
			case 28:
				_localctx = new EasyContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(970);
				match(T__108);
				}
				break;
			case 29:
				_localctx = new NowContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(971);
				match(T__109);
				setState(972);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conversion_tactics_hypoContext extends ParserRuleContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public Conversion_tactics_hypoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversion_tactics_hypo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterConversion_tactics_hypo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitConversion_tactics_hypo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitConversion_tactics_hypo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conversion_tactics_hypoContext conversion_tactics_hypo() throws RecognitionException {
		Conversion_tactics_hypoContext _localctx = new Conversion_tactics_hypoContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_conversion_tactics_hypo);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(975);
			match(T__110);
			setState(976);
			match(T__82);
			setState(977);
			ident();
			setState(982);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(978);
					match(T__111);
					setState(979);
					ident();
					}
					} 
				}
				setState(984);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Performing_computationContext extends ParserRuleContext {
		public Performing_computationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_performing_computation; }
	 
		public Performing_computationContext() { }
		public void copyFrom(Performing_computationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Native_computeContext extends Performing_computationContext {
		public Native_computeContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNative_compute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNative_compute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNative_compute(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermsPatternContext extends Performing_computationContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public TermsPatternContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermsPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermsPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermsPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CbnSingleCommandContext extends Performing_computationContext {
		public CbnSingleCommandContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCbnSingleCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCbnSingleCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCbnSingleCommand(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleInContext extends Performing_computationContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public SimpleInContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSimpleIn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSimpleIn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSimpleIn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LazyContext extends Performing_computationContext {
		public List<FlagContext> flag() {
			return getRuleContexts(FlagContext.class);
		}
		public FlagContext flag(int i) {
			return getRuleContext(FlagContext.class,i);
		}
		public LazyContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLazy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLazy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLazy(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleQualidContext extends Performing_computationContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public SimpleQualidContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSimpleQualid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSimpleQualid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSimpleQualid(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnfoldStringContext extends Performing_computationContext {
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public UnfoldStringContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnfoldString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnfoldString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnfoldString(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleStarContext extends Performing_computationContext {
		public SimpleStarContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSimpleStar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSimpleStar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSimpleStar(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ComputeContext extends Performing_computationContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public ComputeContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCompute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCompute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCompute(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RedContext extends Performing_computationContext {
		public RedContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRed(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRed(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimplContext extends Performing_computationContext {
		public SimplContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSimpl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSimpl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSimpl(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimplStringContext extends Performing_computationContext {
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public SimplStringContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSimplString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSimplString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSimplString(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnfoldQualidInContext extends Performing_computationContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public UnfoldQualidInContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnfoldQualidIn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnfoldQualidIn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnfoldQualidIn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtPatternContext extends Performing_computationContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TerminalNode SUB() { return getToken(coqParser.SUB, 0); }
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public AtPatternContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Vm_computeContext extends Performing_computationContext {
		public Vm_computeContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterVm_compute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitVm_compute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitVm_compute(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LazyQualidContext extends Performing_computationContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public LazyQualidContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLazyQualid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLazyQualid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLazyQualid(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimplPatternContext extends Performing_computationContext {
		public Pattern2Context pattern2() {
			return getRuleContext(Pattern2Context.class,0);
		}
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public SimplPatternContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSimplPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSimplPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSimplPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtUnfoldStringContext extends Performing_computationContext {
		public List<TerminalNode> STRING() { return getTokens(coqParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(coqParser.STRING, i);
		}
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public AtUnfoldStringContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtUnfoldString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtUnfoldString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtUnfoldString(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CbvQualidContext extends Performing_computationContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public CbvQualidContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCbvQualid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCbvQualid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCbvQualid(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HnfContext extends Performing_computationContext {
		public HnfContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterHnf(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitHnf(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitHnf(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtTermsPatternContext extends Performing_computationContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public List<TerminalNode> SUB() { return getTokens(coqParser.SUB); }
		public TerminalNode SUB(int i) {
			return getToken(coqParser.SUB, i);
		}
		public AtTermsPatternContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtTermsPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtTermsPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtTermsPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PerformingCompuationPatternContext extends Performing_computationContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public PerformingCompuationPatternContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPerformingCompuationPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPerformingCompuationPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPerformingCompuationPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentRedContext extends Performing_computationContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public IdentRedContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentRed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentRed(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentRed(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtUnfoldQualidContext extends Performing_computationContext {
		public List<QualidNumAtContext> qualidNumAt() {
			return getRuleContexts(QualidNumAtContext.class);
		}
		public QualidNumAtContext qualidNumAt(int i) {
			return getRuleContext(QualidNumAtContext.class,i);
		}
		public AtUnfoldQualidContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtUnfoldQualid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtUnfoldQualid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtUnfoldQualid(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CbnContext extends Performing_computationContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public CbnContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCbn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCbn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCbn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FoldContext extends Performing_computationContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public FoldContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFold(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CbvContext extends Performing_computationContext {
		public List<FlagContext> flag() {
			return getRuleContexts(FlagContext.class);
		}
		public FlagContext flag(int i) {
			return getRuleContext(FlagContext.class,i);
		}
		public CbvContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCbv(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCbv(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCbv(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PercUnfoldStringContext extends Performing_computationContext {
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public PercUnfoldStringContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPercUnfoldString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPercUnfoldString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPercUnfoldString(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommaUnfoldQualidContext extends Performing_computationContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public CommaUnfoldQualidContext(Performing_computationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCommaUnfoldQualid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCommaUnfoldQualid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCommaUnfoldQualid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Performing_computationContext performing_computation() throws RecognitionException {
		Performing_computationContext _localctx = new Performing_computationContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_performing_computation);
		int _la;
		try {
			int _alt;
			setState(1201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				_localctx = new CbvContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(985);
				match(T__112);
				setState(989);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,83,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(986);
						flag();
						}
						} 
					}
					setState(991);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,83,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new LazyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(992);
				match(T__113);
				setState(996);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(993);
						flag();
						}
						} 
					}
					setState(998);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
				}
				}
				break;
			case 3:
				_localctx = new ComputeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(999);
				match(T__114);
				setState(1001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUB) {
					{
					setState(1000);
					match(SUB);
					}
				}

				setState(1004); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1003);
						qualid(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1006); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 4:
				_localctx = new CbvQualidContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1008);
				match(T__112);
				setState(1010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUB) {
					{
					setState(1009);
					match(SUB);
					}
				}

				setState(1013); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1012);
						qualid(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1015); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,88,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 5:
				_localctx = new LazyQualidContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1017);
				match(T__113);
				setState(1019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUB) {
					{
					setState(1018);
					match(SUB);
					}
				}

				setState(1022); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1021);
						qualid(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1024); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,90,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 6:
				_localctx = new Vm_computeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1026);
				match(T__115);
				}
				break;
			case 7:
				_localctx = new Native_computeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1027);
				match(T__116);
				}
				break;
			case 8:
				_localctx = new RedContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1028);
				match(T__117);
				}
				break;
			case 9:
				_localctx = new IdentRedContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1029);
				match(T__117);
				setState(1030);
				match(T__82);
				setState(1031);
				ident();
				}
				break;
			case 10:
				_localctx = new HnfContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1032);
				match(T__118);
				}
				break;
			case 11:
				_localctx = new CbnSingleCommandContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1033);
				match(T__119);
				}
				break;
			case 12:
				_localctx = new CbnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1034);
				match(T__119);
				setState(1036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUB) {
					{
					setState(1035);
					match(SUB);
					}
				}

				setState(1038);
				qualid(0);
				}
				break;
			case 13:
				_localctx = new SimplContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1039);
				match(T__120);
				}
				break;
			case 14:
				_localctx = new SimpleInContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1040);
				match(T__120);
				setState(1041);
				match(T__82);
				setState(1042);
				ident();
				setState(1047);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,92,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1043);
						match(T__111);
						setState(1044);
						ident();
						}
						} 
					}
					setState(1049);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,92,_ctx);
				}
				}
				break;
			case 15:
				_localctx = new SimpleStarContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1050);
				match(T__120);
				setState(1051);
				match(T__82);
				setState(1052);
				match(MUL);
				}
				break;
			case 16:
				_localctx = new SimplPatternContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1053);
				match(T__120);
				setState(1054);
				pattern2();
				setState(1061);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					setState(1055);
					match(T__121);
					setState(1057); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1056);
							match(NUM);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1059); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 17:
				_localctx = new SimpleQualidContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1063);
				match(T__120);
				setState(1064);
				qualid(0);
				setState(1071);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1065);
					match(T__121);
					setState(1067); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1066);
							match(NUM);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1069); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,95,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 18:
				_localctx = new SimplStringContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1073);
				match(T__120);
				setState(1074);
				match(STRING);
				setState(1081);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
				case 1:
					{
					setState(1075);
					match(T__121);
					setState(1077); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1076);
							match(NUM);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1079); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,97,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 19:
				_localctx = new UnfoldQualidInContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1083);
				match(T__122);
				setState(1084);
				qualid(0);
				setState(1087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1085);
					match(T__82);
					setState(1086);
					ident();
					}
					break;
				}
				}
				break;
			case 20:
				_localctx = new CommaUnfoldQualidContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1089);
				match(T__122);
				setState(1090);
				qualid(0);
				setState(1095);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1091);
						match(T__111);
						setState(1092);
						qualid(0);
						}
						} 
					}
					setState(1097);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
				}
				}
				break;
			case 21:
				_localctx = new AtUnfoldQualidContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1098);
				match(T__122);
				setState(1099);
				qualidNumAt();
				setState(1104);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,101,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1100);
						match(T__111);
						setState(1101);
						qualidNumAt();
						}
						} 
					}
					setState(1106);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,101,_ctx);
				}
				}
				break;
			case 22:
				_localctx = new UnfoldStringContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1107);
				match(T__122);
				setState(1108);
				match(STRING);
				}
				break;
			case 23:
				_localctx = new PercUnfoldStringContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1109);
				match(T__122);
				setState(1110);
				match(STRING);
				setState(1111);
				match(T__123);
				setState(1112);
				ident();
				}
				break;
			case 24:
				_localctx = new AtUnfoldStringContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1113);
				match(T__122);
				setState(1114);
				match(STRING);
				setState(1115);
				match(T__121);
				setState(1116);
				match(NUM);
				setState(1121);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,102,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1117);
						match(T__111);
						setState(1118);
						match(NUM);
						}
						} 
					}
					setState(1123);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,102,_ctx);
				}
				setState(1137);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1124);
						match(T__111);
						setState(1125);
						match(STRING);
						setState(1126);
						match(T__121);
						setState(1127);
						match(NUM);
						setState(1132);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,103,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(1128);
								match(T__111);
								setState(1129);
								match(NUM);
								}
								} 
							}
							setState(1134);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,103,_ctx);
						}
						}
						} 
					}
					setState(1139);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
				}
				}
				break;
			case 25:
				_localctx = new FoldContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1140);
				match(T__124);
				setState(1142); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1141);
						term();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1144); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,105,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 26:
				_localctx = new PerformingCompuationPatternContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1146);
				match(T__125);
				setState(1147);
				term();
				}
				break;
			case 27:
				_localctx = new AtPatternContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1148);
				match(T__125);
				setState(1149);
				term();
				setState(1150);
				match(T__121);
				setState(1152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUB) {
					{
					setState(1151);
					match(SUB);
					}
				}

				setState(1155); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1154);
						match(NUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1157); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 28:
				_localctx = new TermsPatternContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(1159);
				match(T__125);
				setState(1160);
				term();
				setState(1165);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1161);
						match(T__111);
						setState(1162);
						term();
						}
						} 
					}
					setState(1167);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
				}
				}
				break;
			case 29:
				_localctx = new AtTermsPatternContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(1168);
				match(T__125);
				setState(1169);
				term();
				setState(1170);
				match(T__121);
				setState(1172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUB) {
					{
					setState(1171);
					match(SUB);
					}
				}

				setState(1174);
				match(NUM);
				setState(1179);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,110,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1175);
						match(T__111);
						setState(1176);
						match(NUM);
						}
						} 
					}
					setState(1181);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,110,_ctx);
				}
				setState(1198);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1182);
						match(T__111);
						setState(1183);
						term();
						setState(1184);
						match(T__121);
						setState(1186);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SUB) {
							{
							setState(1185);
							match(SUB);
							}
						}

						setState(1188);
						match(NUM);
						setState(1193);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,112,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(1189);
								match(T__111);
								setState(1190);
								match(NUM);
								}
								} 
							}
							setState(1195);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,112,_ctx);
						}
						}
						} 
					}
					setState(1200);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualidNumAtContext extends ParserRuleContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public QualidNumAtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualidNumAt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQualidNumAt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQualidNumAt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQualidNumAt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualidNumAtContext qualidNumAt() throws RecognitionException {
		QualidNumAtContext _localctx = new QualidNumAtContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_qualidNumAt);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1203);
			qualid(0);
			setState(1204);
			match(T__121);
			setState(1205);
			match(NUM);
			setState(1210);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,115,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1206);
					match(T__111);
					setState(1207);
					match(NUM);
					}
					} 
				}
				setState(1212);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,115,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rewriting_expressionsContext extends ParserRuleContext {
		public Rewriting_expressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rewriting_expressions; }
	 
		public Rewriting_expressionsContext() { }
		public void copyFrom(Rewriting_expressionsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DoubleReplaceContext extends Rewriting_expressionsContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public DoubleReplaceContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDoubleReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDoubleReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDoubleReplace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithChangeContext extends Rewriting_expressionsContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public TermWithChangeContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithChange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithChange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithChange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermInClauseRewriteContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Rew_prefixContext rew_prefix() {
			return getRuleContext(Rew_prefixContext.class,0);
		}
		public TermInClauseRewriteContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermInClauseRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermInClauseRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermInClauseRewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentsSubstContext extends Rewriting_expressionsContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public IdentsSubstContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentsSubst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentsSubst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentsSubst(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RightArrowReplaceContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public RightArrowReplaceContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRightArrowReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRightArrowReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRightArrowReplace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstContext extends Rewriting_expressionsContext {
		public SubstContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSubst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSubst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSubst(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithClauseReplaceContext extends Rewriting_expressionsContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public TermWithClauseReplaceContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithClauseReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithClauseReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithClauseReplace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RightArrowRewriteContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Rew_prefixContext rew_prefix() {
			return getRuleContext(Rew_prefixContext.class,0);
		}
		public RightArrowRewriteContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRightArrowRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRightArrowRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRightArrowRewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermBySteplContext extends Rewriting_expressionsContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public TermBySteplContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermByStepl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermByStepl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermByStepl(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermRewriteContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Rew_prefixContext rew_prefix() {
			return getRuleContext(Rew_prefixContext.class,0);
		}
		public TermRewriteContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermRewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermERewriteContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Rew_prefixContext rew_prefix() {
			return getRuleContext(Rew_prefixContext.class,0);
		}
		public TermERewriteContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermERewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermERewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermERewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithReplaceContext extends Rewriting_expressionsContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public TermWithReplaceContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithReplace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithInChangeContext extends Rewriting_expressionsContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermWithInChangeContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithInChange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithInChange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithInChange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithTacticReplaceContext extends Rewriting_expressionsContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public TermWithTacticReplaceContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithTacticReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithTacticReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithTacticReplace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermInChangeContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermInChangeContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermInChange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermInChange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermInChange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LeftArrowClauseReplaceContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public LeftArrowClauseReplaceContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLeftArrowClauseReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLeftArrowClauseReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLeftArrowClauseReplace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermSteplContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TermSteplContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermStepl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermStepl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermStepl(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAtWithChangeContext extends Rewriting_expressionsContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermAtWithChangeContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAtWithChange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAtWithChange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAtWithChange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Atomic_TermsRewriteContext extends Rewriting_expressionsContext {
		public List<Atomic_termContext> atomic_term() {
			return getRuleContexts(Atomic_termContext.class);
		}
		public Atomic_termContext atomic_term(int i) {
			return getRuleContext(Atomic_termContext.class,i);
		}
		public List<Rew_prefixContext> rew_prefix() {
			return getRuleContexts(Rew_prefixContext.class);
		}
		public Rew_prefixContext rew_prefix(int i) {
			return getRuleContext(Rew_prefixContext.class,i);
		}
		public Atomic_TermsRewriteContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtomic_TermsRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtomic_TermsRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtomic_TermsRewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermByRewriteContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Rew_prefixContext rew_prefix() {
			return getRuleContext(Rew_prefixContext.class,0);
		}
		public TermByRewriteContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermByRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermByRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermByRewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAtOccurencesRewriteContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public OccurencesContext occurences() {
			return getRuleContext(OccurencesContext.class,0);
		}
		public Rew_prefixContext rew_prefix() {
			return getRuleContext(Rew_prefixContext.class,0);
		}
		public TermAtOccurencesRewriteContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAtOccurencesRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAtOccurencesRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAtOccurencesRewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LeftArrowRewriteContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Rew_prefixContext rew_prefix() {
			return getRuleContext(Rew_prefixContext.class,0);
		}
		public LeftArrowRewriteContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLeftArrowRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLeftArrowRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLeftArrowRewrite(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LeftArrowReplaceContext extends Rewriting_expressionsContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public LeftArrowReplaceContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLeftArrowReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLeftArrowReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLeftArrowReplace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermClauseTacticReplaceContext extends Rewriting_expressionsContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public TermClauseTacticReplaceContext(Rewriting_expressionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermClauseTacticReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermClauseTacticReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermClauseTacticReplace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rewriting_expressionsContext rewriting_expressions() throws RecognitionException {
		Rewriting_expressionsContext _localctx = new Rewriting_expressionsContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_rewriting_expressions);
		int _la;
		try {
			int _alt;
			setState(1385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				_localctx = new TermRewriteContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1213);
				match(T__77);
				setState(1215);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					setState(1214);
					rew_prefix();
					}
					break;
				}
				setState(1217);
				term();
				}
				break;
			case 2:
				_localctx = new TermERewriteContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1218);
				match(T__126);
				setState(1220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					setState(1219);
					rew_prefix();
					}
					break;
				}
				setState(1222);
				term();
				}
				break;
			case 3:
				_localctx = new RightArrowRewriteContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1223);
				match(T__77);
				setState(1224);
				match(IMPLIES);
				setState(1226);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					setState(1225);
					rew_prefix();
					}
					break;
				}
				setState(1228);
				term();
				}
				break;
			case 4:
				_localctx = new LeftArrowRewriteContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1229);
				match(T__77);
				setState(1230);
				match(T__78);
				setState(1232);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					setState(1231);
					rew_prefix();
					}
					break;
				}
				setState(1234);
				term();
				}
				break;
			case 5:
				_localctx = new TermInClauseRewriteContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1235);
				match(T__77);
				setState(1237);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					setState(1236);
					rew_prefix();
					}
					break;
				}
				setState(1239);
				term();
				setState(1240);
				match(T__82);
				setState(1241);
				match(T__106);
				}
				break;
			case 6:
				_localctx = new TermAtOccurencesRewriteContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1243);
				match(T__77);
				setState(1245);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
				case 1:
					{
					setState(1244);
					rew_prefix();
					}
					break;
				}
				setState(1247);
				term();
				setState(1248);
				match(T__121);
				setState(1249);
				occurences();
				}
				break;
			case 7:
				_localctx = new TermByRewriteContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1251);
				match(T__77);
				setState(1253);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					setState(1252);
					rew_prefix();
					}
					break;
				}
				setState(1255);
				term();
				setState(1256);
				match(T__127);
				setState(1257);
				expr(0);
				}
				break;
			case 8:
				_localctx = new Atomic_TermsRewriteContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1259);
				match(T__77);
				setState(1261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
				case 1:
					{
					setState(1260);
					rew_prefix();
					}
					break;
				}
				setState(1264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__78 || _la==IMPLIES) {
					{
					setState(1263);
					_la = _input.LA(1);
					if ( !(_la==T__78 || _la==IMPLIES) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1266);
				atomic_term();
				setState(1279);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,128,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1268);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==T__111) {
							{
							setState(1267);
							match(T__111);
							}
						}

						setState(1271);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
						case 1:
							{
							setState(1270);
							rew_prefix();
							}
							break;
						}
						setState(1274);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==T__78 || _la==IMPLIES) {
							{
							setState(1273);
							_la = _input.LA(1);
							if ( !(_la==T__78 || _la==IMPLIES) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						setState(1276);
						atomic_term();
						}
						} 
					}
					setState(1281);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,128,_ctx);
				}
				}
				break;
			case 9:
				_localctx = new TermWithTacticReplaceContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1282);
				match(T__128);
				setState(1283);
				term();
				setState(1284);
				match(T__24);
				setState(1285);
				term();
				setState(1286);
				match(T__127);
				setState(1287);
				match(T__95);
				}
				break;
			case 10:
				_localctx = new TermWithClauseReplaceContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1289);
				match(T__128);
				setState(1290);
				term();
				setState(1291);
				match(T__24);
				setState(1292);
				term();
				setState(1293);
				match(T__82);
				setState(1294);
				match(T__106);
				}
				break;
			case 11:
				_localctx = new TermWithReplaceContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1296);
				match(T__128);
				setState(1297);
				term();
				setState(1298);
				match(T__24);
				setState(1299);
				term();
				}
				break;
			case 12:
				_localctx = new RightArrowReplaceContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1301);
				match(T__128);
				setState(1302);
				match(IMPLIES);
				setState(1303);
				term();
				}
				break;
			case 13:
				_localctx = new LeftArrowReplaceContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1304);
				match(T__128);
				setState(1305);
				match(T__78);
				setState(1306);
				term();
				}
				break;
			case 14:
				_localctx = new TermClauseTacticReplaceContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1307);
				match(T__128);
				setState(1308);
				term();
				setState(1309);
				match(T__24);
				setState(1310);
				term();
				setState(1311);
				match(T__82);
				setState(1312);
				match(T__106);
				setState(1313);
				match(T__127);
				setState(1314);
				match(T__95);
				}
				break;
			case 15:
				_localctx = new DoubleReplaceContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1316);
				match(T__128);
				setState(1317);
				term();
				setState(1318);
				match(T__82);
				setState(1319);
				match(T__106);
				setState(1320);
				match(T__128);
				setState(1321);
				match(IMPLIES);
				setState(1322);
				term();
				setState(1323);
				match(T__82);
				setState(1324);
				match(T__106);
				}
				break;
			case 16:
				_localctx = new LeftArrowClauseReplaceContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1326);
				match(T__128);
				setState(1327);
				match(T__78);
				setState(1328);
				term();
				setState(1329);
				match(T__82);
				setState(1330);
				match(T__106);
				}
				break;
			case 17:
				_localctx = new IdentsSubstContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1332);
				match(T__129);
				setState(1334); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1333);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1336); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 18:
				_localctx = new SubstContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1338);
				match(T__129);
				}
				break;
			case 19:
				_localctx = new TermSteplContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1339);
				match(T__130);
				setState(1340);
				term();
				setState(1343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					setState(1341);
					match(T__127);
					setState(1342);
					expr(0);
					}
					break;
				}
				}
				break;
			case 20:
				_localctx = new TermBySteplContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1345);
				match(T__131);
				setState(1346);
				term();
				setState(1347);
				match(T__131);
				setState(1348);
				term();
				setState(1349);
				match(T__127);
				setState(1350);
				match(T__95);
				}
				break;
			case 21:
				_localctx = new TermWithInChangeContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1352);
				match(T__132);
				setState(1353);
				term();
				setState(1354);
				match(T__24);
				setState(1355);
				term();
				setState(1356);
				match(T__82);
				setState(1357);
				ident();
				}
				break;
			case 22:
				_localctx = new TermWithChangeContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1359);
				match(T__132);
				setState(1360);
				term();
				setState(1361);
				match(T__24);
				setState(1362);
				term();
				}
				break;
			case 23:
				_localctx = new TermInChangeContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1364);
				match(T__132);
				setState(1365);
				term();
				setState(1366);
				match(T__82);
				setState(1367);
				ident();
				}
				break;
			case 24:
				_localctx = new TermAtWithChangeContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1369);
				match(T__132);
				setState(1370);
				term();
				setState(1371);
				match(T__121);
				setState(1372);
				match(NUM);
				setState(1376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NUM) {
					{
					{
					setState(1373);
					match(NUM);
					}
					}
					setState(1378);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1379);
				match(T__24);
				setState(1380);
				term();
				setState(1383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
				case 1:
					{
					setState(1381);
					match(T__82);
					setState(1382);
					ident();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rew_prefixContext extends ParserRuleContext {
		public Rew_prefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rew_prefix; }
	 
		public Rew_prefixContext() { }
		public void copyFrom(Rew_prefixContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QuestionContext extends Rew_prefixContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public QuestionContext(Rew_prefixContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQuestion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQuestion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQuestion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExclamationContext extends Rew_prefixContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public ExclamationContext(Rew_prefixContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExclamation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExclamation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExclamation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rew_prefixContext rew_prefix() throws RecognitionException {
		Rew_prefixContext _localctx = new Rew_prefixContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_rew_prefix);
		int _la;
		try {
			setState(1395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				_localctx = new QuestionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NUM) {
					{
					setState(1387);
					match(NUM);
					}
				}

				setState(1390);
				match(T__133);
				}
				break;
			case 2:
				_localctx = new ExclamationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NUM) {
					{
					setState(1391);
					match(NUM);
					}
				}

				setState(1394);
				match(T__134);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_analysis_inductionContext extends ParserRuleContext {
		public Case_analysis_inductionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_analysis_induction; }
	 
		public Case_analysis_inductionContext() { }
		public void copyFrom(Case_analysis_inductionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IdentInversionContext extends Case_analysis_inductionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public IdentInversionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentInversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentInversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentInversion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentDoubleInductionContext extends Case_analysis_inductionContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public IdentDoubleInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentDoubleInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentDoubleInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentDoubleInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAsListDestructContext extends Case_analysis_inductionContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Disj_conj_intro_patternContext> disj_conj_intro_pattern() {
			return getRuleContexts(Disj_conj_intro_patternContext.class);
		}
		public Disj_conj_intro_patternContext disj_conj_intro_pattern(int i) {
			return getRuleContext(Disj_conj_intro_patternContext.class,i);
		}
		public TermAsListDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAsListDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAsListDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAsListDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsInjectionContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public List<Intro_patternContext> intro_pattern() {
			return getRuleContexts(Intro_patternContext.class);
		}
		public Intro_patternContext intro_pattern(int i) {
			return getRuleContext(Intro_patternContext.class,i);
		}
		public AsInjectionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsInjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsInjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsInjection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DependentInductionContext extends Case_analysis_inductionContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public DependentInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDependentInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDependentInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDependentInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentInInversionContext extends Case_analysis_inductionContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public IdentInInversionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentInInversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentInInversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentInInversion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsInInversion_ClearContext extends Case_analysis_inductionContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public AsInInversion_ClearContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsInInversion_Clear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsInInversion_Clear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsInInversion_Clear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermElimContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermElimContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermElim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermElim(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermElim(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DependentInversion_ClearContext extends Case_analysis_inductionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public DependentInversion_ClearContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDependentInversion_Clear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDependentInversion_Clear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDependentInversion_Clear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentInversion_ClearContext extends Case_analysis_inductionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public IdentInversion_ClearContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentInversion_Clear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentInversion_Clear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentInversion_Clear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermEInductionContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermEInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermEInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermEInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermEInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithUsingWithEElimContext extends Case_analysis_inductionContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public WithUsingWithEElimContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithUsingWithEElim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithUsingWithEElim(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithUsingWithEElim(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermUsingInductionContext extends Case_analysis_inductionContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermUsingInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermUsingInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermUsingInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermUsingInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public CaseContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermEDiscriminateContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermEDiscriminateContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermEDiscriminate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermEDiscriminate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermEDiscriminate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumDiscriminateContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumDiscriminateContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumDiscriminate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumDiscriminate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumDiscriminate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermInductionContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermInInductionContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Goal_occurrencesContext goal_occurrences() {
			return getRuleContext(Goal_occurrencesContext.class,0);
		}
		public TermInInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermInInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermInInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermInInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumInversion_ClearContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumInversion_ClearContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumInversion_Clear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumInversion_Clear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumInversion_Clear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EcaseContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public EcaseContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEcase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEcase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEcase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermDestructContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Case_EqContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Case_EqContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCase_Eq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCase_Eq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCase_Eq(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ElimTypeContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ElimTypeContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterElimType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitElimType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitElimType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InversionUsingContext extends Case_analysis_inductionContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public InversionUsingContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInversionUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInversionUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInversionUsing(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithUsingWithElimContext extends Case_analysis_inductionContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public WithUsingWithElimContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithUsingWithElim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithUsingWithElim(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithUsingWithElim(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAsInjectionContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public List<Intro_patternContext> intro_pattern() {
			return getRuleContexts(Intro_patternContext.class);
		}
		public Intro_patternContext intro_pattern(int i) {
			return getRuleContext(Intro_patternContext.class,i);
		}
		public TermAsInjectionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAsInjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAsInjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAsInjection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsInInversionContext extends Case_analysis_inductionContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public AsInInversionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsInInversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsInInversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsInInversion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithElimContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermWithElimContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithElim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithElim(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithElim(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumDoubleInductionContext extends Case_analysis_inductionContext {
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public NumDoubleInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumDoubleInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumDoubleInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumDoubleInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsEInjectionContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public List<Intro_patternContext> intro_pattern() {
			return getRuleContexts(Intro_patternContext.class);
		}
		public Intro_patternContext intro_pattern(int i) {
			return getRuleContext(Intro_patternContext.class,i);
		}
		public AsEInjectionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsEInjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsEInjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsEInjection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleInversionContext extends Case_analysis_inductionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public SimpleInversionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSimpleInversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSimpleInversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSimpleInversion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithAsDestructContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public Disj_conj_intro_patternContext disj_conj_intro_pattern() {
			return getRuleContext(Disj_conj_intro_patternContext.class,0);
		}
		public TermWithAsDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithAsDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithAsDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithAsDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAtDestructContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public TermAtDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAtDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAtDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAtDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentInInversion_ClearContext extends Case_analysis_inductionContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public IdentInInversion_ClearContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentInInversion_Clear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentInInversion_Clear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentInInversion_Clear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermDiscriminateContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermDiscriminateContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermDiscriminate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermDiscriminate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermDiscriminate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermsUsingInductionContext extends Case_analysis_inductionContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public TermsUsingInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermsUsingInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermsUsingInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermsUsingInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermUsingElimContext extends Case_analysis_inductionContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermUsingElimContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermUsingElim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermUsingElim(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermUsingElim(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Inversion_SigmaContext extends Case_analysis_inductionContext {
		public Inversion_SigmaContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInversion_Sigma(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInversion_Sigma(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInversion_Sigma(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermEqDestructContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Naming_intro_patternContext naming_intro_pattern() {
			return getRuleContext(Naming_intro_patternContext.class,0);
		}
		public TermEqDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermEqDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermEqDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermEqDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FixCaseAnalysisInductionContext extends Case_analysis_inductionContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<BinderContext> binder() {
			return getRuleContexts(BinderContext.class);
		}
		public BinderContext binder(int i) {
			return getRuleContext(BinderContext.class,i);
		}
		public FixCaseAnalysisInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFixCaseAnalysisInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFixCaseAnalysisInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFixCaseAnalysisInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermEElimContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermEElimContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermEElim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermEElim(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermEElim(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsIdentInversionContext extends Case_analysis_inductionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public AsIdentInversionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsIdentInversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsIdentInversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsIdentInversion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumInjectionContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumInjectionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumInjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumInjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumInjection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithAsUsingInductionContext extends Case_analysis_inductionContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public Disj_conj_intro_patternContext disj_conj_intro_pattern() {
			return getRuleContext(Disj_conj_intro_patternContext.class,0);
		}
		public Goal_occurrencesContext goal_occurrences() {
			return getRuleContext(Goal_occurrencesContext.class,0);
		}
		public WithAsUsingInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithAsUsingInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithAsUsingInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithAsUsingInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermEInjectionAsContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public List<Intro_patternContext> intro_pattern() {
			return getRuleContexts(Intro_patternContext.class);
		}
		public Intro_patternContext intro_pattern(int i) {
			return getRuleContext(Intro_patternContext.class,i);
		}
		public TermEInjectionAsContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermEInjectionAs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermEInjectionAs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermEInjectionAs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionalInductionContext extends Case_analysis_inductionContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<Atomic_termContext> atomic_term() {
			return getRuleContexts(Atomic_termContext.class);
		}
		public Atomic_termContext atomic_term(int i) {
			return getRuleContext(Atomic_termContext.class,i);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Disj_conj_intro_patternContext disj_conj_intro_pattern() {
			return getRuleContext(Disj_conj_intro_patternContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public FunctionalInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFunctionalInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFunctionalInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFunctionalInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DiscriminateContext extends Case_analysis_inductionContext {
		public DiscriminateContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDiscriminate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDiscriminate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDiscriminate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumEInjectionContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumEInjectionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumEInjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumEInjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumEInjection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAsInductionContext extends Case_analysis_inductionContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Disj_conj_intro_patternContext disj_conj_intro_pattern() {
			return getRuleContext(Disj_conj_intro_patternContext.class,0);
		}
		public TermAsInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAsInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAsInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAsInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermInjectionContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermInjectionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermInjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermInjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermInjection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentAsInversion_ClearContext extends Case_analysis_inductionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public IdentAsInversion_ClearContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentAsInversion_Clear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentAsInversion_Clear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentAsInversion_Clear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentSimpleInductiContext extends Case_analysis_inductionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public IdentSimpleInductiContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentSimpleInducti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentSimpleInducti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentSimpleInducti(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermInDestructContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Goal_occurrencesContext goal_occurrences() {
			return getRuleContext(Goal_occurrencesContext.class,0);
		}
		public TermInDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermInDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermInDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermInDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermEInjectionContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermEInjectionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermEInjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermEInjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermEInjection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumSimpleInductiContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumSimpleInductiContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumSimpleInducti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumSimpleInducti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumSimpleInducti(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DependentInversionContext extends Case_analysis_inductionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public DependentInversionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDependentInversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDependentInversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDependentInversion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDestructContext extends Case_analysis_inductionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public SimpleDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSimpleDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSimpleDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSimpleDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CofixCaseAnalysisInductionContext extends Case_analysis_inductionContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<BinderContext> binder() {
			return getRuleContexts(BinderContext.class);
		}
		public BinderContext binder(int i) {
			return getRuleContext(BinderContext.class,i);
		}
		public CofixCaseAnalysisInductionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCofixCaseAnalysisInduction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCofixCaseAnalysisInduction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCofixCaseAnalysisInduction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermEDestructContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermEDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermEDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermEDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermEDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumInversionContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumInversionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumInversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumInversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumInversion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumAsInversion_ClearContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public NumAsInversion_ClearContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumAsInversion_Clear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumAsInversion_Clear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumAsInversion_Clear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsNumInversionContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public AsNumInversionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsNumInversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsNumInversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsNumInversion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermsDestructContext extends Case_analysis_inductionContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public TermsDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermsDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermsDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermsDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermUsingDestructContext extends Case_analysis_inductionContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermUsingDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermUsingDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermUsingDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermUsingDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithDestructContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public TermWithDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithDestruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumEDiscriminateContext extends Case_analysis_inductionContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumEDiscriminateContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumEDiscriminate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumEDiscriminate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumEDiscriminate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InjectionContext extends Case_analysis_inductionContext {
		public InjectionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInjection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DependentDestructionContext extends Case_analysis_inductionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public DependentDestructionContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDependentDestruction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDependentDestruction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDependentDestruction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAsDestructContext extends Case_analysis_inductionContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Disj_conj_intro_patternContext disj_conj_intro_pattern() {
			return getRuleContext(Disj_conj_intro_patternContext.class,0);
		}
		public TermAsDestructContext(Case_analysis_inductionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAsDestruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAsDestruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAsDestruct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_analysis_inductionContext case_analysis_induction() throws RecognitionException {
		Case_analysis_inductionContext _localctx = new Case_analysis_inductionContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_case_analysis_induction);
		int _la;
		try {
			int _alt;
			setState(1872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
			case 1:
				_localctx = new TermDestructContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1397);
				match(T__135);
				setState(1398);
				term();
				}
				break;
			case 2:
				_localctx = new TermEDestructContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1399);
				match(T__136);
				setState(1400);
				term();
				}
				break;
			case 3:
				_localctx = new TermsDestructContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1401);
				match(T__135);
				setState(1402);
				term();
				setState(1407);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,137,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1403);
						match(T__111);
						setState(1404);
						term();
						}
						} 
					}
					setState(1409);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,137,_ctx);
				}
				}
				break;
			case 4:
				_localctx = new TermAsDestructContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1410);
				match(T__135);
				setState(1411);
				term();
				setState(1412);
				match(T__137);
				setState(1413);
				disj_conj_intro_pattern();
				}
				break;
			case 5:
				_localctx = new TermAsListDestructContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1415);
				match(T__135);
				setState(1416);
				term();
				setState(1417);
				match(T__137);
				setState(1418);
				disj_conj_intro_pattern();
				setState(1426);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,138,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1419);
						match(T__111);
						setState(1420);
						term();
						setState(1421);
						match(T__137);
						setState(1422);
						disj_conj_intro_pattern();
						}
						} 
					}
					setState(1428);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,138,_ctx);
				}
				}
				break;
			case 6:
				_localctx = new TermEqDestructContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1429);
				match(T__135);
				setState(1430);
				term();
				setState(1431);
				match(T__138);
				setState(1432);
				naming_intro_pattern();
				}
				break;
			case 7:
				_localctx = new TermWithDestructContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1434);
				match(T__135);
				setState(1435);
				term();
				setState(1436);
				match(T__24);
				setState(1437);
				binding_list();
				}
				break;
			case 8:
				_localctx = new TermWithAsDestructContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1439);
				match(T__135);
				setState(1440);
				term();
				setState(1441);
				match(T__24);
				setState(1442);
				binding_list();
				setState(1443);
				match(T__137);
				setState(1444);
				disj_conj_intro_pattern();
				}
				break;
			case 9:
				_localctx = new TermUsingDestructContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1446);
				match(T__135);
				setState(1447);
				term();
				setState(1448);
				match(T__23);
				setState(1449);
				term();
				setState(1452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					setState(1450);
					match(T__24);
					setState(1451);
					binding_list();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new TermInDestructContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1454);
				match(T__135);
				setState(1455);
				term();
				setState(1456);
				match(T__82);
				setState(1457);
				goal_occurrences();
				}
				break;
			case 11:
				_localctx = new TermAtDestructContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1459);
				match(T__135);
				setState(1460);
				term();
				setState(1461);
				match(T__121);
				setState(1463); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1462);
						match(NUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1465); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 12:
				_localctx = new CaseContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1467);
				match(T__139);
				setState(1468);
				term();
				setState(1471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					setState(1469);
					match(T__24);
					setState(1470);
					binding_list();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new EcaseContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1473);
				match(T__140);
				setState(1474);
				term();
				setState(1477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					setState(1475);
					match(T__24);
					setState(1476);
					binding_list();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new SimpleDestructContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1479);
				match(T__141);
				setState(1480);
				match(T__135);
				setState(1483);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__71:
				case T__72:
				case T__73:
				case T__76:
				case T__79:
				case T__89:
				case T__90:
				case T__91:
				case T__92:
				case T__108:
				case T__132:
				case T__138:
				case T__142:
				case T__148:
				case T__156:
				case T__176:
				case T__178:
				case T__179:
				case T__186:
				case T__187:
				case T__200:
				case T__214:
				case T__215:
				case T__223:
				case T__253:
				case T__254:
				case T__264:
				case T__269:
				case T__310:
				case T__311:
				case KeySOME:
				case IDENT:
					{
					setState(1481);
					ident();
					}
					break;
				case NUM:
					{
					setState(1482);
					match(NUM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 15:
				_localctx = new Case_EqContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1485);
				match(T__142);
				setState(1486);
				term();
				}
				break;
			case 16:
				_localctx = new TermInductionContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1487);
				match(T__143);
				setState(1488);
				term();
				setState(1491);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
				case 1:
					{
					setState(1489);
					match(T__24);
					setState(1490);
					binding_list();
					}
					break;
				}
				}
				break;
			case 17:
				_localctx = new TermAsInductionContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1493);
				match(T__143);
				setState(1494);
				term();
				setState(1495);
				match(T__137);
				setState(1496);
				disj_conj_intro_pattern();
				setState(1499);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(1497);
					match(T__23);
					setState(1498);
					term();
					}
					break;
				}
				}
				break;
			case 18:
				_localctx = new TermUsingInductionContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1501);
				match(T__143);
				setState(1502);
				term();
				setState(1503);
				match(T__23);
				setState(1504);
				term();
				setState(1507);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(1505);
					match(T__24);
					setState(1506);
					binding_list();
					}
					break;
				}
				}
				break;
			case 19:
				_localctx = new TermsUsingInductionContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1509);
				match(T__143);
				setState(1510);
				term();
				setState(1515);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(1511);
					match(T__111);
					setState(1512);
					term();
					}
					}
					setState(1517);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1518);
				match(T__23);
				setState(1519);
				qualid(0);
				}
				break;
			case 20:
				_localctx = new TermInInductionContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1521);
				match(T__143);
				setState(1522);
				term();
				setState(1523);
				match(T__82);
				setState(1524);
				goal_occurrences();
				}
				break;
			case 21:
				_localctx = new TermEInductionContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1526);
				match(T__144);
				setState(1527);
				term();
				}
				break;
			case 22:
				_localctx = new WithAsUsingInductionContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1528);
				match(T__143);
				setState(1529);
				term();
				setState(1530);
				match(T__24);
				setState(1531);
				binding_list();
				setState(1532);
				match(T__137);
				setState(1533);
				disj_conj_intro_pattern();
				setState(1534);
				match(T__23);
				setState(1535);
				term();
				setState(1536);
				match(T__24);
				setState(1537);
				binding_list();
				setState(1538);
				match(T__82);
				setState(1539);
				goal_occurrences();
				}
				break;
			case 23:
				_localctx = new WithAsUsingInductionContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1541);
				match(T__144);
				setState(1542);
				term();
				setState(1543);
				match(T__24);
				setState(1544);
				binding_list();
				setState(1545);
				match(T__137);
				setState(1546);
				disj_conj_intro_pattern();
				setState(1547);
				match(T__23);
				setState(1548);
				term();
				setState(1549);
				match(T__24);
				setState(1550);
				binding_list();
				setState(1551);
				match(T__82);
				setState(1552);
				goal_occurrences();
				}
				break;
			case 24:
				_localctx = new TermElimContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1554);
				match(T__145);
				setState(1555);
				term();
				}
				break;
			case 25:
				_localctx = new TermEElimContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1556);
				match(T__146);
				setState(1557);
				term();
				}
				break;
			case 26:
				_localctx = new TermWithElimContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1558);
				match(T__145);
				setState(1559);
				term();
				setState(1560);
				match(T__24);
				setState(1561);
				binding_list();
				}
				break;
			case 27:
				_localctx = new TermUsingElimContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1563);
				match(T__145);
				setState(1564);
				term();
				setState(1565);
				match(T__23);
				setState(1566);
				term();
				setState(1569);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					setState(1567);
					match(T__24);
					setState(1568);
					binding_list();
					}
					break;
				}
				}
				break;
			case 28:
				_localctx = new WithUsingWithElimContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(1571);
				match(T__145);
				setState(1572);
				term();
				setState(1573);
				match(T__24);
				setState(1574);
				binding_list();
				setState(1575);
				match(T__23);
				setState(1576);
				term();
				setState(1577);
				match(T__24);
				setState(1578);
				binding_list();
				}
				break;
			case 29:
				_localctx = new WithUsingWithEElimContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(1580);
				match(T__146);
				setState(1581);
				term();
				setState(1582);
				match(T__24);
				setState(1583);
				binding_list();
				setState(1584);
				match(T__23);
				setState(1585);
				term();
				setState(1586);
				match(T__24);
				setState(1587);
				binding_list();
				}
				break;
			case 30:
				_localctx = new ElimTypeContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(1589);
				match(T__147);
				setState(1590);
				term();
				}
				break;
			case 31:
				_localctx = new IdentSimpleInductiContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(1591);
				match(T__141);
				setState(1592);
				match(T__143);
				setState(1593);
				ident();
				}
				break;
			case 32:
				_localctx = new NumSimpleInductiContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(1594);
				match(T__141);
				setState(1595);
				match(T__143);
				setState(1596);
				match(NUM);
				}
				break;
			case 33:
				_localctx = new IdentDoubleInductionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(1597);
				match(T__148);
				setState(1598);
				match(T__143);
				setState(1599);
				ident();
				setState(1600);
				ident();
				}
				break;
			case 34:
				_localctx = new NumDoubleInductionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(1602);
				match(T__148);
				setState(1603);
				match(T__143);
				setState(1604);
				match(NUM);
				setState(1605);
				match(NUM);
				}
				break;
			case 35:
				_localctx = new DependentInductionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(1606);
				match(T__76);
				setState(1607);
				match(T__143);
				setState(1608);
				ident();
				setState(1615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					setState(1609);
					match(T__149);
					setState(1611); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1610);
							ident();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1613); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,149,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 36:
				_localctx = new DependentDestructionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(1617);
				match(T__76);
				setState(1618);
				match(T__150);
				setState(1619);
				ident();
				}
				break;
			case 37:
				_localctx = new FunctionalInductionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(1620);
				match(T__68);
				setState(1621);
				match(T__143);
				setState(1622);
				match(T__27);
				setState(1623);
				qualid(0);
				setState(1625); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1624);
					atomic_term();
					}
					}
					setState(1627); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (T__16 - 17)) | (1L << (T__27 - 17)) | (1L << (T__71 - 17)) | (1L << (T__72 - 17)) | (1L << (T__73 - 17)) | (1L << (T__76 - 17)) | (1L << (T__79 - 17)))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (T__89 - 90)) | (1L << (T__90 - 90)) | (1L << (T__91 - 90)) | (1L << (T__92 - 90)) | (1L << (T__108 - 90)) | (1L << (T__132 - 90)) | (1L << (T__133 - 90)) | (1L << (T__138 - 90)) | (1L << (T__142 - 90)) | (1L << (T__148 - 90)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (T__156 - 157)) | (1L << (T__176 - 157)) | (1L << (T__178 - 157)) | (1L << (T__179 - 157)) | (1L << (T__186 - 157)) | (1L << (T__187 - 157)) | (1L << (T__200 - 157)) | (1L << (T__214 - 157)) | (1L << (T__215 - 157)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (T__221 - 222)) | (1L << (T__223 - 222)) | (1L << (T__253 - 222)) | (1L << (T__254 - 222)) | (1L << (T__264 - 222)) | (1L << (T__269 - 222)) | (1L << (T__277 - 222)) | (1L << (T__278 - 222)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)) | (1L << (NUM - 311)))) != 0) );
				setState(1629);
				match(T__28);
				setState(1640);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					setState(1632);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==T__137) {
						{
						setState(1630);
						match(T__137);
						setState(1631);
						disj_conj_intro_pattern();
						}
					}

					setState(1634);
					match(T__23);
					setState(1635);
					term();
					setState(1638);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
					case 1:
						{
						setState(1636);
						match(T__24);
						setState(1637);
						binding_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 38:
				_localctx = new TermDiscriminateContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(1642);
				match(T__151);
				setState(1643);
				term();
				setState(1646);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					setState(1644);
					match(T__24);
					setState(1645);
					binding_list();
					}
					break;
				}
				}
				break;
			case 39:
				_localctx = new TermEDiscriminateContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(1648);
				match(T__152);
				setState(1649);
				term();
				setState(1652);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(1650);
					match(T__24);
					setState(1651);
					binding_list();
					}
					break;
				}
				}
				break;
			case 40:
				_localctx = new NumDiscriminateContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(1654);
				match(T__151);
				setState(1655);
				match(NUM);
				}
				break;
			case 41:
				_localctx = new NumEDiscriminateContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(1656);
				match(T__152);
				setState(1657);
				match(NUM);
				}
				break;
			case 42:
				_localctx = new DiscriminateContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(1658);
				match(T__151);
				}
				break;
			case 43:
				_localctx = new TermInjectionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(1659);
				match(T__153);
				setState(1660);
				term();
				setState(1663);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(1661);
					match(T__24);
					setState(1662);
					binding_list();
					}
					break;
				}
				}
				break;
			case 44:
				_localctx = new TermEInjectionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(1665);
				match(T__154);
				setState(1666);
				term();
				setState(1669);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(1667);
					match(T__24);
					setState(1668);
					binding_list();
					}
					break;
				}
				}
				break;
			case 45:
				_localctx = new NumEInjectionContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(1671);
				match(T__154);
				setState(1672);
				match(NUM);
				}
				break;
			case 46:
				_localctx = new NumInjectionContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(1673);
				match(T__153);
				setState(1674);
				match(NUM);
				}
				break;
			case 47:
				_localctx = new InjectionContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(1675);
				match(T__153);
				}
				break;
			case 48:
				_localctx = new TermAsInjectionContext(_localctx);
				enterOuterAlt(_localctx, 48);
				{
				setState(1676);
				match(T__153);
				setState(1677);
				term();
				setState(1680);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__24) {
					{
					setState(1678);
					match(T__24);
					setState(1679);
					binding_list();
					}
				}

				setState(1682);
				match(T__137);
				setState(1684); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1683);
						intro_pattern(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1686); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 49:
				_localctx = new TermEInjectionAsContext(_localctx);
				enterOuterAlt(_localctx, 49);
				{
				setState(1688);
				match(T__154);
				setState(1689);
				term();
				setState(1692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__24) {
					{
					setState(1690);
					match(T__24);
					setState(1691);
					binding_list();
					}
				}

				setState(1694);
				match(T__137);
				setState(1696); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1695);
						intro_pattern(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1698); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 50:
				_localctx = new AsInjectionContext(_localctx);
				enterOuterAlt(_localctx, 50);
				{
				setState(1700);
				match(T__153);
				setState(1702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NUM) {
					{
					setState(1701);
					match(NUM);
					}
				}

				setState(1704);
				match(T__137);
				setState(1706); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1705);
						intro_pattern(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1708); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 51:
				_localctx = new AsEInjectionContext(_localctx);
				enterOuterAlt(_localctx, 51);
				{
				setState(1710);
				match(T__154);
				setState(1712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NUM) {
					{
					setState(1711);
					match(NUM);
					}
				}

				setState(1714);
				match(T__137);
				setState(1716); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1715);
						intro_pattern(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1718); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 52:
				_localctx = new IdentInversionContext(_localctx);
				enterOuterAlt(_localctx, 52);
				{
				setState(1720);
				match(T__69);
				setState(1721);
				ident();
				}
				break;
			case 53:
				_localctx = new NumInversionContext(_localctx);
				enterOuterAlt(_localctx, 53);
				{
				setState(1722);
				match(T__69);
				setState(1723);
				match(NUM);
				}
				break;
			case 54:
				_localctx = new IdentInversion_ClearContext(_localctx);
				enterOuterAlt(_localctx, 54);
				{
				setState(1724);
				match(T__155);
				setState(1725);
				ident();
				}
				break;
			case 55:
				_localctx = new NumInversion_ClearContext(_localctx);
				enterOuterAlt(_localctx, 55);
				{
				setState(1726);
				match(T__155);
				setState(1727);
				match(NUM);
				}
				break;
			case 56:
				_localctx = new AsIdentInversionContext(_localctx);
				enterOuterAlt(_localctx, 56);
				{
				setState(1728);
				match(T__69);
				setState(1729);
				ident();
				setState(1730);
				match(T__137);
				setState(1731);
				intro_pattern(0);
				}
				break;
			case 57:
				_localctx = new AsNumInversionContext(_localctx);
				enterOuterAlt(_localctx, 57);
				{
				setState(1733);
				match(T__69);
				setState(1734);
				match(NUM);
				setState(1735);
				match(T__137);
				setState(1736);
				intro_pattern(0);
				}
				break;
			case 58:
				_localctx = new IdentAsInversion_ClearContext(_localctx);
				enterOuterAlt(_localctx, 58);
				{
				setState(1737);
				match(T__155);
				setState(1738);
				ident();
				setState(1739);
				match(T__137);
				setState(1740);
				intro_pattern(0);
				}
				break;
			case 59:
				_localctx = new NumAsInversion_ClearContext(_localctx);
				enterOuterAlt(_localctx, 59);
				{
				setState(1742);
				match(T__155);
				setState(1743);
				match(NUM);
				setState(1744);
				match(T__137);
				setState(1745);
				intro_pattern(0);
				}
				break;
			case 60:
				_localctx = new IdentInInversion_ClearContext(_localctx);
				enterOuterAlt(_localctx, 60);
				{
				setState(1746);
				match(T__155);
				setState(1747);
				ident();
				setState(1748);
				match(T__82);
				setState(1750); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1749);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1752); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,167,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 61:
				_localctx = new IdentInInversionContext(_localctx);
				enterOuterAlt(_localctx, 61);
				{
				setState(1754);
				match(T__69);
				setState(1755);
				ident();
				setState(1756);
				match(T__82);
				setState(1758); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1757);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1760); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,168,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 62:
				_localctx = new AsInInversionContext(_localctx);
				enterOuterAlt(_localctx, 62);
				{
				setState(1762);
				match(T__69);
				setState(1763);
				ident();
				setState(1764);
				match(T__137);
				setState(1765);
				intro_pattern(0);
				setState(1766);
				match(T__82);
				setState(1768); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1767);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1770); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 63:
				_localctx = new AsInInversion_ClearContext(_localctx);
				enterOuterAlt(_localctx, 63);
				{
				setState(1772);
				match(T__155);
				setState(1773);
				ident();
				setState(1774);
				match(T__137);
				setState(1775);
				intro_pattern(0);
				setState(1776);
				match(T__82);
				setState(1778); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1777);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1780); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 64:
				_localctx = new DependentInversionContext(_localctx);
				enterOuterAlt(_localctx, 64);
				{
				setState(1782);
				match(T__76);
				setState(1783);
				match(T__69);
				setState(1784);
				ident();
				setState(1787);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
				case 1:
					{
					setState(1785);
					match(T__137);
					setState(1786);
					intro_pattern(0);
					}
					break;
				}
				setState(1791);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
				case 1:
					{
					setState(1789);
					match(T__24);
					setState(1790);
					term();
					}
					break;
				}
				}
				break;
			case 65:
				_localctx = new DependentInversion_ClearContext(_localctx);
				enterOuterAlt(_localctx, 65);
				{
				setState(1793);
				match(T__76);
				setState(1794);
				match(T__155);
				setState(1795);
				ident();
				setState(1798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
				case 1:
					{
					setState(1796);
					match(T__137);
					setState(1797);
					intro_pattern(0);
					}
					break;
				}
				setState(1802);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
				case 1:
					{
					setState(1800);
					match(T__24);
					setState(1801);
					term();
					}
					break;
				}
				}
				break;
			case 66:
				_localctx = new SimpleInversionContext(_localctx);
				enterOuterAlt(_localctx, 66);
				{
				setState(1804);
				match(T__141);
				setState(1805);
				match(T__69);
				setState(1806);
				ident();
				setState(1809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
				case 1:
					{
					setState(1807);
					match(T__137);
					setState(1808);
					intro_pattern(0);
					}
					break;
				}
				}
				break;
			case 67:
				_localctx = new InversionUsingContext(_localctx);
				enterOuterAlt(_localctx, 67);
				{
				setState(1811);
				match(T__69);
				setState(1812);
				ident();
				setState(1813);
				match(T__23);
				setState(1814);
				ident();
				setState(1821);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
				case 1:
					{
					setState(1815);
					match(T__82);
					setState(1817); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1816);
							ident();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1819); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 68:
				_localctx = new Inversion_SigmaContext(_localctx);
				enterOuterAlt(_localctx, 68);
				{
				setState(1823);
				match(T__156);
				}
				break;
			case 69:
				_localctx = new FixCaseAnalysisInductionContext(_localctx);
				enterOuterAlt(_localctx, 69);
				{
				setState(1824);
				match(T__157);
				setState(1825);
				ident();
				setState(1826);
				match(NUM);
				setState(1850);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					setState(1827);
					match(T__24);
					setState(1846); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1828);
							match(T__27);
							setState(1829);
							ident();
							setState(1831); 
							_errHandler.sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									setState(1830);
									binder();
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								setState(1833); 
								_errHandler.sync(this);
								_alt = getInterpreter().adaptivePredict(_input,178,_ctx);
							} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
							setState(1840);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==T__41) {
								{
								setState(1835);
								match(T__41);
								setState(1836);
								match(T__158);
								setState(1837);
								ident();
								setState(1838);
								match(T__43);
								}
							}

							setState(1842);
							match(COLON);
							setState(1843);
							term();
							setState(1844);
							match(T__28);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1848); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,180,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 70:
				_localctx = new CofixCaseAnalysisInductionContext(_localctx);
				enterOuterAlt(_localctx, 70);
				{
				setState(1852);
				match(T__159);
				setState(1853);
				ident();
				setState(1870);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
				case 1:
					{
					setState(1854);
					match(T__24);
					setState(1866); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1855);
							match(T__27);
							setState(1856);
							ident();
							setState(1858); 
							_errHandler.sync(this);
							_la = _input.LA(1);
							do {
								{
								{
								setState(1857);
								binder();
								}
								}
								setState(1860); 
								_errHandler.sync(this);
								_la = _input.LA(1);
							} while ( _la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
							setState(1862);
							match(COLON);
							setState(1863);
							term();
							setState(1864);
							match(T__28);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1868); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Controlling_proof_flowContext extends ParserRuleContext {
		public Controlling_proof_flowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_controlling_proof_flow; }
	 
		public Controlling_proof_flowContext() { }
		public void copyFrom(Controlling_proof_flowContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ValueInstantiateContext extends Controlling_proof_flowContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public ValueInstantiateContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterValueInstantiate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitValueInstantiate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitValueInstantiate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermByEnoughContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TermByEnoughContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermByEnough(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermByEnough(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermByEnough(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CutContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public CutContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCut(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCut(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCut(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PoseProofContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public PoseProofContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPoseProof(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPoseProof(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPoseProof(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ByAssertContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ByAssertContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterByAssert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitByAssert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitByAssert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsByEnoughContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AsByEnoughContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsByEnough(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsByEnough(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsByEnough(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsByEEnoughContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AsByEEnoughContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsByEEnough(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsByEEnough(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsByEEnough(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermGeneralizeContext extends Controlling_proof_flowContext {
		public List<Atomic_termContext> atomic_term() {
			return getRuleContexts(Atomic_termContext.class);
		}
		public Atomic_termContext atomic_term(int i) {
			return getRuleContext(Atomic_termContext.class,i);
		}
		public TermGeneralizeContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermGeneralize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermGeneralize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermGeneralize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EvarContext extends Controlling_proof_flowContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public EvarContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEvar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEvar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEvar(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InstantiateContext extends Controlling_proof_flowContext {
		public InstantiateContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInstantiate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInstantiate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInstantiate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentAssertContext extends Controlling_proof_flowContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentAssertContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentAssert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentAssert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentAssert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAtAsGeneralizeContext extends Controlling_proof_flowContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public TermAtAsGeneralizeContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAtAsGeneralize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAtAsGeneralize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAtAsGeneralize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentEnoughContext extends Controlling_proof_flowContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentEnoughContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentEnough(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentEnough(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentEnough(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AdmitContext extends Controlling_proof_flowContext {
		public AdmitContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAdmit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAdmit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAdmit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AbsurdContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public AbsurdContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAbsurd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAbsurd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAbsurd(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsByEAssertContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AsByEAssertContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsByEAssert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsByEAssert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsByEAssert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAssertContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermAssertContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAssert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAssert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAssert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ContradictionContext extends Controlling_proof_flowContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public ContradictionContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContradiction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContradiction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContradiction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAsGeneralizeContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermAsGeneralizeContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAsGeneralize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAsGeneralize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAsGeneralize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneralizeDependentContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public GeneralizeDependentContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterGeneralizeDependent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitGeneralizeDependent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitGeneralizeDependent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermByEEnoughContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TermByEEnoughContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermByEEnough(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermByEEnough(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermByEEnough(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ContradictContext extends Controlling_proof_flowContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public ContradictContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContradict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContradict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContradict(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentByEEnoughContext extends Controlling_proof_flowContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IdentByEEnoughContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentByEEnough(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentByEEnough(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentByEEnough(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentDefAssertContext extends Controlling_proof_flowContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentDefAssertContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentDefAssert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentDefAssert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentDefAssert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumInstantiateContext extends Controlling_proof_flowContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public NumInstantiateContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumInstantiate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumInstantiate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumInstantiate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermEnoughContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermEnoughContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermEnough(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermEnough(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermEnough(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsByAssertContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AsByAssertContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsByAssert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsByAssert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsByAssert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TypeInstantiateContext extends Controlling_proof_flowContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TypeInstantiateContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTypeInstantiate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTypeInstantiate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTypeInstantiate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsAssertContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public AsAssertContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsAssert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsAssert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsAssert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EPoseProofContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public EPoseProofContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEPoseProof(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEPoseProof(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEPoseProof(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermAtGeneralizeContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public TermAtGeneralizeContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermAtGeneralize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermAtGeneralize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermAtGeneralize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithSpecializeContext extends Controlling_proof_flowContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public WithSpecializeContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithSpecialize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithSpecialize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithSpecialize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Give_upContext extends Controlling_proof_flowContext {
		public Give_upContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterGive_up(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitGive_up(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitGive_up(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumInInstantiateContext extends Controlling_proof_flowContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public NumInInstantiateContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumInInstantiate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumInInstantiate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumInInstantiate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentByEnoughContext extends Controlling_proof_flowContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IdentByEnoughContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentByEnough(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentByEnough(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentByEnough(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentInstantiateContext extends Controlling_proof_flowContext {
		public TerminalNode IDENT() { return getToken(coqParser.IDENT, 0); }
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentInstantiateContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentInstantiate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentInstantiate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentInstantiate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExfalsoContext extends Controlling_proof_flowContext {
		public ExfalsoContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExfalso(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExfalso(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExfalso(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsEnoughContext extends Controlling_proof_flowContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public AsEnoughContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsEnough(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsEnough(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsEnough(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SpecializeContext extends Controlling_proof_flowContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<Atomic_termContext> atomic_term() {
			return getRuleContexts(Atomic_termContext.class);
		}
		public Atomic_termContext atomic_term(int i) {
			return getRuleContext(Atomic_termContext.class,i);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public SpecializeContext(Controlling_proof_flowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSpecialize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSpecialize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSpecialize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Controlling_proof_flowContext controlling_proof_flow() throws RecognitionException {
		Controlling_proof_flowContext _localctx = new Controlling_proof_flowContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_controlling_proof_flow);
		int _la;
		try {
			int _alt;
			setState(2124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				_localctx = new IdentAssertContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1874);
				match(T__160);
				setState(1875);
				match(T__27);
				setState(1876);
				ident();
				setState(1877);
				match(COLON);
				setState(1878);
				term();
				setState(1879);
				match(T__28);
				}
				break;
			case 2:
				_localctx = new TermAssertContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1881);
				match(T__160);
				setState(1882);
				term();
				}
				break;
			case 3:
				_localctx = new ByAssertContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1883);
				match(T__160);
				setState(1884);
				term();
				setState(1885);
				match(T__127);
				setState(1886);
				expr(0);
				}
				break;
			case 4:
				_localctx = new AsAssertContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1888);
				match(T__160);
				setState(1889);
				term();
				setState(1890);
				match(T__137);
				setState(1891);
				intro_pattern(0);
				}
				break;
			case 5:
				_localctx = new AsByAssertContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1893);
				match(T__160);
				setState(1894);
				term();
				setState(1895);
				match(T__137);
				setState(1896);
				intro_pattern(0);
				setState(1897);
				match(T__127);
				setState(1898);
				expr(0);
				}
				break;
			case 6:
				_localctx = new AsByEAssertContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1900);
				match(T__161);
				setState(1901);
				term();
				setState(1902);
				match(T__137);
				setState(1903);
				intro_pattern(0);
				setState(1904);
				match(T__127);
				setState(1905);
				expr(0);
				}
				break;
			case 7:
				_localctx = new IdentDefAssertContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1907);
				match(T__160);
				setState(1908);
				match(T__27);
				setState(1909);
				ident();
				setState(1910);
				match(T__15);
				setState(1911);
				term();
				setState(1912);
				match(T__28);
				}
				break;
			case 8:
				_localctx = new PoseProofContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1914);
				match(T__162);
				setState(1915);
				match(T__163);
				setState(1916);
				term();
				setState(1919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
				case 1:
					{
					setState(1917);
					match(T__137);
					setState(1918);
					intro_pattern(0);
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new EPoseProofContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1921);
				match(T__164);
				setState(1922);
				match(T__163);
				setState(1923);
				term();
				setState(1926);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					setState(1924);
					match(T__137);
					setState(1925);
					intro_pattern(0);
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new IdentEnoughContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1928);
				match(T__165);
				setState(1929);
				match(T__27);
				setState(1930);
				ident();
				setState(1931);
				match(COLON);
				setState(1932);
				term();
				setState(1933);
				match(T__28);
				}
				break;
			case 11:
				_localctx = new TermEnoughContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1935);
				match(T__165);
				setState(1936);
				term();
				}
				break;
			case 12:
				_localctx = new AsEnoughContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1937);
				match(T__165);
				setState(1938);
				term();
				setState(1939);
				match(T__137);
				setState(1940);
				intro_pattern(0);
				}
				break;
			case 13:
				_localctx = new IdentByEnoughContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1942);
				match(T__165);
				setState(1943);
				match(T__27);
				setState(1944);
				ident();
				setState(1945);
				match(COLON);
				setState(1946);
				term();
				setState(1947);
				match(T__28);
				setState(1948);
				match(T__127);
				setState(1949);
				expr(0);
				}
				break;
			case 14:
				_localctx = new IdentByEEnoughContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1951);
				match(T__166);
				setState(1952);
				match(T__27);
				setState(1953);
				ident();
				setState(1954);
				match(COLON);
				setState(1955);
				term();
				setState(1956);
				match(T__28);
				setState(1957);
				match(T__127);
				setState(1958);
				expr(0);
				}
				break;
			case 15:
				_localctx = new TermByEnoughContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1960);
				match(T__165);
				setState(1961);
				term();
				setState(1962);
				match(T__127);
				setState(1963);
				expr(0);
				}
				break;
			case 16:
				_localctx = new TermByEEnoughContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1965);
				match(T__166);
				setState(1966);
				term();
				setState(1967);
				match(T__127);
				setState(1968);
				expr(0);
				}
				break;
			case 17:
				_localctx = new AsByEnoughContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1970);
				match(T__165);
				setState(1971);
				term();
				setState(1972);
				match(T__137);
				setState(1973);
				intro_pattern(0);
				setState(1974);
				match(T__127);
				setState(1975);
				expr(0);
				}
				break;
			case 18:
				_localctx = new AsByEEnoughContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1977);
				match(T__166);
				setState(1978);
				term();
				setState(1979);
				match(T__137);
				setState(1980);
				intro_pattern(0);
				setState(1981);
				match(T__127);
				setState(1982);
				expr(0);
				}
				break;
			case 19:
				_localctx = new CutContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1984);
				match(T__167);
				setState(1985);
				term();
				}
				break;
			case 20:
				_localctx = new SpecializeContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1986);
				match(T__168);
				setState(1987);
				match(T__27);
				setState(1988);
				ident();
				setState(1992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (T__16 - 17)) | (1L << (T__27 - 17)) | (1L << (T__71 - 17)) | (1L << (T__72 - 17)) | (1L << (T__73 - 17)) | (1L << (T__76 - 17)) | (1L << (T__79 - 17)))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (T__89 - 90)) | (1L << (T__90 - 90)) | (1L << (T__91 - 90)) | (1L << (T__92 - 90)) | (1L << (T__108 - 90)) | (1L << (T__132 - 90)) | (1L << (T__133 - 90)) | (1L << (T__138 - 90)) | (1L << (T__142 - 90)) | (1L << (T__148 - 90)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (T__156 - 157)) | (1L << (T__176 - 157)) | (1L << (T__178 - 157)) | (1L << (T__179 - 157)) | (1L << (T__186 - 157)) | (1L << (T__187 - 157)) | (1L << (T__200 - 157)) | (1L << (T__214 - 157)) | (1L << (T__215 - 157)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (T__221 - 222)) | (1L << (T__223 - 222)) | (1L << (T__253 - 222)) | (1L << (T__254 - 222)) | (1L << (T__264 - 222)) | (1L << (T__269 - 222)) | (1L << (T__277 - 222)) | (1L << (T__278 - 222)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)) | (1L << (NUM - 311)))) != 0)) {
					{
					{
					setState(1989);
					atomic_term();
					}
					}
					setState(1994);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1995);
				match(T__28);
				setState(1998);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
				case 1:
					{
					setState(1996);
					match(T__137);
					setState(1997);
					intro_pattern(0);
					}
					break;
				}
				}
				break;
			case 21:
				_localctx = new WithSpecializeContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2000);
				match(T__168);
				setState(2001);
				ident();
				setState(2002);
				match(T__24);
				setState(2003);
				binding_list();
				setState(2006);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(2004);
					match(T__137);
					setState(2005);
					intro_pattern(0);
					}
					break;
				}
				}
				break;
			case 22:
				_localctx = new TermGeneralizeContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2008);
				match(T__169);
				setState(2010); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2009);
						atomic_term();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2012); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,191,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 23:
				_localctx = new TermAtGeneralizeContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2014);
				match(T__169);
				setState(2015);
				term();
				setState(2016);
				match(T__121);
				setState(2018); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2017);
						match(NUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2020); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 24:
				_localctx = new TermAsGeneralizeContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2022);
				match(T__169);
				setState(2023);
				term();
				setState(2024);
				match(T__137);
				setState(2025);
				ident();
				}
				break;
			case 25:
				_localctx = new TermAtAsGeneralizeContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2027);
				match(T__169);
				setState(2028);
				term();
				setState(2029);
				match(T__121);
				setState(2031); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2030);
					match(NUM);
					}
					}
					setState(2033); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==NUM );
				setState(2035);
				match(T__137);
				setState(2036);
				ident();
				setState(2050);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,195,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2037);
						match(T__111);
						setState(2038);
						term();
						setState(2039);
						match(T__121);
						setState(2041); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(2040);
							match(NUM);
							}
							}
							setState(2043); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==NUM );
						setState(2045);
						match(T__137);
						setState(2046);
						ident();
						}
						} 
					}
					setState(2052);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,195,_ctx);
				}
				}
				break;
			case 26:
				_localctx = new GeneralizeDependentContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2053);
				match(T__169);
				setState(2054);
				match(T__76);
				setState(2055);
				term();
				}
				break;
			case 27:
				_localctx = new EvarContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2056);
				match(T__170);
				setState(2057);
				match(T__27);
				setState(2058);
				ident();
				setState(2059);
				match(COLON);
				setState(2060);
				term();
				setState(2061);
				match(T__28);
				}
				break;
			case 28:
				_localctx = new IdentInstantiateContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2063);
				match(T__171);
				setState(2064);
				match(T__27);
				setState(2065);
				match(IDENT);
				setState(2066);
				match(T__15);
				setState(2067);
				term();
				setState(2068);
				match(T__28);
				}
				break;
			case 29:
				_localctx = new NumInstantiateContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2070);
				match(T__171);
				setState(2071);
				match(T__27);
				setState(2072);
				match(NUM);
				setState(2073);
				match(T__15);
				setState(2074);
				term();
				setState(2075);
				match(T__28);
				}
				break;
			case 30:
				_localctx = new NumInInstantiateContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2077);
				match(T__171);
				setState(2078);
				match(T__27);
				setState(2079);
				match(NUM);
				setState(2080);
				match(T__15);
				setState(2081);
				term();
				setState(2082);
				match(T__28);
				setState(2083);
				match(T__82);
				setState(2084);
				ident();
				}
				break;
			case 31:
				_localctx = new ValueInstantiateContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2086);
				match(T__171);
				setState(2087);
				match(T__27);
				setState(2088);
				match(NUM);
				setState(2089);
				match(T__15);
				setState(2090);
				term();
				setState(2091);
				match(T__28);
				setState(2092);
				match(T__82);
				setState(2093);
				match(T__27);
				setState(2094);
				match(T__172);
				setState(2095);
				match(T__173);
				setState(2096);
				ident();
				setState(2097);
				match(T__28);
				}
				break;
			case 32:
				_localctx = new TypeInstantiateContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2099);
				match(T__171);
				setState(2100);
				match(T__27);
				setState(2101);
				match(NUM);
				setState(2102);
				match(T__15);
				setState(2103);
				term();
				setState(2104);
				match(T__28);
				setState(2105);
				match(T__82);
				setState(2106);
				match(T__27);
				setState(2107);
				match(T__16);
				setState(2108);
				match(T__173);
				setState(2109);
				ident();
				setState(2110);
				match(T__28);
				}
				break;
			case 33:
				_localctx = new InstantiateContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2112);
				match(T__171);
				}
				break;
			case 34:
				_localctx = new AdmitContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2113);
				match(T__174);
				}
				break;
			case 35:
				_localctx = new Give_upContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2114);
				match(T__175);
				}
				break;
			case 36:
				_localctx = new AbsurdContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2115);
				match(T__176);
				setState(2116);
				term();
				}
				break;
			case 37:
				_localctx = new ContradictionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2117);
				match(T__177);
				setState(2119);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
				case 1:
					{
					setState(2118);
					ident();
					}
					break;
				}
				}
				break;
			case 38:
				_localctx = new ContradictContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2121);
				match(T__178);
				setState(2122);
				ident();
				}
				break;
			case 39:
				_localctx = new ExfalsoContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2123);
				match(T__179);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Managing_local_contextContext extends ParserRuleContext {
		public Managing_local_contextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_managing_local_context; }
	 
		public Managing_local_contextContext() { }
		public void copyFrom(Managing_local_contextContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AtTopIntroContext extends Managing_local_contextContext {
		public AtTopIntroContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtTopIntro(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtTopIntro(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtTopIntro(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermPoseContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermPoseContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermPose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermPose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermPose(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentIntroContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public IdentIntroContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentIntro(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentIntro(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentIntro(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BeforeMoveContext extends Managing_local_contextContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public BeforeMoveContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBeforeMove(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBeforeMove(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBeforeMove(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsRememberContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public AsRememberContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsRemember(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsRemember(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsRemember(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntroContext extends Managing_local_contextContext {
		public IntroContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntro(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntro(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntro(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DependentRevertContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public DependentRevertContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDependentRevert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDependentRevert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDependentRevert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentDefInESetContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<BinderContext> binder() {
			return getRuleContexts(BinderContext.class);
		}
		public BinderContext binder(int i) {
			return getRuleContext(BinderContext.class,i);
		}
		public Goal_occurrencesContext goal_occurrences() {
			return getRuleContext(Goal_occurrencesContext.class,0);
		}
		public IdentDefInESetContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentDefInESet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentDefInESet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentDefInESet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DependentClearContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public DependentClearContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDependentClear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDependentClear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDependentClear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentInSetContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Goal_occurrencesContext goal_occurrences() {
			return getRuleContext(Goal_occurrencesContext.class,0);
		}
		public IdentInSetContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentInSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentInSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentInSet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SumDecomposeContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public SumDecomposeContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSumDecompose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSumDecompose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSumDecompose(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ClearbodyContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public ClearbodyContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterClearbody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitClearbody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitClearbody(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UntilIdentIntrosContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public UntilIdentIntrosContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUntilIdentIntros(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUntilIdentIntros(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUntilIdentIntros(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BottomMoveContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public BottomMoveContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBottomMove(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBottomMove(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBottomMove(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsEqnERememberContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public AsEqnERememberContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsEqnERemember(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsEqnERemember(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsEqnERemember(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AfterIdentIntroContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public AfterIdentIntroContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAfterIdentIntro(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAfterIdentIntro(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAfterIdentIntro(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentDefEPoseContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentDefEPoseContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentDefEPose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentDefEPose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentDefEPose(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentsIntrosContext extends Managing_local_contextContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public IdentsIntrosContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentsIntros(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentsIntros(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentsIntros(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsInRememberContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Goal_occurrencesContext goal_occurrences() {
			return getRuleContext(Goal_occurrencesContext.class,0);
		}
		public AsInRememberContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsInRemember(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsInRemember(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsInRemember(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsInERememberContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Goal_occurrencesContext goal_occurrences() {
			return getRuleContext(Goal_occurrencesContext.class,0);
		}
		public AsInERememberContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsInERemember(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsInERemember(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsInERemember(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentSetContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentSetContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentSet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentsClearContext extends Managing_local_contextContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public IdentsClearContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentsClear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentsClear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentsClear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentBinderDefPoseContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<BinderContext> binder() {
			return getRuleContexts(BinderContext.class);
		}
		public BinderContext binder(int i) {
			return getRuleContext(BinderContext.class,i);
		}
		public IdentBinderDefPoseContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentBinderDefPose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentBinderDefPose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentBinderDefPose(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RecordDecomposeContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public RecordDecomposeContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRecordDecompose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRecordDecompose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRecordDecompose(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BeforeIdentIntroContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public BeforeIdentIntroContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBeforeIdentIntro(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBeforeIdentIntro(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBeforeIdentIntro(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QualidsDecomposeContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public QualidsDecomposeContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQualidsDecompose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQualidsDecompose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQualidsDecompose(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentDefPoseContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentDefPoseContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentDefPose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentDefPose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentDefPose(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtBottomIntroContext extends Managing_local_contextContext {
		public AtBottomIntroContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtBottomIntro(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtBottomIntro(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtBottomIntro(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentAfterIdentIntroContext extends Managing_local_contextContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public IdentAfterIdentIntroContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentAfterIdentIntro(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentAfterIdentIntro(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentAfterIdentIntro(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentBinderDefEPoseContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<BinderContext> binder() {
			return getRuleContexts(BinderContext.class);
		}
		public BinderContext binder(int i) {
			return getRuleContext(BinderContext.class,i);
		}
		public IdentBinderDefEPoseContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentBinderDefEPose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentBinderDefEPose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentBinderDefEPose(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TopMoveContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TopMoveContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTopMove(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTopMove(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTopMove(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsERememberContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public AsERememberContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsERemember(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsERemember(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsERemember(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentDefInSetContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<BinderContext> binder() {
			return getRuleContexts(BinderContext.class);
		}
		public BinderContext binder(int i) {
			return getRuleContext(BinderContext.class,i);
		}
		public Goal_occurrencesContext goal_occurrences() {
			return getRuleContext(Goal_occurrencesContext.class,0);
		}
		public IdentDefInSetContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentDefInSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentDefInSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentDefInSet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermEPoseContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermEPoseContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermEPose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermEPose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermEPose(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermInESetContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Goal_occurrencesContext goal_occurrences() {
			return getRuleContext(Goal_occurrencesContext.class,0);
		}
		public TermInESetContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermInESet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermInESet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermInESet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermInSetContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Goal_occurrencesContext goal_occurrences() {
			return getRuleContext(Goal_occurrencesContext.class,0);
		}
		public TermInSetContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermInSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermInSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermInSet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ClearContext extends Managing_local_contextContext {
		public ClearContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterClear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitClear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitClear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentBeforeIdentIntroContext extends Managing_local_contextContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public IdentBeforeIdentIntroContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentBeforeIdentIntro(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentBeforeIdentIntro(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentBeforeIdentIntro(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentIntrosContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public IdentIntrosContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentIntros(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentIntros(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentIntros(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AfterMoveContext extends Managing_local_contextContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public AfterMoveContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAfterMove(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAfterMove(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAfterMove(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermSetContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermSetContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermSet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentDefSetContext extends Managing_local_contextContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<BinderContext> binder() {
			return getRuleContexts(BinderContext.class);
		}
		public BinderContext binder(int i) {
			return getRuleContext(BinderContext.class,i);
		}
		public IdentDefSetContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentDefSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentDefSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentDefSet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RenameContext extends Managing_local_contextContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public RenameContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRename(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntrosContext extends Managing_local_contextContext {
		public IntrosContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntros(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntros(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntros(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntroPatternListIntrosContext extends Managing_local_contextContext {
		public Intro_pattern_listContext intro_pattern_list() {
			return getRuleContext(Intro_pattern_listContext.class,0);
		}
		public IntroPatternListIntrosContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntroPatternListIntros(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntroPatternListIntros(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntroPatternListIntros(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NegativIdentsClearContext extends Managing_local_contextContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public NegativIdentsClearContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNegativIdentsClear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNegativIdentsClear(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNegativIdentsClear(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentsRevertContext extends Managing_local_contextContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public IdentsRevertContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentsRevert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentsRevert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentsRevert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsEqnRememberContext extends Managing_local_contextContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public AsEqnRememberContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsEqnRemember(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsEqnRemember(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsEqnRemember(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UntilNumIntrosContext extends Managing_local_contextContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public UntilNumIntrosContext(Managing_local_contextContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUntilNumIntros(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUntilNumIntros(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUntilNumIntros(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Managing_local_contextContext managing_local_context() throws RecognitionException {
		Managing_local_contextContext _localctx = new Managing_local_contextContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_managing_local_context);
		int _la;
		try {
			int _alt;
			setState(2401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				_localctx = new IntroContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2126);
				match(T__180);
				}
				break;
			case 2:
				_localctx = new IntrosContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2127);
				match(T__181);
				}
				break;
			case 3:
				_localctx = new IdentIntrosContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2128);
				match(T__181);
				setState(2129);
				match(T__182);
				setState(2130);
				ident();
				}
				break;
			case 4:
				_localctx = new IdentsIntrosContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2131);
				match(T__181);
				setState(2133); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2132);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2135); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 5:
				_localctx = new UntilIdentIntrosContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2137);
				match(T__181);
				setState(2138);
				match(T__183);
				setState(2139);
				ident();
				}
				break;
			case 6:
				_localctx = new UntilNumIntrosContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2140);
				match(T__181);
				setState(2141);
				match(T__183);
				setState(2142);
				match(NUM);
				}
				break;
			case 7:
				_localctx = new AfterIdentIntroContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2143);
				match(T__180);
				setState(2144);
				match(T__184);
				setState(2145);
				ident();
				}
				break;
			case 8:
				_localctx = new BeforeIdentIntroContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2146);
				match(T__180);
				setState(2147);
				match(T__185);
				setState(2148);
				ident();
				}
				break;
			case 9:
				_localctx = new AtTopIntroContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2149);
				match(T__180);
				setState(2150);
				match(T__121);
				setState(2151);
				match(T__186);
				}
				break;
			case 10:
				_localctx = new AtBottomIntroContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2152);
				match(T__180);
				setState(2153);
				match(T__121);
				setState(2154);
				match(T__187);
				}
				break;
			case 11:
				_localctx = new IdentAfterIdentIntroContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2155);
				match(T__180);
				setState(2156);
				ident();
				setState(2157);
				match(T__184);
				setState(2158);
				ident();
				}
				break;
			case 12:
				_localctx = new IdentBeforeIdentIntroContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2160);
				match(T__180);
				setState(2161);
				ident();
				setState(2162);
				match(T__185);
				setState(2163);
				ident();
				}
				break;
			case 13:
				_localctx = new IdentIntroContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2165);
				match(T__180);
				setState(2166);
				ident();
				}
				break;
			case 14:
				_localctx = new IntroPatternListIntrosContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2167);
				match(T__181);
				setState(2168);
				intro_pattern_list();
				}
				break;
			case 15:
				_localctx = new IdentsClearContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2169);
				match(T__188);
				setState(2171); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2170);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2173); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,199,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 16:
				_localctx = new ClearbodyContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2175);
				match(T__189);
				setState(2176);
				ident();
				}
				break;
			case 17:
				_localctx = new NegativIdentsClearContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2177);
				match(T__188);
				setState(2178);
				match(SUB);
				setState(2180); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2179);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2182); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,200,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 18:
				_localctx = new ClearContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2184);
				match(T__188);
				}
				break;
			case 19:
				_localctx = new DependentClearContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2185);
				match(T__188);
				setState(2186);
				match(T__76);
				setState(2187);
				ident();
				}
				break;
			case 20:
				_localctx = new IdentsRevertContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2188);
				match(T__190);
				setState(2190); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2189);
						ident();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2192); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 21:
				_localctx = new DependentRevertContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2194);
				match(T__190);
				setState(2195);
				match(T__76);
				setState(2196);
				match(T__182);
				setState(2197);
				ident();
				}
				break;
			case 22:
				_localctx = new AfterMoveContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2198);
				match(T__191);
				setState(2199);
				ident();
				setState(2200);
				match(T__184);
				setState(2201);
				ident();
				}
				break;
			case 23:
				_localctx = new BeforeMoveContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2203);
				match(T__191);
				setState(2204);
				ident();
				setState(2205);
				match(T__185);
				setState(2206);
				ident();
				}
				break;
			case 24:
				_localctx = new TopMoveContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2208);
				match(T__191);
				setState(2209);
				ident();
				setState(2210);
				match(T__121);
				setState(2211);
				match(T__186);
				}
				break;
			case 25:
				_localctx = new BottomMoveContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2213);
				match(T__191);
				setState(2214);
				ident();
				setState(2215);
				match(T__121);
				setState(2216);
				match(T__187);
				}
				break;
			case 26:
				_localctx = new RenameContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2218);
				match(T__192);
				setState(2219);
				ident();
				setState(2220);
				match(T__193);
				setState(2221);
				ident();
				setState(2229);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,202,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2222);
						match(T__111);
						setState(2223);
						ident();
						setState(2224);
						match(T__193);
						setState(2225);
						ident();
						}
						} 
					}
					setState(2231);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,202,_ctx);
				}
				}
				break;
			case 27:
				_localctx = new IdentSetContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2232);
				match(T__194);
				setState(2233);
				match(T__27);
				setState(2234);
				ident();
				setState(2235);
				match(T__15);
				setState(2236);
				term();
				setState(2237);
				match(T__28);
				}
				break;
			case 28:
				_localctx = new IdentInSetContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2239);
				match(T__194);
				setState(2240);
				match(T__27);
				setState(2241);
				ident();
				setState(2242);
				match(T__15);
				setState(2243);
				term();
				setState(2244);
				match(T__28);
				setState(2245);
				match(T__82);
				setState(2247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
				case 1:
					{
					setState(2246);
					goal_occurrences();
					}
					break;
				}
				}
				break;
			case 29:
				_localctx = new IdentDefSetContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2249);
				match(T__194);
				setState(2250);
				match(T__27);
				setState(2251);
				ident();
				setState(2253); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2252);
					binder();
					}
					}
					setState(2255); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(2257);
				match(T__15);
				setState(2258);
				term();
				setState(2259);
				match(T__28);
				}
				break;
			case 30:
				_localctx = new TermSetContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2261);
				match(T__194);
				setState(2262);
				term();
				}
				break;
			case 31:
				_localctx = new IdentDefInSetContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2263);
				match(T__194);
				setState(2264);
				match(T__27);
				setState(2265);
				ident();
				setState(2267); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2266);
					binder();
					}
					}
					setState(2269); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(2271);
				match(T__15);
				setState(2272);
				term();
				setState(2273);
				match(T__28);
				setState(2274);
				match(T__82);
				setState(2276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(2275);
					goal_occurrences();
					}
					break;
				}
				}
				break;
			case 32:
				_localctx = new IdentDefInESetContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2278);
				match(T__195);
				setState(2279);
				match(T__27);
				setState(2280);
				ident();
				setState(2282); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2281);
					binder();
					}
					}
					setState(2284); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(2286);
				match(T__15);
				setState(2287);
				term();
				setState(2288);
				match(T__28);
				setState(2289);
				match(T__82);
				setState(2291);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					setState(2290);
					goal_occurrences();
					}
					break;
				}
				}
				break;
			case 33:
				_localctx = new TermInSetContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2293);
				match(T__194);
				setState(2294);
				term();
				setState(2295);
				match(T__82);
				setState(2297);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
				case 1:
					{
					setState(2296);
					goal_occurrences();
					}
					break;
				}
				}
				break;
			case 34:
				_localctx = new TermInESetContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2299);
				match(T__195);
				setState(2300);
				term();
				setState(2301);
				match(T__82);
				setState(2303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					setState(2302);
					goal_occurrences();
					}
					break;
				}
				}
				break;
			case 35:
				_localctx = new AsRememberContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2305);
				match(T__196);
				setState(2306);
				term();
				setState(2307);
				match(T__137);
				setState(2308);
				ident();
				}
				break;
			case 36:
				_localctx = new AsERememberContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2310);
				match(T__197);
				setState(2311);
				term();
				setState(2312);
				match(T__137);
				setState(2313);
				ident();
				}
				break;
			case 37:
				_localctx = new AsEqnRememberContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2315);
				match(T__196);
				setState(2316);
				term();
				setState(2317);
				match(T__137);
				setState(2318);
				ident();
				setState(2319);
				match(T__198);
				setState(2320);
				ident();
				}
				break;
			case 38:
				_localctx = new AsEqnERememberContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2322);
				match(T__197);
				setState(2323);
				term();
				setState(2324);
				match(T__137);
				setState(2325);
				ident();
				setState(2326);
				match(T__198);
				setState(2327);
				ident();
				}
				break;
			case 39:
				_localctx = new AsInRememberContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2329);
				match(T__196);
				setState(2330);
				term();
				setState(2331);
				match(T__137);
				setState(2332);
				ident();
				setState(2333);
				match(T__82);
				setState(2334);
				goal_occurrences();
				}
				break;
			case 40:
				_localctx = new AsInERememberContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2336);
				match(T__197);
				setState(2337);
				term();
				setState(2338);
				match(T__137);
				setState(2339);
				ident();
				setState(2340);
				match(T__82);
				setState(2341);
				goal_occurrences();
				}
				break;
			case 41:
				_localctx = new IdentDefPoseContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2343);
				match(T__162);
				setState(2344);
				match(T__27);
				setState(2345);
				ident();
				setState(2346);
				match(T__15);
				setState(2347);
				term();
				setState(2348);
				match(T__28);
				}
				break;
			case 42:
				_localctx = new IdentDefEPoseContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2350);
				match(T__164);
				setState(2351);
				match(T__27);
				setState(2352);
				ident();
				setState(2353);
				match(T__15);
				setState(2354);
				term();
				setState(2355);
				match(T__28);
				}
				break;
			case 43:
				_localctx = new IdentBinderDefPoseContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2357);
				match(T__162);
				setState(2358);
				match(T__27);
				setState(2359);
				ident();
				setState(2361); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2360);
					binder();
					}
					}
					setState(2363); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(2365);
				match(T__15);
				setState(2366);
				term();
				setState(2367);
				match(T__28);
				}
				break;
			case 44:
				_localctx = new IdentBinderDefEPoseContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2369);
				match(T__164);
				setState(2370);
				match(T__27);
				setState(2371);
				ident();
				setState(2373); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2372);
					binder();
					}
					}
					setState(2375); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(2377);
				match(T__15);
				setState(2378);
				term();
				setState(2379);
				match(T__28);
				}
				break;
			case 45:
				_localctx = new TermPoseContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2381);
				match(T__162);
				setState(2382);
				term();
				}
				break;
			case 46:
				_localctx = new TermEPoseContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(2383);
				match(T__164);
				setState(2384);
				term();
				}
				break;
			case 47:
				_localctx = new QualidsDecomposeContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(2385);
				match(T__199);
				setState(2386);
				match(T__13);
				setState(2390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					{
					setState(2387);
					qualid(0);
					}
					}
					setState(2392);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2393);
				match(T__14);
				setState(2394);
				term();
				}
				break;
			case 48:
				_localctx = new SumDecomposeContext(_localctx);
				enterOuterAlt(_localctx, 48);
				{
				setState(2395);
				match(T__199);
				setState(2396);
				match(T__200);
				setState(2397);
				term();
				}
				break;
			case 49:
				_localctx = new RecordDecomposeContext(_localctx);
				enterOuterAlt(_localctx, 49);
				{
				setState(2398);
				match(T__199);
				setState(2399);
				match(T__201);
				setState(2400);
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Applying_theoremContext extends ParserRuleContext {
		public Applying_theoremContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_applying_theorem; }
	 
		public Applying_theoremContext() { }
		public void copyFrom(Applying_theoremContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ErightContext extends Applying_theoremContext {
		public ErightContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEright(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEright(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEright(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermSimpleApplyContext extends Applying_theoremContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermSimpleApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermSimpleApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermSimpleApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermSimpleApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermEApplyContext extends Applying_theoremContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermEApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermEApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermEApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermEApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SplitContext extends Applying_theoremContext {
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public SplitContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSplit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSplit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSplit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithSimpleEApplyContext extends Applying_theoremContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public TermWithSimpleEApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithSimpleEApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithSimpleEApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithSimpleEApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EexactContext extends Applying_theoremContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public EexactContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEexact(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEexact(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEexact(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EconstructorContext extends Applying_theoremContext {
		public EconstructorContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEconstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEconstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEconstructor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithInSimpleApplyContext extends Applying_theoremContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public WithInSimpleApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithInSimpleApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithInSimpleApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithInSimpleApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermInSimpleApplyContext extends Applying_theoremContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermInSimpleApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermInSimpleApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermInSimpleApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermInSimpleApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InApplyContext extends Applying_theoremContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public InApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AssumptionApplyingTheoremContext extends Applying_theoremContext {
		public AssumptionApplyingTheoremContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAssumptionApplyingTheorem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAssumptionApplyingTheorem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAssumptionApplyingTheorem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstructorContext extends Applying_theoremContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public ConstructorContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitConstructor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RefineContext extends Applying_theoremContext {
		public Atomic_termContext atomic_term() {
			return getRuleContext(Atomic_termContext.class,0);
		}
		public RefineContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRefine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRefine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRefine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithInEApplyContext extends Applying_theoremContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public WithInEApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithInEApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithInEApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithInEApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RightContext extends Applying_theoremContext {
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public RightContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRight(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRight(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithInApplyContext extends Applying_theoremContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public WithInApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithInApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithInApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithInApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BindingsExistsContext extends Applying_theoremContext {
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public BindingsExistsContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBindingsExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBindingsExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBindingsExists(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EleftContext extends Applying_theoremContext {
		public EleftContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEleft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEleft(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEleft(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithSimpleApplyContext extends Applying_theoremContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public TermWithSimpleApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithSimpleApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithSimpleApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithSimpleApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithEApplyContext extends Applying_theoremContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public TermWithEApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithEApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithEApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithEApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LApplyContext extends Applying_theoremContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public LApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LeftContext extends Applying_theoremContext {
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public LeftContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLeft(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLeft(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithApplyContext extends Applying_theoremContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binding_listContext binding_list() {
			return getRuleContext(Binding_listContext.class,0);
		}
		public WithApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermExistsContext extends Applying_theoremContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermExistsContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermExists(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExactContext extends Applying_theoremContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExactContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExact(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExact(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExact(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EexistsContext extends Applying_theoremContext {
		public EexistsContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEexists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEexists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEexists(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithInSimpleEApplyContext extends Applying_theoremContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public WithInSimpleEApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithInSimpleEApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithInSimpleEApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithInSimpleEApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EassumptionContext extends Applying_theoremContext {
		public EassumptionContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEassumption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEassumption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEassumption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermsApplyContext extends Applying_theoremContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public TermsApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermsApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermsApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermsApply(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermWithApplyContext extends Applying_theoremContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public List<Binding_listContext> binding_list() {
			return getRuleContexts(Binding_listContext.class);
		}
		public Binding_listContext binding_list(int i) {
			return getRuleContext(Binding_listContext.class,i);
		}
		public TermWithApplyContext(Applying_theoremContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermWithApply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermWithApply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermWithApply(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Applying_theoremContext applying_theorem() throws RecognitionException {
		Applying_theoremContext _localctx = new Applying_theoremContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_applying_theorem);
		int _la;
		try {
			int _alt;
			setState(2628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				_localctx = new ExactContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2403);
				match(T__202);
				setState(2404);
				term();
				}
				break;
			case 2:
				_localctx = new EexactContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2405);
				match(T__203);
				setState(2406);
				term();
				}
				break;
			case 3:
				_localctx = new AssumptionApplyingTheoremContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2407);
				match(T__204);
				}
				break;
			case 4:
				_localctx = new EassumptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2408);
				match(T__205);
				}
				break;
			case 5:
				_localctx = new RefineContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__141) {
					{
					setState(2409);
					match(T__141);
					}
				}

				setState(2413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__206) {
					{
					setState(2412);
					match(T__206);
					}
				}

				setState(2415);
				match(T__207);
				setState(2416);
				atomic_term();
				}
				break;
			case 6:
				_localctx = new WithApplyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2417);
				match(T__208);
				setState(2418);
				term();
				setState(2419);
				match(T__24);
				setState(2420);
				binding_list();
				}
				break;
			case 7:
				_localctx = new TermsApplyContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2422);
				match(T__208);
				setState(2423);
				term();
				setState(2428);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,217,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2424);
						match(T__111);
						setState(2425);
						term();
						}
						} 
					}
					setState(2430);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,217,_ctx);
				}
				}
				break;
			case 8:
				_localctx = new TermEApplyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2431);
				match(T__209);
				setState(2432);
				term();
				}
				break;
			case 9:
				_localctx = new TermSimpleApplyContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2433);
				match(T__141);
				setState(2434);
				match(T__208);
				setState(2435);
				term();
				}
				break;
			case 10:
				_localctx = new TermWithSimpleApplyContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2436);
				match(T__141);
				setState(2437);
				match(T__208);
				setState(2438);
				term();
				setState(2439);
				match(T__24);
				setState(2440);
				binding_list();
				setState(2449);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2441);
						match(T__111);
						setState(2442);
						term();
						setState(2445);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
						case 1:
							{
							setState(2443);
							match(T__24);
							setState(2444);
							binding_list();
							}
							break;
						}
						}
						} 
					}
					setState(2451);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
				}
				}
				break;
			case 11:
				_localctx = new TermWithSimpleEApplyContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2452);
				match(T__141);
				setState(2453);
				match(T__209);
				setState(2454);
				term();
				setState(2455);
				match(T__24);
				setState(2456);
				binding_list();
				setState(2465);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2457);
						match(T__111);
						setState(2458);
						term();
						setState(2461);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
						case 1:
							{
							setState(2459);
							match(T__24);
							setState(2460);
							binding_list();
							}
							break;
						}
						}
						} 
					}
					setState(2467);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
				}
				}
				break;
			case 12:
				_localctx = new TermWithApplyContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2468);
				match(T__208);
				setState(2469);
				term();
				setState(2472);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
				case 1:
					{
					setState(2470);
					match(T__24);
					setState(2471);
					binding_list();
					}
					break;
				}
				setState(2482);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2474);
						match(T__111);
						setState(2475);
						term();
						setState(2478);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
						case 1:
							{
							setState(2476);
							match(T__24);
							setState(2477);
							binding_list();
							}
							break;
						}
						}
						} 
					}
					setState(2484);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
				}
				}
				break;
			case 13:
				_localctx = new TermWithEApplyContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2485);
				match(T__209);
				setState(2486);
				term();
				setState(2489);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
				case 1:
					{
					setState(2487);
					match(T__24);
					setState(2488);
					binding_list();
					}
					break;
				}
				setState(2499);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2491);
						match(T__111);
						setState(2492);
						term();
						setState(2495);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
						case 1:
							{
							setState(2493);
							match(T__24);
							setState(2494);
							binding_list();
							}
							break;
						}
						}
						} 
					}
					setState(2501);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
				}
				}
				break;
			case 14:
				_localctx = new LApplyContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2502);
				match(T__210);
				setState(2503);
				term();
				}
				break;
			case 15:
				_localctx = new InApplyContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2504);
				match(T__208);
				setState(2505);
				term();
				setState(2506);
				match(T__82);
				setState(2507);
				ident();
				}
				break;
			case 16:
				_localctx = new WithInSimpleApplyContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2509);
				match(T__141);
				setState(2510);
				match(T__208);
				setState(2511);
				term();
				setState(2512);
				match(T__24);
				setState(2513);
				binding_list();
				setState(2521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(2514);
					match(T__111);
					setState(2515);
					term();
					setState(2516);
					match(T__24);
					setState(2517);
					binding_list();
					}
					}
					setState(2523);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2524);
				match(T__82);
				setState(2525);
				ident();
				setState(2528);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
				case 1:
					{
					setState(2526);
					match(T__137);
					setState(2527);
					intro_pattern(0);
					}
					break;
				}
				}
				break;
			case 17:
				_localctx = new WithInApplyContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2530);
				match(T__208);
				setState(2531);
				term();
				setState(2532);
				match(T__24);
				setState(2533);
				binding_list();
				setState(2541);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(2534);
					match(T__111);
					setState(2535);
					term();
					setState(2536);
					match(T__24);
					setState(2537);
					binding_list();
					}
					}
					setState(2543);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2544);
				match(T__82);
				setState(2545);
				ident();
				setState(2548);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					setState(2546);
					match(T__137);
					setState(2547);
					intro_pattern(0);
					}
					break;
				}
				}
				break;
			case 18:
				_localctx = new WithInEApplyContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2550);
				match(T__209);
				setState(2551);
				term();
				setState(2552);
				match(T__24);
				setState(2553);
				binding_list();
				setState(2561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(2554);
					match(T__111);
					setState(2555);
					term();
					setState(2556);
					match(T__24);
					setState(2557);
					binding_list();
					}
					}
					setState(2563);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2564);
				match(T__82);
				setState(2565);
				ident();
				setState(2568);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
				case 1:
					{
					setState(2566);
					match(T__137);
					setState(2567);
					intro_pattern(0);
					}
					break;
				}
				}
				break;
			case 19:
				_localctx = new WithInSimpleEApplyContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2570);
				match(T__141);
				setState(2571);
				match(T__209);
				setState(2572);
				term();
				setState(2573);
				match(T__24);
				setState(2574);
				binding_list();
				setState(2582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(2575);
					match(T__111);
					setState(2576);
					term();
					setState(2577);
					match(T__24);
					setState(2578);
					binding_list();
					}
					}
					setState(2584);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2585);
				match(T__82);
				setState(2586);
				ident();
				setState(2589);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
				case 1:
					{
					setState(2587);
					match(T__137);
					setState(2588);
					intro_pattern(0);
					}
					break;
				}
				}
				break;
			case 20:
				_localctx = new TermInSimpleApplyContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2591);
				match(T__141);
				setState(2592);
				match(T__208);
				setState(2593);
				term();
				setState(2594);
				match(T__82);
				setState(2595);
				ident();
				}
				break;
			case 21:
				_localctx = new ConstructorContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2597);
				match(T__211);
				setState(2603);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
				case 1:
					{
					setState(2598);
					match(NUM);
					setState(2601);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
					case 1:
						{
						setState(2599);
						match(T__24);
						setState(2600);
						binding_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 22:
				_localctx = new SplitContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2605);
				match(T__212);
				setState(2608);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
				case 1:
					{
					setState(2606);
					match(T__24);
					setState(2607);
					binding_list();
					}
					break;
				}
				}
				break;
			case 23:
				_localctx = new TermExistsContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2610);
				match(T__213);
				setState(2611);
				term();
				}
				break;
			case 24:
				_localctx = new BindingsExistsContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2612);
				match(T__213);
				setState(2613);
				binding_list();
				}
				break;
			case 25:
				_localctx = new LeftContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2614);
				match(T__214);
				setState(2617);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					setState(2615);
					match(T__24);
					setState(2616);
					binding_list();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new RightContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2619);
				match(T__215);
				setState(2622);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
				case 1:
					{
					setState(2620);
					match(T__24);
					setState(2621);
					binding_list();
					}
					break;
				}
				}
				break;
			case 27:
				_localctx = new EconstructorContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2624);
				match(T__216);
				}
				break;
			case 28:
				_localctx = new EexistsContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2625);
				match(T__217);
				}
				break;
			case 29:
				_localctx = new EleftContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2626);
				match(T__218);
				}
				break;
			case 30:
				_localctx = new ErightContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2627);
				match(T__219);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goal_occurrencesContext extends ParserRuleContext {
		public Goal_occurrencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goal_occurrences; }
	 
		public Goal_occurrencesContext() { }
		public void copyFrom(Goal_occurrencesContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StarContext extends Goal_occurrencesContext {
		public StarContext(Goal_occurrencesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStar(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdGoalOccurenceContext extends Goal_occurrencesContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public At_occurencesContext at_occurences() {
			return getRuleContext(At_occurencesContext.class,0);
		}
		public List<First_goal_occurences_bodyContext> first_goal_occurences_body() {
			return getRuleContexts(First_goal_occurences_bodyContext.class);
		}
		public First_goal_occurences_bodyContext first_goal_occurences_body(int i) {
			return getRuleContext(First_goal_occurences_bodyContext.class,i);
		}
		public Second_goal_occurences_bodyContext second_goal_occurences_body() {
			return getRuleContext(Second_goal_occurences_bodyContext.class,0);
		}
		public StdGoalOccurenceContext(Goal_occurrencesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdGoalOccurence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdGoalOccurence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdGoalOccurence(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StarDerivedGoalOccurenceContext extends Goal_occurrencesContext {
		public At_occurencesContext at_occurences() {
			return getRuleContext(At_occurencesContext.class,0);
		}
		public StarDerivedGoalOccurenceContext(Goal_occurrencesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStarDerivedGoalOccurence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStarDerivedGoalOccurence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStarDerivedGoalOccurence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goal_occurrencesContext goal_occurrences() throws RecognitionException {
		Goal_occurrencesContext _localctx = new Goal_occurrencesContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_goal_occurrences);
		try {
			int _alt;
			setState(2652);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				_localctx = new StdGoalOccurenceContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2630);
				ident();
				setState(2632);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					setState(2631);
					at_occurences();
					}
					break;
				}
				setState(2637);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,243,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2634);
						first_goal_occurences_body();
						}
						} 
					}
					setState(2639);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,243,_ctx);
				}
				setState(2641);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(2640);
					second_goal_occurences_body();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new StarDerivedGoalOccurenceContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2643);
				match(MUL);
				setState(2644);
				match(T__220);
				setState(2649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(2645);
					match(MUL);
					setState(2647);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
					case 1:
						{
						setState(2646);
						at_occurences();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new StarContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2651);
				match(MUL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_occurencesContext extends ParserRuleContext {
		public OccurencesContext occurences() {
			return getRuleContext(OccurencesContext.class,0);
		}
		public At_occurencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_occurences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAt_occurences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAt_occurences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAt_occurences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final At_occurencesContext at_occurences() throws RecognitionException {
		At_occurencesContext _localctx = new At_occurencesContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_at_occurences);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2654);
			match(T__121);
			setState(2655);
			occurences();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OccurencesContext extends ParserRuleContext {
		public TerminalNode SUB() { return getToken(coqParser.SUB, 0); }
		public List<TerminalNode> NUM() { return getTokens(coqParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(coqParser.NUM, i);
		}
		public OccurencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_occurences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterOccurences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitOccurences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitOccurences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OccurencesContext occurences() throws RecognitionException {
		OccurencesContext _localctx = new OccurencesContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_occurences);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUB) {
				{
				setState(2657);
				match(SUB);
				}
			}

			setState(2661); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2660);
					match(NUM);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2663); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,249,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_goal_occurences_bodyContext extends ParserRuleContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public At_occurencesContext at_occurences() {
			return getRuleContext(At_occurencesContext.class,0);
		}
		public First_goal_occurences_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_goal_occurences_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFirst_goal_occurences_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFirst_goal_occurences_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFirst_goal_occurences_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_goal_occurences_bodyContext first_goal_occurences_body() throws RecognitionException {
		First_goal_occurences_bodyContext _localctx = new First_goal_occurences_bodyContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_first_goal_occurences_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2665);
			match(T__111);
			setState(2666);
			ident();
			setState(2668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				{
				setState(2667);
				at_occurences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Second_goal_occurences_bodyContext extends ParserRuleContext {
		public Second_goal_occurences_body_bodyContext second_goal_occurences_body_body() {
			return getRuleContext(Second_goal_occurences_body_bodyContext.class,0);
		}
		public Second_goal_occurences_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_second_goal_occurences_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSecond_goal_occurences_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSecond_goal_occurences_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSecond_goal_occurences_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Second_goal_occurences_bodyContext second_goal_occurences_body() throws RecognitionException {
		Second_goal_occurences_bodyContext _localctx = new Second_goal_occurences_bodyContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_second_goal_occurences_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2670);
			match(T__220);
			setState(2672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				{
				setState(2671);
				second_goal_occurences_body_body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Second_goal_occurences_body_bodyContext extends ParserRuleContext {
		public At_occurencesContext at_occurences() {
			return getRuleContext(At_occurencesContext.class,0);
		}
		public Second_goal_occurences_body_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_second_goal_occurences_body_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSecond_goal_occurences_body_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSecond_goal_occurences_body_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSecond_goal_occurences_body_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Second_goal_occurences_body_bodyContext second_goal_occurences_body_body() throws RecognitionException {
		Second_goal_occurences_body_bodyContext _localctx = new Second_goal_occurences_body_bodyContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_second_goal_occurences_body_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2674);
			match(MUL);
			setState(2676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(2675);
				at_occurences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Intro_patternContext extends ParserRuleContext {
		public Intro_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intro_pattern; }
	 
		public Intro_patternContext() { }
		public void copyFrom(Intro_patternContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class NamingIntroPatternContext extends Intro_patternContext {
		public Naming_intro_patternContext naming_intro_pattern() {
			return getRuleContext(Naming_intro_patternContext.class,0);
		}
		public NamingIntroPatternContext(Intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNamingIntroPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNamingIntroPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNamingIntroPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PercIntroPatternContext extends Intro_patternContext {
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public List<Atomic_termContext> atomic_term() {
			return getRuleContexts(Atomic_termContext.class);
		}
		public Atomic_termContext atomic_term(int i) {
			return getRuleContext(Atomic_termContext.class,i);
		}
		public PercIntroPatternContext(Intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPercIntroPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPercIntroPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPercIntroPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ActionIntroPatternContext extends Intro_patternContext {
		public Action_intro_patternContext action_intro_pattern() {
			return getRuleContext(Action_intro_patternContext.class,0);
		}
		public ActionIntroPatternContext(Intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterActionIntroPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitActionIntroPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitActionIntroPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnderscoreIntroPatternContext extends Intro_patternContext {
		public UnderscoreIntroPatternContext(Intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnderscoreIntroPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnderscoreIntroPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnderscoreIntroPattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Intro_patternContext intro_pattern() throws RecognitionException {
		return intro_pattern(0);
	}

	private Intro_patternContext intro_pattern(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Intro_patternContext _localctx = new Intro_patternContext(_ctx, _parentState);
		Intro_patternContext _prevctx = _localctx;
		int _startState = 76;
		enterRecursionRule(_localctx, 76, RULE_intro_pattern, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2682);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__71:
			case T__72:
			case T__73:
			case T__76:
			case T__79:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__108:
			case T__132:
			case T__133:
			case T__138:
			case T__142:
			case T__148:
			case T__156:
			case T__176:
			case T__178:
			case T__179:
			case T__186:
			case T__187:
			case T__200:
			case T__214:
			case T__215:
			case T__223:
			case T__253:
			case T__254:
			case T__264:
			case T__269:
			case T__310:
			case T__311:
			case KeySOME:
			case IDENT:
				{
				_localctx = new NamingIntroPatternContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(2679);
				naming_intro_pattern();
				}
				break;
			case T__13:
			case T__27:
			case IMPLIES:
				{
				_localctx = new ActionIntroPatternContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2680);
				action_intro_pattern();
				}
				break;
			case T__221:
				{
				_localctx = new UnderscoreIntroPatternContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2681);
				match(T__221);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(2693);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PercIntroPatternContext(new Intro_patternContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_intro_pattern);
					setState(2684);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2685);
					match(T__123);
					setState(2687); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2686);
							atomic_term();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2689); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					} 
				}
				setState(2695);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Action_intro_patternContext extends ParserRuleContext {
		public Action_intro_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action_intro_pattern; }
	 
		public Action_intro_patternContext() { }
		public void copyFrom(Action_intro_patternContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class EqualActionIntroPatternContext extends Action_intro_patternContext {
		public Equal_intro_patternContext equal_intro_pattern() {
			return getRuleContext(Equal_intro_patternContext.class,0);
		}
		public EqualActionIntroPatternContext(Action_intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEqualActionIntroPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEqualActionIntroPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEqualActionIntroPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DisjConjActionIntroPatternContext extends Action_intro_patternContext {
		public Disj_conj_intro_patternContext disj_conj_intro_pattern() {
			return getRuleContext(Disj_conj_intro_patternContext.class,0);
		}
		public DisjConjActionIntroPatternContext(Action_intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDisjConjActionIntroPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDisjConjActionIntroPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDisjConjActionIntroPattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Action_intro_patternContext action_intro_pattern() throws RecognitionException {
		Action_intro_patternContext _localctx = new Action_intro_patternContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_action_intro_pattern);
		try {
			setState(2698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				_localctx = new DisjConjActionIntroPatternContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2696);
				disj_conj_intro_pattern();
				}
				break;
			case 2:
				_localctx = new EqualActionIntroPatternContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2697);
				equal_intro_pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disj_conj_intro_patternContext extends ParserRuleContext {
		public Disj_conj_intro_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disj_conj_intro_pattern; }
	 
		public Disj_conj_intro_patternContext() { }
		public void copyFrom(Disj_conj_intro_patternContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AndIntroPatternDisjConjIntroPatternContext extends Disj_conj_intro_patternContext {
		public List<Intro_patternContext> intro_pattern() {
			return getRuleContexts(Intro_patternContext.class);
		}
		public Intro_patternContext intro_pattern(int i) {
			return getRuleContext(Intro_patternContext.class,i);
		}
		public AndIntroPatternDisjConjIntroPatternContext(Disj_conj_intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAndIntroPatternDisjConjIntroPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAndIntroPatternDisjConjIntroPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAndIntroPatternDisjConjIntroPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntroPatternListsDisjConjIntroPatternContext extends Disj_conj_intro_patternContext {
		public List<Intro_pattern_listContext> intro_pattern_list() {
			return getRuleContexts(Intro_pattern_listContext.class);
		}
		public Intro_pattern_listContext intro_pattern_list(int i) {
			return getRuleContext(Intro_pattern_listContext.class,i);
		}
		public IntroPatternListsDisjConjIntroPatternContext(Disj_conj_intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntroPatternListsDisjConjIntroPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntroPatternListsDisjConjIntroPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntroPatternListsDisjConjIntroPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntroPatternsDisjConjIntroPatternContext extends Disj_conj_intro_patternContext {
		public List<Intro_patternContext> intro_pattern() {
			return getRuleContexts(Intro_patternContext.class);
		}
		public Intro_patternContext intro_pattern(int i) {
			return getRuleContext(Intro_patternContext.class,i);
		}
		public IntroPatternsDisjConjIntroPatternContext(Disj_conj_intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntroPatternsDisjConjIntroPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntroPatternsDisjConjIntroPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntroPatternsDisjConjIntroPattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Disj_conj_intro_patternContext disj_conj_intro_pattern() throws RecognitionException {
		Disj_conj_intro_patternContext _localctx = new Disj_conj_intro_patternContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_disj_conj_intro_pattern);
		int _la;
		try {
			setState(2736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				_localctx = new IntroPatternListsDisjConjIntroPatternContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2700);
				match(T__13);
				setState(2702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__13 || _la==T__27 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)) | (1L << (T__133 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (MUL - 311)) | (1L << (IMPLIES - 311)) | (1L << (KeySOME - 311)) | (1L << (KeySTARSTAR - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					setState(2701);
					intro_pattern_list();
					}
				}

				setState(2710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__42) {
					{
					{
					setState(2704);
					match(T__42);
					setState(2706);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==T__13 || _la==T__27 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)) | (1L << (T__133 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (MUL - 311)) | (1L << (IMPLIES - 311)) | (1L << (KeySOME - 311)) | (1L << (KeySTARSTAR - 311)) | (1L << (IDENT - 311)))) != 0)) {
						{
						setState(2705);
						intro_pattern_list();
						}
					}

					}
					}
					setState(2712);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2713);
				match(T__14);
				}
				break;
			case 2:
				_localctx = new IntroPatternsDisjConjIntroPatternContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2714);
				match(T__27);
				setState(2715);
				intro_pattern(0);
				setState(2720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(2716);
					match(T__111);
					setState(2717);
					intro_pattern(0);
					}
					}
					setState(2722);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2723);
				match(T__28);
				}
				break;
			case 3:
				_localctx = new AndIntroPatternDisjConjIntroPatternContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2725);
				match(T__27);
				setState(2726);
				intro_pattern(0);
				setState(2731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__222) {
					{
					{
					setState(2727);
					match(T__222);
					setState(2728);
					intro_pattern(0);
					}
					}
					setState(2733);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2734);
				match(T__28);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equal_intro_patternContext extends ParserRuleContext {
		public Equal_intro_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equal_intro_pattern; }
	 
		public Equal_intro_patternContext() { }
		public void copyFrom(Equal_intro_patternContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class OrContext extends Equal_intro_patternContext {
		public OrContext(Equal_intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterOr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitOr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitOr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EqContext extends Equal_intro_patternContext {
		public List<Naming_intro_patternContext> naming_intro_pattern() {
			return getRuleContexts(Naming_intro_patternContext.class);
		}
		public Naming_intro_patternContext naming_intro_pattern(int i) {
			return getRuleContext(Naming_intro_patternContext.class,i);
		}
		public EqContext(Equal_intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equal_intro_patternContext equal_intro_pattern() throws RecognitionException {
		Equal_intro_patternContext _localctx = new Equal_intro_patternContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_equal_intro_pattern);
		int _la;
		try {
			setState(2750);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__13:
				_localctx = new EqContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2738);
				match(T__13);
				setState(2739);
				match(EQUAL);
				setState(2741); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2740);
					naming_intro_pattern();
					}
					}
					setState(2743); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)) | (1L << (T__133 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(2745);
				match(T__14);
				}
				break;
			case IMPLIES:
				_localctx = new OrContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2747);
				match(IMPLIES);
				setState(2748);
				match(T__223);
				setState(2749);
				match(T__78);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Naming_intro_patternContext extends ParserRuleContext {
		public Naming_intro_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naming_intro_pattern; }
	 
		public Naming_intro_patternContext() { }
		public void copyFrom(Naming_intro_patternContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QuestionIdentNamingContext extends Naming_intro_patternContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public QuestionIdentNamingContext(Naming_intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQuestionIdentNaming(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQuestionIdentNaming(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQuestionIdentNaming(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QuestionNamingContext extends Naming_intro_patternContext {
		public QuestionNamingContext(Naming_intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQuestionNaming(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQuestionNaming(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQuestionNaming(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentNamingContext extends Naming_intro_patternContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public IdentNamingContext(Naming_intro_patternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentNaming(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentNaming(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentNaming(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Naming_intro_patternContext naming_intro_pattern() throws RecognitionException {
		Naming_intro_patternContext _localctx = new Naming_intro_patternContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_naming_intro_pattern);
		try {
			setState(2756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				_localctx = new IdentNamingContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2752);
				ident();
				}
				break;
			case 2:
				_localctx = new QuestionIdentNamingContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2753);
				match(T__133);
				setState(2754);
				ident();
				}
				break;
			case 3:
				_localctx = new QuestionNamingContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2755);
				match(T__133);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Intro_pattern_listContext extends ParserRuleContext {
		public List<Intro_pattern_list_bodyContext> intro_pattern_list_body() {
			return getRuleContexts(Intro_pattern_list_bodyContext.class);
		}
		public Intro_pattern_list_bodyContext intro_pattern_list_body(int i) {
			return getRuleContext(Intro_pattern_list_bodyContext.class,i);
		}
		public Intro_pattern_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intro_pattern_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntro_pattern_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntro_pattern_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntro_pattern_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Intro_pattern_listContext intro_pattern_list() throws RecognitionException {
		Intro_pattern_listContext _localctx = new Intro_pattern_listContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_intro_pattern_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2759); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2758);
					intro_pattern_list_body();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2761); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Intro_pattern_list_bodyContext extends ParserRuleContext {
		public Intro_patternContext intro_pattern() {
			return getRuleContext(Intro_patternContext.class,0);
		}
		public TerminalNode KeySTARSTAR() { return getToken(coqParser.KeySTARSTAR, 0); }
		public Intro_pattern_list_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intro_pattern_list_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntro_pattern_list_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntro_pattern_list_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntro_pattern_list_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Intro_pattern_list_bodyContext intro_pattern_list_body() throws RecognitionException {
		Intro_pattern_list_bodyContext _localctx = new Intro_pattern_list_bodyContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_intro_pattern_list_body);
		try {
			setState(2766);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__13:
			case T__27:
			case T__71:
			case T__72:
			case T__73:
			case T__76:
			case T__79:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__108:
			case T__132:
			case T__133:
			case T__138:
			case T__142:
			case T__148:
			case T__156:
			case T__176:
			case T__178:
			case T__179:
			case T__186:
			case T__187:
			case T__200:
			case T__214:
			case T__215:
			case T__221:
			case T__223:
			case T__253:
			case T__254:
			case T__264:
			case T__269:
			case T__310:
			case T__311:
			case IMPLIES:
			case KeySOME:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2763);
				intro_pattern(0);
				}
				break;
			case MUL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2764);
				match(MUL);
				}
				break;
			case KeySTARSTAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(2765);
				match(KeySTARSTAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlagContext extends ParserRuleContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public FlagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFlag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFlag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFlag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlagContext flag() throws RecognitionException {
		FlagContext _localctx = new FlagContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_flag);
		int _la;
		try {
			int _alt;
			setState(2784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2768);
				match(T__224);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2769);
				match(T__225);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2770);
				match(T__225);
				setState(2772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUB) {
					{
					setState(2771);
					match(SUB);
					}
				}

				setState(2775); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2774);
						qualid(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2777); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2779);
				match(T__226);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2780);
				match(T__157);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2781);
				match(T__159);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2782);
				match(T__227);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2783);
				match(T__228);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pattern2Context extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Pattern2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPattern2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPattern2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPattern2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pattern2Context pattern2() throws RecognitionException {
		Pattern2Context _localctx = new Pattern2Context(_ctx, getState());
		enterRule(_localctx, 92, RULE_pattern2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2786);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LemmaContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public LemmaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lemma; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLemma(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLemma(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLemma(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LemmaContext lemma() throws RecognitionException {
		LemmaContext _localctx = new LemmaContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_lemma);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2788);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
	 
		public ExprContext() { }
		public void copyFrom(ExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Expr2ExprContext extends ExprContext {
		public Expr2Context expr2() {
			return getRuleContext(Expr2Context.class,0);
		}
		public Expr2ExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExpr2Expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExpr2Expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExpr2Expr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LocalAppExprContext extends ExprContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public LocalAppExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLocalAppExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLocalAppExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLocalAppExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SequenceExprContext extends ExprContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public SequenceExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSequenceExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSequenceExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSequenceExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 96;
		enterRecursionRule(_localctx, 96, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2804);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__13:
				{
				_localctx = new LocalAppExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(2791);
				match(T__13);
				setState(2792);
				match(GREATER);
				setState(2793);
				expr(0);
				setState(2798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__42) {
					{
					{
					setState(2794);
					match(T__42);
					setState(2795);
					expr(0);
					}
					}
					setState(2800);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2801);
				match(T__14);
				}
				break;
			case T__27:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__79:
			case T__80:
			case T__81:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__112:
			case T__113:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__122:
			case T__124:
			case T__125:
			case T__126:
			case T__128:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__135:
			case T__136:
			case T__138:
			case T__139:
			case T__140:
			case T__141:
			case T__142:
			case T__143:
			case T__144:
			case T__145:
			case T__146:
			case T__147:
			case T__148:
			case T__151:
			case T__152:
			case T__153:
			case T__154:
			case T__155:
			case T__156:
			case T__157:
			case T__159:
			case T__160:
			case T__161:
			case T__162:
			case T__164:
			case T__165:
			case T__166:
			case T__167:
			case T__168:
			case T__169:
			case T__170:
			case T__171:
			case T__174:
			case T__175:
			case T__176:
			case T__177:
			case T__178:
			case T__179:
			case T__180:
			case T__181:
			case T__186:
			case T__187:
			case T__188:
			case T__189:
			case T__190:
			case T__191:
			case T__192:
			case T__194:
			case T__195:
			case T__196:
			case T__197:
			case T__199:
			case T__200:
			case T__202:
			case T__203:
			case T__204:
			case T__205:
			case T__206:
			case T__207:
			case T__208:
			case T__209:
			case T__210:
			case T__211:
			case T__212:
			case T__213:
			case T__214:
			case T__215:
			case T__216:
			case T__217:
			case T__218:
			case T__219:
			case T__223:
			case T__226:
			case T__230:
			case T__231:
			case T__232:
			case T__233:
			case T__234:
			case T__235:
			case T__236:
			case T__237:
			case T__238:
			case T__239:
			case T__242:
			case T__244:
			case T__247:
			case T__248:
			case T__249:
			case T__250:
			case T__251:
			case T__252:
			case T__253:
			case T__254:
			case T__255:
			case T__256:
			case T__258:
			case T__259:
			case T__260:
			case T__261:
			case T__262:
			case T__263:
			case T__264:
			case T__265:
			case T__266:
			case T__267:
			case T__269:
			case T__310:
			case T__311:
			case SUB:
			case KeySOME:
			case IDENT:
			case NUM:
				{
				_localctx = new Expr2ExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2803);
				expr2(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(2811);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SequenceExprContext(new ExprContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expr);
					setState(2806);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(2807);
					match(T__229);
					setState(2808);
					expr(3);
					}
					} 
				}
				setState(2813);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Expr2Context extends ParserRuleContext {
		public Expr2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr2; }
	 
		public Expr2Context() { }
		public void copyFrom(Expr2Context ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Tacarg3exprContext extends Expr2Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public Tacarg3exprContext(Expr2Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTacarg3expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTacarg3expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTacarg3expr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PairedSequenceLocalAppExprContext extends Expr2Context {
		public Expr2Context expr2() {
			return getRuleContext(Expr2Context.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<PairedSequenceLocalAppExprBodyContext> pairedSequenceLocalAppExprBody() {
			return getRuleContexts(PairedSequenceLocalAppExprBodyContext.class);
		}
		public PairedSequenceLocalAppExprBodyContext pairedSequenceLocalAppExprBody(int i) {
			return getRuleContext(PairedSequenceLocalAppExprBodyContext.class,i);
		}
		public PairedSequenceLocalAppExprContext(Expr2Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPairedSequenceLocalAppExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPairedSequenceLocalAppExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPairedSequenceLocalAppExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr2Context expr2() throws RecognitionException {
		return expr2(0);
	}

	private Expr2Context expr2(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Expr2Context _localctx = new Expr2Context(_ctx, _parentState);
		Expr2Context _prevctx = _localctx;
		int _startState = 98;
		enterRecursionRule(_localctx, 98, RULE_expr2, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Tacarg3exprContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(2815);
			tacexpr3();
			}
			_ctx.stop = _input.LT(-1);
			setState(2832);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,276,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PairedSequenceLocalAppExprContext(new Expr2Context(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expr2);
					setState(2817);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2818);
					match(T__229);
					setState(2819);
					match(T__13);
					setState(2821);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__27) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__122 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (T__128 - 129)) | (1L << (T__129 - 129)) | (1L << (T__130 - 129)) | (1L << (T__131 - 129)) | (1L << (T__132 - 129)) | (1L << (T__135 - 129)) | (1L << (T__136 - 129)) | (1L << (T__138 - 129)) | (1L << (T__139 - 129)) | (1L << (T__140 - 129)) | (1L << (T__141 - 129)) | (1L << (T__142 - 129)) | (1L << (T__143 - 129)) | (1L << (T__144 - 129)) | (1L << (T__145 - 129)) | (1L << (T__146 - 129)) | (1L << (T__147 - 129)) | (1L << (T__148 - 129)) | (1L << (T__151 - 129)) | (1L << (T__152 - 129)) | (1L << (T__153 - 129)) | (1L << (T__154 - 129)) | (1L << (T__155 - 129)) | (1L << (T__156 - 129)) | (1L << (T__157 - 129)) | (1L << (T__159 - 129)) | (1L << (T__160 - 129)) | (1L << (T__161 - 129)) | (1L << (T__162 - 129)) | (1L << (T__164 - 129)) | (1L << (T__165 - 129)) | (1L << (T__166 - 129)) | (1L << (T__167 - 129)) | (1L << (T__168 - 129)) | (1L << (T__169 - 129)) | (1L << (T__170 - 129)) | (1L << (T__171 - 129)) | (1L << (T__174 - 129)) | (1L << (T__175 - 129)) | (1L << (T__176 - 129)) | (1L << (T__177 - 129)) | (1L << (T__178 - 129)) | (1L << (T__179 - 129)) | (1L << (T__180 - 129)) | (1L << (T__181 - 129)) | (1L << (T__186 - 129)) | (1L << (T__187 - 129)) | (1L << (T__188 - 129)) | (1L << (T__189 - 129)) | (1L << (T__190 - 129)) | (1L << (T__191 - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (T__192 - 193)) | (1L << (T__194 - 193)) | (1L << (T__195 - 193)) | (1L << (T__196 - 193)) | (1L << (T__197 - 193)) | (1L << (T__199 - 193)) | (1L << (T__200 - 193)) | (1L << (T__202 - 193)) | (1L << (T__203 - 193)) | (1L << (T__204 - 193)) | (1L << (T__205 - 193)) | (1L << (T__206 - 193)) | (1L << (T__207 - 193)) | (1L << (T__208 - 193)) | (1L << (T__209 - 193)) | (1L << (T__210 - 193)) | (1L << (T__211 - 193)) | (1L << (T__212 - 193)) | (1L << (T__213 - 193)) | (1L << (T__214 - 193)) | (1L << (T__215 - 193)) | (1L << (T__216 - 193)) | (1L << (T__217 - 193)) | (1L << (T__218 - 193)) | (1L << (T__219 - 193)) | (1L << (T__223 - 193)) | (1L << (T__226 - 193)) | (1L << (T__230 - 193)) | (1L << (T__231 - 193)) | (1L << (T__232 - 193)) | (1L << (T__233 - 193)) | (1L << (T__234 - 193)) | (1L << (T__235 - 193)) | (1L << (T__236 - 193)) | (1L << (T__237 - 193)) | (1L << (T__238 - 193)) | (1L << (T__239 - 193)) | (1L << (T__242 - 193)) | (1L << (T__244 - 193)) | (1L << (T__247 - 193)) | (1L << (T__248 - 193)) | (1L << (T__249 - 193)) | (1L << (T__250 - 193)) | (1L << (T__251 - 193)) | (1L << (T__252 - 193)) | (1L << (T__253 - 193)) | (1L << (T__254 - 193)) | (1L << (T__255 - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (T__256 - 257)) | (1L << (T__258 - 257)) | (1L << (T__259 - 257)) | (1L << (T__260 - 257)) | (1L << (T__261 - 257)) | (1L << (T__262 - 257)) | (1L << (T__263 - 257)) | (1L << (T__264 - 257)) | (1L << (T__265 - 257)) | (1L << (T__266 - 257)) | (1L << (T__267 - 257)) | (1L << (T__269 - 257)) | (1L << (T__310 - 257)) | (1L << (T__311 - 257)) | (1L << (SUB - 257)))) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & ((1L << (KeySOME - 337)) | (1L << (IDENT - 337)) | (1L << (NUM - 337)))) != 0)) {
						{
						setState(2820);
						expr(0);
						}
					}

					setState(2826);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__42) {
						{
						{
						setState(2823);
						pairedSequenceLocalAppExprBody();
						}
						}
						setState(2828);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2829);
					match(T__14);
					}
					} 
				}
				setState(2834);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,276,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PairedSequenceLocalAppExprBodyContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PairedSequenceLocalAppExprBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pairedSequenceLocalAppExprBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPairedSequenceLocalAppExprBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPairedSequenceLocalAppExprBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPairedSequenceLocalAppExprBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PairedSequenceLocalAppExprBodyContext pairedSequenceLocalAppExprBody() throws RecognitionException {
		PairedSequenceLocalAppExprBodyContext _localctx = new PairedSequenceLocalAppExprBodyContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_pairedSequenceLocalAppExprBody);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2835);
			match(T__42);
			setState(2837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__27) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__122 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (T__128 - 129)) | (1L << (T__129 - 129)) | (1L << (T__130 - 129)) | (1L << (T__131 - 129)) | (1L << (T__132 - 129)) | (1L << (T__135 - 129)) | (1L << (T__136 - 129)) | (1L << (T__138 - 129)) | (1L << (T__139 - 129)) | (1L << (T__140 - 129)) | (1L << (T__141 - 129)) | (1L << (T__142 - 129)) | (1L << (T__143 - 129)) | (1L << (T__144 - 129)) | (1L << (T__145 - 129)) | (1L << (T__146 - 129)) | (1L << (T__147 - 129)) | (1L << (T__148 - 129)) | (1L << (T__151 - 129)) | (1L << (T__152 - 129)) | (1L << (T__153 - 129)) | (1L << (T__154 - 129)) | (1L << (T__155 - 129)) | (1L << (T__156 - 129)) | (1L << (T__157 - 129)) | (1L << (T__159 - 129)) | (1L << (T__160 - 129)) | (1L << (T__161 - 129)) | (1L << (T__162 - 129)) | (1L << (T__164 - 129)) | (1L << (T__165 - 129)) | (1L << (T__166 - 129)) | (1L << (T__167 - 129)) | (1L << (T__168 - 129)) | (1L << (T__169 - 129)) | (1L << (T__170 - 129)) | (1L << (T__171 - 129)) | (1L << (T__174 - 129)) | (1L << (T__175 - 129)) | (1L << (T__176 - 129)) | (1L << (T__177 - 129)) | (1L << (T__178 - 129)) | (1L << (T__179 - 129)) | (1L << (T__180 - 129)) | (1L << (T__181 - 129)) | (1L << (T__186 - 129)) | (1L << (T__187 - 129)) | (1L << (T__188 - 129)) | (1L << (T__189 - 129)) | (1L << (T__190 - 129)) | (1L << (T__191 - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (T__192 - 193)) | (1L << (T__194 - 193)) | (1L << (T__195 - 193)) | (1L << (T__196 - 193)) | (1L << (T__197 - 193)) | (1L << (T__199 - 193)) | (1L << (T__200 - 193)) | (1L << (T__202 - 193)) | (1L << (T__203 - 193)) | (1L << (T__204 - 193)) | (1L << (T__205 - 193)) | (1L << (T__206 - 193)) | (1L << (T__207 - 193)) | (1L << (T__208 - 193)) | (1L << (T__209 - 193)) | (1L << (T__210 - 193)) | (1L << (T__211 - 193)) | (1L << (T__212 - 193)) | (1L << (T__213 - 193)) | (1L << (T__214 - 193)) | (1L << (T__215 - 193)) | (1L << (T__216 - 193)) | (1L << (T__217 - 193)) | (1L << (T__218 - 193)) | (1L << (T__219 - 193)) | (1L << (T__223 - 193)) | (1L << (T__226 - 193)) | (1L << (T__230 - 193)) | (1L << (T__231 - 193)) | (1L << (T__232 - 193)) | (1L << (T__233 - 193)) | (1L << (T__234 - 193)) | (1L << (T__235 - 193)) | (1L << (T__236 - 193)) | (1L << (T__237 - 193)) | (1L << (T__238 - 193)) | (1L << (T__239 - 193)) | (1L << (T__242 - 193)) | (1L << (T__244 - 193)) | (1L << (T__247 - 193)) | (1L << (T__248 - 193)) | (1L << (T__249 - 193)) | (1L << (T__250 - 193)) | (1L << (T__251 - 193)) | (1L << (T__252 - 193)) | (1L << (T__253 - 193)) | (1L << (T__254 - 193)) | (1L << (T__255 - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (T__256 - 257)) | (1L << (T__258 - 257)) | (1L << (T__259 - 257)) | (1L << (T__260 - 257)) | (1L << (T__261 - 257)) | (1L << (T__262 - 257)) | (1L << (T__263 - 257)) | (1L << (T__264 - 257)) | (1L << (T__265 - 257)) | (1L << (T__266 - 257)) | (1L << (T__267 - 257)) | (1L << (T__269 - 257)) | (1L << (T__310 - 257)) | (1L << (T__311 - 257)) | (1L << (SUB - 257)))) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & ((1L << (KeySOME - 337)) | (1L << (IDENT - 337)) | (1L << (NUM - 337)))) != 0)) {
				{
				setState(2836);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tacexpr3Context extends ParserRuleContext {
		public Tacexpr3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tacexpr3; }
	 
		public Tacexpr3Context() { }
		public void copyFrom(Tacexpr3Context ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoftCutExprContext extends Tacexpr3Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public SoftCutExprContext(Tacexpr3Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSoftCutExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSoftCutExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSoftCutExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoExprContext extends Tacexpr3Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public DoExprContext(Tacexpr3Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDoExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDoExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDoExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OnlyExprContext extends Tacexpr3Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public SelectorContext selector() {
			return getRuleContext(SelectorContext.class,0);
		}
		public OnlyExprContext(Tacexpr3Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterOnlyExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitOnlyExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitOnlyExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TryExprContext extends Tacexpr3Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public TryExprContext(Tacexpr3Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTryExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimeExprContext extends Tacexpr3Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public TimeExprContext(Tacexpr3Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTimeExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTimeExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTimeExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RepeatExprContext extends Tacexpr3Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public RepeatExprContext(Tacexpr3Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRepeatExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRepeatExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRepeatExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TacExpr2ExprContext extends Tacexpr3Context {
		public Tacexpr2Context tacexpr2() {
			return getRuleContext(Tacexpr2Context.class,0);
		}
		public TacExpr2ExprContext(Tacexpr3Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTacExpr2Expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTacExpr2Expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTacExpr2Expr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ProgressExprContext extends Tacexpr3Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public ProgressExprContext(Tacexpr3Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterProgressExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitProgressExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitProgressExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExactlyOnceExprContext extends Tacexpr3Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public ExactlyOnceExprContext(Tacexpr3Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExactlyOnceExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExactlyOnceExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExactlyOnceExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimeoutExprContext extends Tacexpr3Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TimeoutExprContext(Tacexpr3Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTimeoutExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTimeoutExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTimeoutExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tacexpr3Context tacexpr3() throws RecognitionException {
		Tacexpr3Context _localctx = new Tacexpr3Context(_ctx, getState());
		enterRule(_localctx, 102, RULE_tacexpr3);
		int _la;
		try {
			setState(2873);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__230:
				_localctx = new DoExprContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2839);
				match(T__230);
				setState(2842);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NUM:
					{
					setState(2840);
					match(NUM);
					}
					break;
				case T__71:
				case T__72:
				case T__73:
				case T__76:
				case T__79:
				case T__89:
				case T__90:
				case T__91:
				case T__92:
				case T__108:
				case T__132:
				case T__138:
				case T__142:
				case T__148:
				case T__156:
				case T__176:
				case T__178:
				case T__179:
				case T__186:
				case T__187:
				case T__200:
				case T__214:
				case T__215:
				case T__223:
				case T__253:
				case T__254:
				case T__264:
				case T__269:
				case T__310:
				case T__311:
				case KeySOME:
				case IDENT:
					{
					setState(2841);
					ident();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2844);
				tacexpr3();
				}
				break;
			case T__231:
				_localctx = new ProgressExprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2845);
				match(T__231);
				setState(2846);
				tacexpr3();
				}
				break;
			case T__232:
				_localctx = new RepeatExprContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2847);
				match(T__232);
				setState(2848);
				tacexpr3();
				}
				break;
			case T__233:
				_localctx = new TryExprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2849);
				match(T__233);
				setState(2850);
				tacexpr3();
				}
				break;
			case T__234:
				_localctx = new SoftCutExprContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2851);
				match(T__234);
				setState(2852);
				tacexpr3();
				}
				break;
			case T__235:
				_localctx = new ExactlyOnceExprContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2853);
				match(T__235);
				setState(2854);
				tacexpr3();
				}
				break;
			case T__236:
				_localctx = new TimeoutExprContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2855);
				match(T__236);
				setState(2858);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NUM:
					{
					setState(2856);
					match(NUM);
					}
					break;
				case T__71:
				case T__72:
				case T__73:
				case T__76:
				case T__79:
				case T__89:
				case T__90:
				case T__91:
				case T__92:
				case T__108:
				case T__132:
				case T__138:
				case T__142:
				case T__148:
				case T__156:
				case T__176:
				case T__178:
				case T__179:
				case T__186:
				case T__187:
				case T__200:
				case T__214:
				case T__215:
				case T__223:
				case T__253:
				case T__254:
				case T__264:
				case T__269:
				case T__310:
				case T__311:
				case KeySOME:
				case IDENT:
					{
					setState(2857);
					ident();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2860);
				tacexpr3();
				}
				break;
			case T__237:
				_localctx = new TimeExprContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2861);
				match(T__237);
				setState(2863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STRING) {
					{
					setState(2862);
					match(STRING);
					}
				}

				setState(2865);
				tacexpr3();
				}
				break;
			case T__238:
				_localctx = new OnlyExprContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2866);
				match(T__238);
				setState(2868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (SUB - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)) | (1L << (NUM - 311)))) != 0)) {
					{
					setState(2867);
					selector();
					}
				}

				setState(2870);
				match(COLON);
				setState(2871);
				tacexpr3();
				}
				break;
			case T__27:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__79:
			case T__80:
			case T__81:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__112:
			case T__113:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__122:
			case T__124:
			case T__125:
			case T__126:
			case T__128:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__135:
			case T__136:
			case T__138:
			case T__139:
			case T__140:
			case T__141:
			case T__142:
			case T__143:
			case T__144:
			case T__145:
			case T__146:
			case T__147:
			case T__148:
			case T__151:
			case T__152:
			case T__153:
			case T__154:
			case T__155:
			case T__156:
			case T__157:
			case T__159:
			case T__160:
			case T__161:
			case T__162:
			case T__164:
			case T__165:
			case T__166:
			case T__167:
			case T__168:
			case T__169:
			case T__170:
			case T__171:
			case T__174:
			case T__175:
			case T__176:
			case T__177:
			case T__178:
			case T__179:
			case T__180:
			case T__181:
			case T__186:
			case T__187:
			case T__188:
			case T__189:
			case T__190:
			case T__191:
			case T__192:
			case T__194:
			case T__195:
			case T__196:
			case T__197:
			case T__199:
			case T__200:
			case T__202:
			case T__203:
			case T__204:
			case T__205:
			case T__206:
			case T__207:
			case T__208:
			case T__209:
			case T__210:
			case T__211:
			case T__212:
			case T__213:
			case T__214:
			case T__215:
			case T__216:
			case T__217:
			case T__218:
			case T__219:
			case T__223:
			case T__226:
			case T__239:
			case T__242:
			case T__244:
			case T__247:
			case T__248:
			case T__249:
			case T__250:
			case T__251:
			case T__252:
			case T__253:
			case T__254:
			case T__255:
			case T__256:
			case T__258:
			case T__259:
			case T__260:
			case T__261:
			case T__262:
			case T__263:
			case T__264:
			case T__265:
			case T__266:
			case T__267:
			case T__269:
			case T__310:
			case T__311:
			case SUB:
			case KeySOME:
			case IDENT:
			case NUM:
				_localctx = new TacExpr2ExprContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2872);
				tacexpr2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tacexpr2Context extends ParserRuleContext {
		public Tacexpr2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tacexpr2; }
	 
		public Tacexpr2Context() { }
		public void copyFrom(Tacexpr2Context ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GeneralizedBranchingExprContext extends Tacexpr2Context {
		public List<Tacexpr1Context> tacexpr1() {
			return getRuleContexts(Tacexpr1Context.class);
		}
		public Tacexpr1Context tacexpr1(int i) {
			return getRuleContext(Tacexpr1Context.class,i);
		}
		public GeneralizedBranchingExprContext(Tacexpr2Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterGeneralizedBranchingExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitGeneralizedBranchingExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitGeneralizedBranchingExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TacExpr1ExprContext extends Tacexpr2Context {
		public Tacexpr1Context tacexpr1() {
			return getRuleContext(Tacexpr1Context.class,0);
		}
		public TacExpr1ExprContext(Tacexpr2Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTacExpr1Expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTacExpr1Expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTacExpr1Expr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LeftBiasedOpsExprContext extends Tacexpr2Context {
		public Tacexpr1Context tacexpr1() {
			return getRuleContext(Tacexpr1Context.class,0);
		}
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public LeftBiasedOpsExprContext(Tacexpr2Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLeftBiasedOpsExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLeftBiasedOpsExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLeftBiasedOpsExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BackTrackingExprContext extends Tacexpr2Context {
		public Tacexpr1Context tacexpr1() {
			return getRuleContext(Tacexpr1Context.class,0);
		}
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public BackTrackingExprContext(Tacexpr2Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBackTrackingExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBackTrackingExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBackTrackingExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tacexpr2Context tacexpr2() throws RecognitionException {
		Tacexpr2Context _localctx = new Tacexpr2Context(_ctx, getState());
		enterRule(_localctx, 104, RULE_tacexpr2);
		try {
			setState(2891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				_localctx = new LeftBiasedOpsExprContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2875);
				tacexpr1();
				setState(2876);
				match(ORB);
				setState(2877);
				tacexpr3();
				}
				break;
			case 2:
				_localctx = new BackTrackingExprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2879);
				tacexpr1();
				setState(2880);
				match(ADD);
				setState(2881);
				tacexpr3();
				}
				break;
			case 3:
				_localctx = new GeneralizedBranchingExprContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2883);
				match(T__239);
				setState(2884);
				tacexpr1();
				setState(2885);
				match(T__240);
				setState(2886);
				tacexpr1();
				setState(2887);
				match(T__241);
				setState(2888);
				tacexpr1();
				}
				break;
			case 4:
				_localctx = new TacExpr1ExprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2890);
				tacexpr1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tacexpr1Context extends ParserRuleContext {
		public Tacexpr1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tacexpr1; }
	 
		public Tacexpr1Context() { }
		public void copyFrom(Tacexpr1Context ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AtomicExprContext extends Tacexpr1Context {
		public Atomic_tacticContext atomic_tactic() {
			return getRuleContext(Atomic_tacticContext.class,0);
		}
		public AtomicExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtomicExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtomicExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtomicExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TypeTermExprContext extends Tacexpr1Context {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TypeTermExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTypeTermExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTypeTermExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTypeTermExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunExprContext extends Tacexpr1Context {
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<Tacexpr1Context> tacexpr1() {
			return getRuleContexts(Tacexpr1Context.class);
		}
		public Tacexpr1Context tacexpr1(int i) {
			return getRuleContext(Tacexpr1Context.class,i);
		}
		public FunExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFunExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFunExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFunExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FailExprContext extends Tacexpr1Context {
		public List<Message_tokenContext> message_token() {
			return getRuleContexts(Message_tokenContext.class);
		}
		public Message_tokenContext message_token(int i) {
			return getRuleContext(Message_tokenContext.class,i);
		}
		public FailExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFailExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFailExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFailExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ApplicationExprContext extends Tacexpr1Context {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<TacargContext> tacarg() {
			return getRuleContexts(TacargContext.class);
		}
		public TacargContext tacarg(int i) {
			return getRuleContext(TacargContext.class,i);
		}
		public ApplicationExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterApplicationExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitApplicationExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitApplicationExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AssertFailsExprContext extends Tacexpr1Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public AssertFailsExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAssertFailsExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAssertFailsExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAssertFailsExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomExprContext extends Tacexpr1Context {
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public AtomExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtomExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtomExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtomExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MatchMatchExprContext extends Tacexpr1Context {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<Match_ruleContext> match_rule() {
			return getRuleContexts(Match_ruleContext.class);
		}
		public Match_ruleContext match_rule(int i) {
			return getRuleContext(Match_ruleContext.class,i);
		}
		public MatchMatchExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMatchMatchExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMatchMatchExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMatchMatchExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LetExprContext extends Tacexpr1Context {
		public List<Let_clauseContext> let_clause() {
			return getRuleContexts(Let_clauseContext.class);
		}
		public Let_clauseContext let_clause(int i) {
			return getRuleContext(Let_clauseContext.class,i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode KeyREC() { return getToken(coqParser.KeyREC, 0); }
		public LetExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLetExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLetExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLetExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FreshQualidExprContext extends Tacexpr1Context {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public FreshQualidExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFreshQualidExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFreshQualidExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFreshQualidExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ContextExprContext extends Tacexpr1Context {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ContextExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContextExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContextExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContextExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ContextExprBracedsContext extends Tacexpr1Context {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ContextExprBracedsContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContextExprBraceds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContextExprBraceds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContextExprBraceds(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ContextMultitMatchExprContext extends Tacexpr1Context {
		public List<Context_ruleContext> context_rule() {
			return getRuleContexts(Context_ruleContext.class);
		}
		public Context_ruleContext context_rule(int i) {
			return getRuleContext(Context_ruleContext.class,i);
		}
		public TerminalNode KeyREVERSE() { return getToken(coqParser.KeyREVERSE, 0); }
		public ContextMultitMatchExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContextMultitMatchExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContextMultitMatchExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContextMultitMatchExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SolveExprContext extends Tacexpr1Context {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public SolveExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSolveExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSolveExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSolveExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UconstrExprContext extends Tacexpr1Context {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public UconstrExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUconstrExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUconstrExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUconstrExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumFailExprContext extends Tacexpr1Context {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public List<Message_tokenContext> message_token() {
			return getRuleContexts(Message_tokenContext.class);
		}
		public Message_tokenContext message_token(int i) {
			return getRuleContext(Message_tokenContext.class,i);
		}
		public NumFailExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumFailExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumFailExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumFailExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstrExprContext extends Tacexpr1Context {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ConstrExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterConstrExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitConstrExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitConstrExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FirstExprContext extends Tacexpr1Context {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public FirstExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFirstExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFirstExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFirstExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MatchMultiMatchExprContext extends Tacexpr1Context {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<Match_ruleContext> match_rule() {
			return getRuleContexts(Match_ruleContext.class);
		}
		public Match_ruleContext match_rule(int i) {
			return getRuleContext(Match_ruleContext.class,i);
		}
		public MatchMultiMatchExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMatchMultiMatchExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMatchMultiMatchExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMatchMultiMatchExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumgoalsContext extends Tacexpr1Context {
		public NumgoalsContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumgoals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumgoals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumgoals(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GuardExprContext extends Tacexpr1Context {
		public TestContext test() {
			return getRuleContext(TestContext.class,0);
		}
		public GuardExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterGuardExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitGuardExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitGuardExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AbstractExprContext extends Tacexpr1Context {
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public AbstractExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAbstractExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAbstractExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAbstractExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ContextMatchExprContext extends Tacexpr1Context {
		public List<Context_ruleContext> context_rule() {
			return getRuleContexts(Context_ruleContext.class);
		}
		public Context_ruleContext context_rule(int i) {
			return getRuleContext(Context_ruleContext.class,i);
		}
		public TerminalNode KeyREVERSE() { return getToken(coqParser.KeyREVERSE, 0); }
		public ContextMatchExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContextMatchExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContextMatchExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContextMatchExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ContextLazyMatchExprContext extends Tacexpr1Context {
		public List<Context_ruleContext> context_rule() {
			return getRuleContexts(Context_ruleContext.class);
		}
		public Context_ruleContext context_rule(int i) {
			return getRuleContext(Context_ruleContext.class,i);
		}
		public TerminalNode KeyREVERSE() { return getToken(coqParser.KeyREVERSE, 0); }
		public ContextLazyMatchExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContextLazyMatchExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContextLazyMatchExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContextLazyMatchExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TypeExprContext extends Tacexpr1Context {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TypeExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTypeExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTypeExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTypeExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FreshStringExprContext extends Tacexpr1Context {
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public FreshStringExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFreshStringExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFreshStringExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFreshStringExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FreshExprContext extends Tacexpr1Context {
		public FreshExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFreshExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFreshExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFreshExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MatchLazyMatchExprContext extends Tacexpr1Context {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<Match_ruleContext> match_rule() {
			return getRuleContexts(Match_ruleContext.class);
		}
		public Match_ruleContext match_rule(int i) {
			return getRuleContext(Match_ruleContext.class,i);
		}
		public MatchLazyMatchExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMatchLazyMatchExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMatchLazyMatchExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMatchLazyMatchExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdTacExprContext extends Tacexpr1Context {
		public List<Message_tokenContext> message_token() {
			return getRuleContexts(Message_tokenContext.class);
		}
		public Message_tokenContext message_token(int i) {
			return getRuleContext(Message_tokenContext.class,i);
		}
		public IdTacExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdTacExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdTacExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdTacExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EvalExprContext extends Tacexpr1Context {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public EvalExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEvalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEvalExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEvalExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AssertSucceedsExprContext extends Tacexpr1Context {
		public Tacexpr3Context tacexpr3() {
			return getRuleContext(Tacexpr3Context.class,0);
		}
		public AssertSucceedsExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAssertSucceedsExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAssertSucceedsExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAssertSucceedsExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentFailExprContext extends Tacexpr1Context {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<Message_tokenContext> message_token() {
			return getRuleContexts(Message_tokenContext.class);
		}
		public Message_tokenContext message_token(int i) {
			return getRuleContext(Message_tokenContext.class,i);
		}
		public IdentFailExprContext(Tacexpr1Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentFailExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentFailExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentFailExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tacexpr1Context tacexpr1() throws RecognitionException {
		Tacexpr1Context _localctx = new Tacexpr1Context(_ctx, getState());
		enterRule(_localctx, 106, RULE_tacexpr1);
		int _la;
		try {
			int _alt;
			setState(3122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				_localctx = new FunExprContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2893);
				match(T__242);
				setState(2895); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2894);
					name();
					}
					}
					setState(2897); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(2899);
				match(T__243);
				setState(2901); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2900);
						tacexpr1();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2903); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,285,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				_localctx = new LetExprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2905);
				match(T__244);
				setState(2907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KeyREC) {
					{
					setState(2906);
					match(KeyREC);
					}
				}

				setState(2909);
				let_clause();
				setState(2914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__24) {
					{
					{
					setState(2910);
					match(T__24);
					setState(2911);
					let_clause();
					}
					}
					setState(2916);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2917);
				match(T__82);
				setState(2918);
				expr(0);
				}
				break;
			case 3:
				_localctx = new ContextMatchExprContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2920);
				match(T__226);
				setState(2922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KeyREVERSE) {
					{
					setState(2921);
					match(KeyREVERSE);
					}
				}

				setState(2924);
				match(T__245);
				setState(2925);
				match(T__24);
				setState(2927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__42) {
					{
					setState(2926);
					match(T__42);
					}
				}

				setState(2929);
				context_rule();
				setState(2934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__42) {
					{
					{
					setState(2930);
					match(T__42);
					setState(2931);
					context_rule();
					}
					}
					setState(2936);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2937);
				match(T__246);
				}
				break;
			case 4:
				_localctx = new ContextLazyMatchExprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2939);
				match(T__247);
				setState(2941);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KeyREVERSE) {
					{
					setState(2940);
					match(KeyREVERSE);
					}
				}

				setState(2943);
				match(T__245);
				setState(2944);
				match(T__24);
				setState(2946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__42) {
					{
					setState(2945);
					match(T__42);
					}
				}

				setState(2948);
				context_rule();
				setState(2953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__42) {
					{
					{
					setState(2949);
					match(T__42);
					setState(2950);
					context_rule();
					}
					}
					setState(2955);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2956);
				match(T__246);
				}
				break;
			case 5:
				_localctx = new ContextMultitMatchExprContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2958);
				match(T__248);
				setState(2960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KeyREVERSE) {
					{
					setState(2959);
					match(KeyREVERSE);
					}
				}

				setState(2962);
				match(T__245);
				setState(2963);
				match(T__24);
				setState(2965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__42) {
					{
					setState(2964);
					match(T__42);
					}
				}

				setState(2967);
				context_rule();
				setState(2972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__42) {
					{
					{
					setState(2968);
					match(T__42);
					setState(2969);
					context_rule();
					}
					}
					setState(2974);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2975);
				match(T__246);
				}
				break;
			case 6:
				_localctx = new MatchMatchExprContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2977);
				match(T__226);
				setState(2978);
				expr(0);
				setState(2979);
				match(T__24);
				setState(2982); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2980);
					match(T__42);
					setState(2981);
					match_rule();
					}
					}
					setState(2984); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__42 );
				setState(2986);
				match(T__246);
				}
				break;
			case 7:
				_localctx = new MatchLazyMatchExprContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2988);
				match(T__247);
				setState(2989);
				expr(0);
				setState(2990);
				match(T__24);
				setState(2993); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2991);
					match(T__42);
					setState(2992);
					match_rule();
					}
					}
					setState(2995); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__42 );
				setState(2997);
				match(T__246);
				}
				break;
			case 8:
				_localctx = new MatchMultiMatchExprContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2999);
				match(T__248);
				setState(3000);
				expr(0);
				setState(3001);
				match(T__24);
				setState(3004); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3002);
					match(T__42);
					setState(3003);
					match_rule();
					}
					}
					setState(3006); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__42 );
				setState(3008);
				match(T__246);
				}
				break;
			case 9:
				_localctx = new AbstractExprContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(3010);
				match(T__249);
				setState(3011);
				atom();
				setState(3014);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					setState(3012);
					match(T__23);
					setState(3013);
					ident();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new SolveExprContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(3016);
				match(T__250);
				setState(3017);
				match(T__13);
				setState(3018);
				expr(0);
				setState(3023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__42) {
					{
					{
					setState(3019);
					match(T__42);
					setState(3020);
					expr(0);
					}
					}
					setState(3025);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3026);
				match(T__14);
				}
				break;
			case 11:
				_localctx = new FirstExprContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(3028);
				match(T__251);
				setState(3029);
				match(T__13);
				setState(3030);
				expr(0);
				setState(3035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__42) {
					{
					{
					setState(3031);
					match(T__42);
					setState(3032);
					expr(0);
					}
					}
					setState(3037);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3038);
				match(T__14);
				}
				break;
			case 12:
				_localctx = new IdTacExprContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(3040);
				match(T__252);
				setState(3046);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					setState(3042); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3041);
							message_token();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3044); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new IdentFailExprContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(3048);
				match(T__253);
				setState(3049);
				ident();
				setState(3055);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					setState(3051); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3050);
							message_token();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3053); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,305,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new NumFailExprContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(3057);
				match(T__253);
				setState(3058);
				match(NUM);
				setState(3064);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(3060); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3059);
							message_token();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3062); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,307,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 15:
				_localctx = new FailExprContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(3066);
				match(T__253);
				setState(3072);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(3068); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3067);
							message_token();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3070); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,309,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 16:
				_localctx = new FreshStringExprContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(3074);
				match(T__254);
				setState(3075);
				match(STRING);
				}
				break;
			case 17:
				_localctx = new FreshQualidExprContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(3076);
				match(T__254);
				setState(3077);
				qualid(0);
				}
				break;
			case 18:
				_localctx = new FreshExprContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(3078);
				match(T__254);
				}
				break;
			case 19:
				_localctx = new ContextExprContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(3079);
				match(T__255);
				setState(3080);
				ident();
				setState(3082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(3081);
					term();
					}
					break;
				}
				}
				break;
			case 20:
				_localctx = new ContextExprBracedsContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(3084);
				match(T__255);
				setState(3085);
				ident();
				setState(3086);
				match(T__13);
				setState(3088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (T__16 - 17)) | (1L << (T__27 - 17)) | (1L << (T__41 - 17)) | (1L << (T__71 - 17)) | (1L << (T__72 - 17)) | (1L << (T__73 - 17)) | (1L << (T__76 - 17)) | (1L << (T__79 - 17)))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (T__89 - 90)) | (1L << (T__90 - 90)) | (1L << (T__91 - 90)) | (1L << (T__92 - 90)) | (1L << (T__108 - 90)) | (1L << (T__132 - 90)) | (1L << (T__133 - 90)) | (1L << (T__138 - 90)) | (1L << (T__142 - 90)) | (1L << (T__148 - 90)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (T__156 - 157)) | (1L << (T__157 - 157)) | (1L << (T__159 - 157)) | (1L << (T__176 - 157)) | (1L << (T__178 - 157)) | (1L << (T__179 - 157)) | (1L << (T__182 - 157)) | (1L << (T__186 - 157)) | (1L << (T__187 - 157)) | (1L << (T__200 - 157)) | (1L << (T__213 - 157)) | (1L << (T__214 - 157)) | (1L << (T__215 - 157)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (T__221 - 222)) | (1L << (T__223 - 222)) | (1L << (T__226 - 222)) | (1L << (T__242 - 222)) | (1L << (T__244 - 222)) | (1L << (T__253 - 222)) | (1L << (T__254 - 222)) | (1L << (T__264 - 222)) | (1L << (T__269 - 222)) | (1L << (T__272 - 222)) | (1L << (T__273 - 222)) | (1L << (T__275 - 222)) | (1L << (T__276 - 222)) | (1L << (T__277 - 222)) | (1L << (T__278 - 222)) | (1L << (T__284 - 222)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (SUB - 311)) | (1L << (TILDE - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)) | (1L << (NUM - 311)))) != 0)) {
					{
					setState(3087);
					term();
					}
				}

				setState(3090);
				match(T__14);
				}
				break;
			case 21:
				_localctx = new EvalExprContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(3092);
				match(T__256);
				setState(3093);
				match(T__257);
				setState(3094);
				match(T__82);
				setState(3095);
				term();
				}
				break;
			case 22:
				_localctx = new TypeExprContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(3096);
				match(T__258);
				setState(3097);
				match(T__173);
				setState(3098);
				term();
				}
				break;
			case 23:
				_localctx = new ConstrExprContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(3099);
				match(T__259);
				setState(3100);
				match(COLON);
				setState(3101);
				term();
				}
				break;
			case 24:
				_localctx = new UconstrExprContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(3102);
				match(T__260);
				setState(3103);
				match(COLON);
				setState(3104);
				term();
				}
				break;
			case 25:
				_localctx = new TypeTermExprContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(3105);
				match(T__261);
				setState(3106);
				term();
				}
				break;
			case 26:
				_localctx = new NumgoalsContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(3107);
				match(T__262);
				}
				break;
			case 27:
				_localctx = new GuardExprContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(3108);
				match(T__263);
				setState(3109);
				test();
				}
				break;
			case 28:
				_localctx = new AssertFailsExprContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(3110);
				match(T__264);
				setState(3111);
				tacexpr3();
				}
				break;
			case 29:
				_localctx = new AssertSucceedsExprContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(3112);
				match(T__265);
				setState(3113);
				tacexpr3();
				}
				break;
			case 30:
				_localctx = new AtomicExprContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(3114);
				atomic_tactic();
				}
				break;
			case 31:
				_localctx = new ApplicationExprContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(3115);
				qualid(0);
				setState(3117); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3116);
						tacarg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3119); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,313,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 32:
				_localctx = new AtomExprContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(3121);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
	 
		public AtomContext() { }
		public void copyFrom(AtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnitAtomContext extends AtomContext {
		public UnitAtomContext(AtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnitAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnitAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnitAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BracedExprAtomContext extends AtomContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public BracedExprAtomContext(AtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBracedExprAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBracedExprAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBracedExprAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntAtomContext extends AtomContext {
		public IntegContext integ() {
			return getRuleContext(IntegContext.class,0);
		}
		public IntAtomContext(AtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QualidAtomContext extends AtomContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public QualidAtomContext(AtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQualidAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQualidAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQualidAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DotExprAtomContext extends AtomContext {
		public DotExprAtomContext(AtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDotExprAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDotExprAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDotExprAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_atom);
		try {
			setState(3132);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__71:
			case T__72:
			case T__73:
			case T__76:
			case T__79:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__108:
			case T__132:
			case T__138:
			case T__142:
			case T__148:
			case T__156:
			case T__176:
			case T__178:
			case T__179:
			case T__186:
			case T__187:
			case T__200:
			case T__214:
			case T__215:
			case T__223:
			case T__253:
			case T__254:
			case T__264:
			case T__269:
			case T__310:
			case T__311:
			case KeySOME:
			case IDENT:
				_localctx = new QualidAtomContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3124);
				qualid(0);
				}
				break;
			case T__266:
				_localctx = new UnitAtomContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3125);
				match(T__266);
				}
				break;
			case SUB:
			case NUM:
				_localctx = new IntAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3126);
				integ();
				}
				break;
			case T__27:
				_localctx = new BracedExprAtomContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3127);
				match(T__27);
				setState(3128);
				expr(0);
				setState(3129);
				match(T__28);
				}
				break;
			case T__267:
				_localctx = new DotExprAtomContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3131);
				match(T__267);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Message_tokenContext extends ParserRuleContext {
		public Message_tokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_message_token; }
	 
		public Message_tokenContext() { }
		public void copyFrom(Message_tokenContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IntMessageTokenContext extends Message_tokenContext {
		public IntegContext integ() {
			return getRuleContext(IntegContext.class,0);
		}
		public IntMessageTokenContext(Message_tokenContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntMessageToken(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntMessageToken(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntMessageToken(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentMessageTokenContext extends Message_tokenContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public IdentMessageTokenContext(Message_tokenContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentMessageToken(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentMessageToken(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentMessageToken(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringMessageTokenContext extends Message_tokenContext {
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public StringMessageTokenContext(Message_tokenContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStringMessageToken(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStringMessageToken(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStringMessageToken(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Message_tokenContext message_token() throws RecognitionException {
		Message_tokenContext _localctx = new Message_tokenContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_message_token);
		try {
			setState(3137);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				_localctx = new StringMessageTokenContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3134);
				match(STRING);
				}
				break;
			case T__71:
			case T__72:
			case T__73:
			case T__76:
			case T__79:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__108:
			case T__132:
			case T__138:
			case T__142:
			case T__148:
			case T__156:
			case T__176:
			case T__178:
			case T__179:
			case T__186:
			case T__187:
			case T__200:
			case T__214:
			case T__215:
			case T__223:
			case T__253:
			case T__254:
			case T__264:
			case T__269:
			case T__310:
			case T__311:
			case KeySOME:
			case IDENT:
				_localctx = new IdentMessageTokenContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3135);
				ident();
				}
				break;
			case SUB:
			case NUM:
				_localctx = new IntMessageTokenContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3136);
				integ();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TacargContext extends ParserRuleContext {
		public TacargContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tacarg; }
	 
		public TacargContext() { }
		public void copyFrom(TacargContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QualidTacArgContext extends TacargContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public QualidTacArgContext(TacargContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQualidTacArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQualidTacArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQualidTacArg(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringTacArgContext extends TacargContext {
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public StringTacArgContext(TacargContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStringTacArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStringTacArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStringTacArg(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnitTacArgContext extends TacargContext {
		public UnitTacArgContext(TacargContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnitTacArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnitTacArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnitTacArg(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TermTacArgContext extends TacargContext {
		public Below_term_ex_minusContext below_term_ex_minus() {
			return getRuleContext(Below_term_ex_minusContext.class,0);
		}
		public TermTacArgContext(TacargContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTermTacArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTermTacArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTermTacArg(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LtacTacArgContext extends TacargContext {
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public LtacTacArgContext(TacargContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLtacTacArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLtacTacArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLtacTacArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TacargContext tacarg() throws RecognitionException {
		TacargContext _localctx = new TacargContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_tacarg);
		try {
			setState(3148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				_localctx = new QualidTacArgContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3139);
				qualid(0);
				}
				break;
			case 2:
				_localctx = new UnitTacArgContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3140);
				match(T__266);
				}
				break;
			case 3:
				_localctx = new LtacTacArgContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3141);
				match(T__268);
				setState(3142);
				match(COLON);
				setState(3143);
				atom();
				}
				break;
			case 4:
				_localctx = new StringTacArgContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3144);
				match(T__27);
				setState(3145);
				match(STRING);
				setState(3146);
				match(T__28);
				}
				break;
			case 5:
				_localctx = new TermTacArgContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3147);
				below_term_ex_minus(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Let_clauseContext extends ParserRuleContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Let_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_let_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLet_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLet_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Let_clauseContext let_clause() throws RecognitionException {
		Let_clauseContext _localctx = new Let_clauseContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_let_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3150);
			ident();
			setState(3156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(3152); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3151);
					name();
					}
					}
					setState(3154); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				}
			}

			setState(3158);
			match(T__15);
			setState(3159);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Context_ruleContext extends ParserRuleContext {
		public Context_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_context_rule; }
	 
		public Context_ruleContext() { }
		public void copyFrom(Context_ruleContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DerivedContextRuleContext extends Context_ruleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public DerivedContextRuleContext(Context_ruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDerivedContextRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDerivedContextRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDerivedContextRule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdContextRuleContext extends Context_ruleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public StdContextRuleContext(Context_ruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdContextRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdContextRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdContextRule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnderscoreContextRuleContext extends Context_ruleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public UnderscoreContextRuleContext(Context_ruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnderscoreContextRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnderscoreContextRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnderscoreContextRule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ContextHypBracedContextRuleContext extends Context_ruleContext {
		public List<Context_hypContext> context_hyp() {
			return getRuleContexts(Context_hypContext.class);
		}
		public Context_hypContext context_hyp(int i) {
			return getRuleContext(Context_hypContext.class,i);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public ContextHypBracedContextRuleContext(Context_ruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContextHypBracedContextRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContextHypBracedContextRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContextHypBracedContextRule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ContextHypContextRuleContext extends Context_ruleContext {
		public List<Context_hypContext> context_hyp() {
			return getRuleContexts(Context_hypContext.class);
		}
		public Context_hypContext context_hyp(int i) {
			return getRuleContext(Context_hypContext.class,i);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public ContextHypContextRuleContext(Context_ruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContextHypContextRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContextHypContextRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContextHypContextRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Context_ruleContext context_rule() throws RecognitionException {
		Context_ruleContext _localctx = new Context_ruleContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_context_rule);
		int _la;
		try {
			setState(3217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				_localctx = new ContextHypContextRuleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3161);
				context_hyp();
				setState(3166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(3162);
					match(T__111);
					setState(3163);
					context_hyp();
					}
					}
					setState(3168);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3169);
				match(T__220);
				setState(3170);
				term();
				setState(3171);
				match(T__243);
				setState(3172);
				expr(0);
				setState(3175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__182) {
					{
					setState(3173);
					match(T__182);
					setState(3174);
					ident();
					}
				}

				}
				break;
			case 2:
				_localctx = new ContextHypBracedContextRuleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3177);
				match(T__13);
				setState(3178);
				context_hyp();
				setState(3183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(3179);
					match(T__111);
					setState(3180);
					context_hyp();
					}
					}
					setState(3185);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3186);
				match(T__220);
				setState(3187);
				term();
				setState(3188);
				match(T__14);
				setState(3189);
				match(T__243);
				setState(3190);
				expr(0);
				setState(3193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__182) {
					{
					setState(3191);
					match(T__182);
					setState(3192);
					ident();
					}
				}

				}
				break;
			case 3:
				_localctx = new StdContextRuleContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3195);
				term();
				setState(3196);
				match(T__243);
				setState(3197);
				expr(0);
				setState(3200);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__182) {
					{
					setState(3198);
					match(T__182);
					setState(3199);
					ident();
					}
				}

				}
				break;
			case 4:
				_localctx = new DerivedContextRuleContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3202);
				match(T__220);
				setState(3203);
				term();
				setState(3204);
				match(T__243);
				setState(3205);
				expr(0);
				setState(3208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__182) {
					{
					setState(3206);
					match(T__182);
					setState(3207);
					ident();
					}
				}

				}
				break;
			case 5:
				_localctx = new UnderscoreContextRuleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3210);
				match(T__221);
				setState(3211);
				match(T__243);
				setState(3212);
				expr(0);
				setState(3215);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__182) {
					{
					setState(3213);
					match(T__182);
					setState(3214);
					ident();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Context_hypContext extends ParserRuleContext {
		public Context_hypContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_context_hyp; }
	 
		public Context_hypContext() { }
		public void copyFrom(Context_hypContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StdContextHypContext extends Context_hypContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public StdContextHypContext(Context_hypContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdContextHyp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdContextHyp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdContextHyp(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprContextHypContext extends Context_hypContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ExprContextHypContext(Context_hypContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExprContextHyp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExprContextHyp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExprContextHyp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Context_hypContext context_hyp() throws RecognitionException {
		Context_hypContext _localctx = new Context_hypContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_context_hyp);
		int _la;
		try {
			setState(3233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				_localctx = new StdContextHypContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3219);
				name();
				setState(3220);
				match(COLON);
				setState(3221);
				term();
				}
				break;
			case 2:
				_localctx = new ExprContextHypContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3223);
				name();
				setState(3224);
				match(T__15);
				setState(3225);
				term();
				setState(3228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(3226);
					match(COLON);
					setState(3227);
					term();
					}
				}

				setState(3230);
				match(T__243);
				setState(3231);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_ruleContext extends ParserRuleContext {
		public Match_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_rule; }
	 
		public Match_ruleContext() { }
		public void copyFrom(Match_ruleContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ContextMatchRuleContext extends Match_ruleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public ContextMatchRuleContext(Match_ruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContextMatchRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContextMatchRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContextMatchRule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdMatchRuleContext extends Match_ruleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public StdMatchRuleContext(Match_ruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdMatchRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdMatchRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdMatchRule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnderscoreMatchRuleContext extends Match_ruleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public UnderscoreMatchRuleContext(Match_ruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnderscoreMatchRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnderscoreMatchRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnderscoreMatchRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_ruleContext match_rule() throws RecognitionException {
		Match_ruleContext _localctx = new Match_ruleContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_match_rule);
		int _la;
		try {
			setState(3252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				_localctx = new StdMatchRuleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3235);
				term();
				setState(3236);
				match(T__243);
				setState(3237);
				expr(0);
				}
				break;
			case 2:
				_localctx = new ContextMatchRuleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3239);
				match(T__255);
				setState(3241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					setState(3240);
					ident();
					}
				}

				setState(3243);
				match(T__13);
				setState(3244);
				term();
				setState(3245);
				match(T__14);
				setState(3246);
				match(T__243);
				setState(3247);
				expr(0);
				}
				break;
			case 3:
				_localctx = new UnderscoreMatchRuleContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3249);
				match(T__221);
				setState(3250);
				match(T__243);
				setState(3251);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TestContext extends ParserRuleContext {
		public List<IntegContext> integ() {
			return getRuleContexts(IntegContext.class);
		}
		public IntegContext integ(int i) {
			return getRuleContext(IntegContext.class,i);
		}
		public TerminalNode EQUAL() { return getToken(coqParser.EQUAL, 0); }
		public TerminalNode LESS() { return getToken(coqParser.LESS, 0); }
		public TerminalNode LOEQ() { return getToken(coqParser.LOEQ, 0); }
		public TerminalNode GREATER() { return getToken(coqParser.GREATER, 0); }
		public TerminalNode GOEQ() { return getToken(coqParser.GOEQ, 0); }
		public TestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_test; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TestContext test() throws RecognitionException {
		TestContext _localctx = new TestContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_test);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3254);
			integ();
			setState(3255);
			_la = _input.LA(1);
			if ( !(((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (LESS - 323)) | (1L << (GREATER - 323)) | (1L << (LOEQ - 323)) | (1L << (GOEQ - 323)) | (1L << (EQUAL - 323)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3256);
			integ();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectorContext extends ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selector; }
	 
		public SelectorContext() { }
		public void copyFrom(SelectorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IntSelectorContext extends SelectorContext {
		public List<Int_selector_bodyContext> int_selector_body() {
			return getRuleContexts(Int_selector_bodyContext.class);
		}
		public Int_selector_bodyContext int_selector_body(int i) {
			return getRuleContext(Int_selector_bodyContext.class,i);
		}
		public IntSelectorContext(SelectorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntSelector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntSelector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntSelector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentSelectorContext extends SelectorContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public IdentSelectorContext(SelectorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentSelector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentSelector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentSelector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectorContext selector() throws RecognitionException {
		SelectorContext _localctx = new SelectorContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_selector);
		int _la;
		try {
			setState(3267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__71:
			case T__72:
			case T__73:
			case T__76:
			case T__79:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__108:
			case T__132:
			case T__138:
			case T__142:
			case T__148:
			case T__156:
			case T__176:
			case T__178:
			case T__179:
			case T__186:
			case T__187:
			case T__200:
			case T__214:
			case T__215:
			case T__223:
			case T__253:
			case T__254:
			case T__264:
			case T__269:
			case T__310:
			case T__311:
			case KeySOME:
			case IDENT:
				_localctx = new IdentSelectorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3258);
				ident();
				}
				break;
			case SUB:
			case NUM:
				_localctx = new IntSelectorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3259);
				int_selector_body();
				setState(3264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(3260);
					match(T__111);
					setState(3261);
					int_selector_body();
					}
					}
					setState(3266);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegContext extends ParserRuleContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public TerminalNode SUB() { return getToken(coqParser.SUB, 0); }
		public IntegContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integ; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInteg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInteg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInteg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntegContext integ() throws RecognitionException {
		IntegContext _localctx = new IntegContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_integ);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUB) {
				{
				setState(3269);
				match(SUB);
				}
			}

			setState(3272);
			match(NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Int_selector_bodyContext extends ParserRuleContext {
		public List<IntegContext> integ() {
			return getRuleContexts(IntegContext.class);
		}
		public IntegContext integ(int i) {
			return getRuleContext(IntegContext.class,i);
		}
		public Int_selector_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int_selector_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInt_selector_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInt_selector_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInt_selector_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Int_selector_bodyContext int_selector_body() throws RecognitionException {
		Int_selector_bodyContext _localctx = new Int_selector_bodyContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_int_selector_body);
		try {
			setState(3279);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3274);
				integ();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3275);
				integ();
				setState(3276);
				match(SUB);
				setState(3277);
				integ();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Toplevel_selectorContext extends ParserRuleContext {
		public Toplevel_selectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_toplevel_selector; }
	 
		public Toplevel_selectorContext() { }
		public void copyFrom(Toplevel_selectorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ParToplevelSelectorContext extends Toplevel_selectorContext {
		public ParToplevelSelectorContext(Toplevel_selectorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterParToplevelSelector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitParToplevelSelector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitParToplevelSelector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelToplevelSelectorContext extends Toplevel_selectorContext {
		public SelectorContext selector() {
			return getRuleContext(SelectorContext.class,0);
		}
		public SelToplevelSelectorContext(Toplevel_selectorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSelToplevelSelector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSelToplevelSelector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSelToplevelSelector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AllToplevelSelectorContext extends Toplevel_selectorContext {
		public AllToplevelSelectorContext(Toplevel_selectorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAllToplevelSelector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAllToplevelSelector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAllToplevelSelector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Toplevel_selectorContext toplevel_selector() throws RecognitionException {
		Toplevel_selectorContext _localctx = new Toplevel_selectorContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_toplevel_selector);
		try {
			setState(3284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				_localctx = new SelToplevelSelectorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3281);
				selector();
				}
				break;
			case 2:
				_localctx = new AllToplevelSelectorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3282);
				match(T__269);
				}
				break;
			case 3:
				_localctx = new ParToplevelSelectorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3283);
				match(T__270);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LtacContext extends ParserRuleContext {
		public List<Ltac_defContext> ltac_def() {
			return getRuleContexts(Ltac_defContext.class);
		}
		public Ltac_defContext ltac_def(int i) {
			return getRuleContext(Ltac_defContext.class,i);
		}
		public TerminalNode KeyLOCAL() { return getToken(coqParser.KeyLOCAL, 0); }
		public LtacContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ltac; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLtac(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLtac(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLtac(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LtacContext ltac() throws RecognitionException {
		LtacContext _localctx = new LtacContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_ltac);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KeyLOCAL) {
				{
				setState(3286);
				match(KeyLOCAL);
				}
			}

			setState(3289);
			match(T__271);
			setState(3290);
			ltac_def();
			setState(3295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__24) {
				{
				{
				setState(3291);
				match(T__24);
				setState(3292);
				ltac_def();
				}
				}
				setState(3297);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ltac_defContext extends ParserRuleContext {
		public Ltac_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ltac_def; }
	 
		public Ltac_defContext() { }
		public void copyFrom(Ltac_defContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QualidLtacDefContext extends Ltac_defContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public QualidLtacDefContext(Ltac_defContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQualidLtacDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQualidLtacDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQualidLtacDef(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentLtacDefContext extends Ltac_defContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IdentLtacDefContext(Ltac_defContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentLtacDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentLtacDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentLtacDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ltac_defContext ltac_def() throws RecognitionException {
		Ltac_defContext _localctx = new Ltac_defContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_ltac_def);
		int _la;
		try {
			setState(3318);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				_localctx = new IdentLtacDefContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3298);
				ident();
				setState(3302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					{
					setState(3299);
					ident();
					}
					}
					setState(3304);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3305);
				match(T__15);
				setState(3306);
				expr(0);
				}
				break;
			case 2:
				_localctx = new QualidLtacDefContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3308);
				qualid(0);
				setState(3312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					{
					setState(3309);
					ident();
					}
					}
					setState(3314);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3315);
				match(T__15);
				setState(3316);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TermContext extends ParserRuleContext {
		public Above_termContext above_term() {
			return getRuleContext(Above_termContext.class,0);
		}
		public TermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TermContext term() throws RecognitionException {
		TermContext _localctx = new TermContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3320);
			above_term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Above_termContext extends ParserRuleContext {
		public Above_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_above_term; }
	 
		public Above_termContext() { }
		public void copyFrom(Above_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class OrOpsTermContext extends Above_termContext {
		public List<Above_termContext> above_term() {
			return getRuleContexts(Above_termContext.class);
		}
		public Above_termContext above_term(int i) {
			return getRuleContext(Above_termContext.class,i);
		}
		public TerminalNode OR() { return getToken(coqParser.OR, 0); }
		public OrOpsTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterOrOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitOrOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitOrOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CofixLetTermContext extends Above_termContext {
		public Cofix_bodyContext cofix_body() {
			return getRuleContext(Cofix_bodyContext.class,0);
		}
		public Cofix_termContext cofix_term() {
			return getRuleContext(Cofix_termContext.class,0);
		}
		public CofixLetTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCofixLetTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCofixLetTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCofixLetTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TildeOpsTermContext extends Above_termContext {
		public TerminalNode TILDE() { return getToken(coqParser.TILDE, 0); }
		public Above_termContext above_term() {
			return getRuleContext(Above_termContext.class,0);
		}
		public TildeOpsTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTildeOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTildeOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTildeOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CompareOpsTermContext extends Above_termContext {
		public Token op;
		public List<Above_term_ex_below_70Context> above_term_ex_below_70() {
			return getRuleContexts(Above_term_ex_below_70Context.class);
		}
		public Above_term_ex_below_70Context above_term_ex_below_70(int i) {
			return getRuleContext(Above_term_ex_below_70Context.class,i);
		}
		public List<TerminalNode> LESS() { return getTokens(coqParser.LESS); }
		public TerminalNode LESS(int i) {
			return getToken(coqParser.LESS, i);
		}
		public List<TerminalNode> GREATER() { return getTokens(coqParser.GREATER); }
		public TerminalNode GREATER(int i) {
			return getToken(coqParser.GREATER, i);
		}
		public List<TerminalNode> LOEQ() { return getTokens(coqParser.LOEQ); }
		public TerminalNode LOEQ(int i) {
			return getToken(coqParser.LOEQ, i);
		}
		public List<TerminalNode> GOEQ() { return getTokens(coqParser.GOEQ); }
		public TerminalNode GOEQ(int i) {
			return getToken(coqParser.GOEQ, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(coqParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(coqParser.EQUAL, i);
		}
		public TerminalNode GUILL() { return getToken(coqParser.GUILL, 0); }
		public TerminalNode COLG() { return getToken(coqParser.COLG, 0); }
		public CompareOpsTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCompareOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCompareOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCompareOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NameAssignLetTermContext extends Above_termContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Name_assign_termContext name_assign_term() {
			return getRuleContext(Name_assign_termContext.class,0);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Dep_ret_typeContext dep_ret_type() {
			return getRuleContext(Dep_ret_typeContext.class,0);
		}
		public NameAssignLetTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNameAssignLetTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNameAssignLetTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNameAssignLetTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultTermProjectionTermContext extends Above_termContext {
		public Above_termContext above_term() {
			return getRuleContext(Above_termContext.class,0);
		}
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<Below_term_ex_minusContext> below_term_ex_minus() {
			return getRuleContexts(Below_term_ex_minusContext.class);
		}
		public Below_term_ex_minusContext below_term_ex_minus(int i) {
			return getRuleContext(Below_term_ex_minusContext.class,i);
		}
		public MultTermProjectionTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMultTermProjectionTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMultTermProjectionTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMultTermProjectionTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FixTermContext extends Above_termContext {
		public Fix_bodiesContext fix_bodies() {
			return getRuleContext(Fix_bodiesContext.class,0);
		}
		public FixTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFixTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFixTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFixTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FixLetTermContext extends Above_termContext {
		public Fix_bodyContext fix_body() {
			return getRuleContext(Fix_bodyContext.class,0);
		}
		public Fix_termContext fix_term() {
			return getRuleContext(Fix_termContext.class,0);
		}
		public FixLetTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFixLetTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFixLetTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFixLetTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RecordTermContext extends Above_termContext {
		public Record_termContext record_term() {
			return getRuleContext(Record_termContext.class,0);
		}
		public RecordTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRecordTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRecordTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRecordTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentAssignLetTermContext extends Above_termContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Ident_assign_termContext ident_assign_term() {
			return getRuleContext(Ident_assign_termContext.class,0);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public IdentAssignLetTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentAssignLetTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentAssignLetTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentAssignLetTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForallTermContext extends Above_termContext {
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public Forall_termContext forall_term() {
			return getRuleContext(Forall_termContext.class,0);
		}
		public ForallTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterForallTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitForallTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitForallTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrecBelow70TermContext extends Above_termContext {
		public Above_term_ex_below_70Context above_term_ex_below_70() {
			return getRuleContext(Above_term_ex_below_70Context.class,0);
		}
		public PrecBelow70TermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPrecBelow70Term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPrecBelow70Term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPrecBelow70Term(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunTermContext extends Above_termContext {
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public Fun_termContext fun_term() {
			return getRuleContext(Fun_termContext.class,0);
		}
		public FunTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFunTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFunTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFunTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultArgProjectionTermContext extends Above_termContext {
		public Above_termContext above_term() {
			return getRuleContext(Above_termContext.class,0);
		}
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<ArgContext> arg() {
			return getRuleContexts(ArgContext.class);
		}
		public ArgContext arg(int i) {
			return getRuleContext(ArgContext.class,i);
		}
		public MultArgProjectionTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMultArgProjectionTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMultArgProjectionTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMultArgProjectionTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RecordProjectionTermContext extends Above_termContext {
		public Above_termContext above_term() {
			return getRuleContext(Above_termContext.class,0);
		}
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public RecordProjectionTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRecordProjectionTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRecordProjectionTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRecordProjectionTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ImpliesOpsTermContext extends Above_termContext {
		public List<Above_termContext> above_term() {
			return getRuleContexts(Above_termContext.class);
		}
		public Above_termContext above_term(int i) {
			return getRuleContext(Above_termContext.class,i);
		}
		public TerminalNode IMPLIES() { return getToken(coqParser.IMPLIES, 0); }
		public ImpliesOpsTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterImpliesOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitImpliesOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitImpliesOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExclamTermContext extends Above_termContext {
		public Exists_termContext exists_term() {
			return getRuleContext(Exists_termContext.class,0);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public ExistsExclamTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExistsExclamTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExistsExclamTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExistsExclamTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SumOrSpecifContext extends Above_termContext {
		public Above_termContext above_term() {
			return getRuleContext(Above_termContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public SumOrSpecifContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSumOrSpecif(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSumOrSpecif(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSumOrSpecif(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsTermContext extends Above_termContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public Exists_termContext exists_term() {
			return getRuleContext(Exists_termContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ExistsTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExistsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExistsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExistsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LColOpsTermContext extends Above_termContext {
		public List<Above_termContext> above_term() {
			return getRuleContexts(Above_termContext.class);
		}
		public Above_termContext above_term(int i) {
			return getRuleContext(Above_termContext.class,i);
		}
		public TerminalNode LCOL() { return getToken(coqParser.LCOL, 0); }
		public LColOpsTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLColOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLColOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLColOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtTermContext extends Above_termContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<Below_term_ex_minusContext> below_term_ex_minus() {
			return getRuleContexts(Below_term_ex_minusContext.class);
		}
		public Below_term_ex_minusContext below_term_ex_minus(int i) {
			return getRuleContext(Below_term_ex_minusContext.class,i);
		}
		public AtTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CofixTermContext extends Above_termContext {
		public Cofix_bodiesContext cofix_bodies() {
			return getRuleContext(Cofix_bodiesContext.class,0);
		}
		public CofixTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCofixTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCofixTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCofixTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColonOpsTermContext extends Above_termContext {
		public List<Above_termContext> above_term() {
			return getRuleContexts(Above_termContext.class);
		}
		public Above_termContext above_term(int i) {
			return getRuleContext(Above_termContext.class,i);
		}
		public TerminalNode COLON() { return getToken(coqParser.COLON, 0); }
		public ColonOpsTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterColonOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitColonOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitColonOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EquivOpsTermContext extends Above_termContext {
		public List<Above_termContext> above_term() {
			return getRuleContexts(Above_termContext.class);
		}
		public Above_termContext above_term(int i) {
			return getRuleContext(Above_termContext.class,i);
		}
		public TerminalNode EQUIV() { return getToken(coqParser.EQUIV, 0); }
		public EquivOpsTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEquivOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEquivOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEquivOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColGOpsTermContext extends Above_termContext {
		public Above_termContext above_term() {
			return getRuleContext(Above_termContext.class,0);
		}
		public TerminalNode COLG() { return getToken(coqParser.COLG, 0); }
		public ColGOpsTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterColGOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitColGOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitColGOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IfThenElseTermContext extends Above_termContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public If_then_else_termContext if_then_else_term() {
			return getRuleContext(If_then_else_termContext.class,0);
		}
		public Dep_ret_typeContext dep_ret_type() {
			return getRuleContext(Dep_ret_typeContext.class,0);
		}
		public IfThenElseTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIfThenElseTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIfThenElseTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIfThenElseTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Exists2TermContext extends Above_termContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Exists_termContext exists_term() {
			return getRuleContext(Exists_termContext.class,0);
		}
		public Exists2TermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExists2Term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExists2Term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExists2Term(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PatternAssignLetTermContext extends Above_termContext {
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Pattern_assign_termContext pattern_assign_term() {
			return getRuleContext(Pattern_assign_termContext.class,0);
		}
		public Return_typeContext return_type() {
			return getRuleContext(Return_typeContext.class,0);
		}
		public PatternAssignLetTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPatternAssignLetTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPatternAssignLetTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPatternAssignLetTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AndOpsTermContext extends Above_termContext {
		public List<Above_termContext> above_term() {
			return getRuleContexts(Above_termContext.class);
		}
		public Above_termContext above_term(int i) {
			return getRuleContext(Above_termContext.class,i);
		}
		public TerminalNode AND() { return getToken(coqParser.AND, 0); }
		public AndOpsTermContext(Above_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAndOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAndOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAndOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Above_termContext above_term() throws RecognitionException {
		return above_term(0);
	}

	private Above_termContext above_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Above_termContext _localctx = new Above_termContext(_ctx, _parentState);
		Above_termContext _prevctx = _localctx;
		int _startState = 138;
		enterRecursionRule(_localctx, 138, RULE_above_term, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				_localctx = new ForallTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3323);
				match(T__272);
				setState(3324);
				binders();
				setState(3325);
				match(T__111);
				setState(3326);
				forall_term();
				}
				break;
			case 2:
				{
				_localctx = new ExistsTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3328);
				match(T__213);
				setState(3329);
				ident();
				setState(3332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(3330);
					match(COLON);
					setState(3331);
					term();
					}
				}

				setState(3334);
				match(T__111);
				setState(3335);
				exists_term();
				}
				break;
			case 3:
				{
				_localctx = new Exists2TermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3337);
				match(T__273);
				setState(3338);
				ident();
				setState(3341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(3339);
					match(COLON);
					setState(3340);
					term();
					}
				}

				setState(3343);
				match(T__111);
				setState(3344);
				term();
				setState(3345);
				match(T__222);
				setState(3346);
				exists_term();
				}
				break;
			case 4:
				{
				_localctx = new ExistsExclamTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3348);
				match(T__213);
				setState(3349);
				match(T__134);
				setState(3351); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3350);
					ident();
					}
					}
					setState(3353); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(3355);
				match(T__111);
				setState(3356);
				exists_term();
				}
				break;
			case 5:
				{
				_localctx = new FunTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3358);
				match(T__242);
				setState(3359);
				binders();
				setState(3360);
				match(T__243);
				setState(3361);
				fun_term();
				}
				break;
			case 6:
				{
				_localctx = new FixTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3363);
				match(T__157);
				setState(3364);
				fix_bodies();
				}
				break;
			case 7:
				{
				_localctx = new CofixTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3365);
				match(T__159);
				setState(3366);
				cofix_bodies();
				}
				break;
			case 8:
				{
				_localctx = new IdentAssignLetTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3367);
				match(T__244);
				setState(3368);
				ident();
				setState(3370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					setState(3369);
					binders();
					}
				}

				setState(3374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(3372);
					match(COLON);
					setState(3373);
					term();
					}
				}

				setState(3376);
				match(T__15);
				setState(3377);
				term();
				setState(3378);
				match(T__82);
				setState(3379);
				ident_assign_term();
				}
				break;
			case 9:
				{
				_localctx = new FixLetTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3381);
				match(T__244);
				setState(3382);
				match(T__157);
				setState(3383);
				fix_body();
				setState(3384);
				match(T__82);
				setState(3385);
				fix_term();
				}
				break;
			case 10:
				{
				_localctx = new CofixLetTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3387);
				match(T__244);
				setState(3388);
				match(T__159);
				setState(3389);
				cofix_body();
				setState(3390);
				match(T__82);
				setState(3391);
				cofix_term();
				}
				break;
			case 11:
				{
				_localctx = new NameAssignLetTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3393);
				match(T__244);
				setState(3394);
				match(T__27);
				setState(3396);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					setState(3395);
					name();
					}
				}

				setState(3402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(3398);
					match(T__111);
					setState(3399);
					name();
					}
					}
					setState(3404);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3405);
				match(T__28);
				setState(3407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__137 || _la==T__280) {
					{
					setState(3406);
					dep_ret_type();
					}
				}

				setState(3409);
				match(T__15);
				setState(3410);
				term();
				setState(3411);
				match(T__82);
				setState(3412);
				name_assign_term();
				}
				break;
			case 12:
				{
				_localctx = new PatternAssignLetTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3414);
				match(T__244);
				setState(3415);
				match(T__274);
				setState(3416);
				pattern(0);
				setState(3419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__82) {
					{
					setState(3417);
					match(T__82);
					setState(3418);
					term();
					}
				}

				setState(3421);
				match(T__15);
				setState(3422);
				term();
				setState(3424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__280) {
					{
					setState(3423);
					return_type();
					}
				}

				setState(3426);
				match(T__82);
				setState(3427);
				pattern_assign_term();
				}
				break;
			case 13:
				{
				_localctx = new IfThenElseTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3429);
				match(T__275);
				setState(3430);
				term();
				setState(3432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__137 || _la==T__280) {
					{
					setState(3431);
					dep_ret_type();
					}
				}

				setState(3434);
				match(T__240);
				setState(3435);
				term();
				setState(3436);
				match(T__241);
				setState(3437);
				if_then_else_term();
				}
				break;
			case 14:
				{
				_localctx = new AtTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3439);
				match(T__182);
				setState(3440);
				qualid(0);
				setState(3444);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3441);
						below_term_ex_minus(0);
						}
						} 
					}
					setState(3446);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
				}
				}
				break;
			case 15:
				{
				_localctx = new CompareOpsTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3447);
				above_term_ex_below_70(0);
				setState(3448);
				((CompareOpsTermContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (LESS - 323)) | (1L << (GREATER - 323)) | (1L << (LOEQ - 323)) | (1L << (GOEQ - 323)) | (1L << (EQUAL - 323)) | (1L << (GUILL - 323)))) != 0)) ) {
					((CompareOpsTermContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3449);
				above_term_ex_below_70(0);
				setState(3452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(3450);
					_la = _input.LA(1);
					if ( !(((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (LESS - 323)) | (1L << (GREATER - 323)) | (1L << (LOEQ - 323)) | (1L << (GOEQ - 323)) | (1L << (EQUAL - 323)) | (1L << (COLG - 323)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3451);
					above_term_ex_below_70(0);
					}
					break;
				}
				}
				break;
			case 16:
				{
				_localctx = new TildeOpsTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3454);
				match(TILDE);
				setState(3455);
				above_term(7);
				}
				break;
			case 17:
				{
				_localctx = new RecordTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3456);
				record_term();
				}
				break;
			case 18:
				{
				_localctx = new PrecBelow70TermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3457);
				above_term_ex_below_70(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3517);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,359,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3515);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
					case 1:
						{
						_localctx = new ColonOpsTermContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3460);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(3461);
						match(COLON);
						setState(3462);
						above_term(10);
						}
						break;
					case 2:
						{
						_localctx = new LColOpsTermContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3463);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(3464);
						match(LCOL);
						setState(3465);
						above_term(9);
						}
						break;
					case 3:
						{
						_localctx = new AndOpsTermContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3466);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3467);
						match(AND);
						setState(3468);
						above_term(6);
						}
						break;
					case 4:
						{
						_localctx = new OrOpsTermContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3469);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3470);
						match(OR);
						setState(3471);
						above_term(5);
						}
						break;
					case 5:
						{
						_localctx = new EquivOpsTermContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3472);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3473);
						match(EQUIV);
						setState(3474);
						above_term(5);
						}
						break;
					case 6:
						{
						_localctx = new ImpliesOpsTermContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3475);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3476);
						match(IMPLIES);
						setState(3477);
						above_term(3);
						}
						break;
					case 7:
						{
						_localctx = new RecordProjectionTermContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3478);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(3479);
						match(T__0);
						setState(3480);
						match(T__27);
						setState(3481);
						qualid(0);
						setState(3482);
						match(T__28);
						}
						break;
					case 8:
						{
						_localctx = new MultArgProjectionTermContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3484);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(3485);
						match(T__0);
						setState(3486);
						match(T__27);
						setState(3487);
						qualid(0);
						setState(3489); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3488);
							arg();
							}
							}
							setState(3491); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( ((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (T__16 - 17)) | (1L << (T__27 - 17)) | (1L << (T__41 - 17)) | (1L << (T__71 - 17)) | (1L << (T__72 - 17)) | (1L << (T__73 - 17)) | (1L << (T__76 - 17)) | (1L << (T__79 - 17)))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (T__89 - 90)) | (1L << (T__90 - 90)) | (1L << (T__91 - 90)) | (1L << (T__92 - 90)) | (1L << (T__108 - 90)) | (1L << (T__132 - 90)) | (1L << (T__133 - 90)) | (1L << (T__138 - 90)) | (1L << (T__142 - 90)) | (1L << (T__148 - 90)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (T__156 - 157)) | (1L << (T__176 - 157)) | (1L << (T__178 - 157)) | (1L << (T__179 - 157)) | (1L << (T__186 - 157)) | (1L << (T__187 - 157)) | (1L << (T__200 - 157)) | (1L << (T__214 - 157)) | (1L << (T__215 - 157)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (T__221 - 222)) | (1L << (T__223 - 222)) | (1L << (T__226 - 222)) | (1L << (T__253 - 222)) | (1L << (T__254 - 222)) | (1L << (T__264 - 222)) | (1L << (T__269 - 222)) | (1L << (T__276 - 222)) | (1L << (T__277 - 222)) | (1L << (T__278 - 222)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)) | (1L << (NUM - 311)))) != 0) );
						setState(3493);
						match(T__28);
						}
						break;
					case 9:
						{
						_localctx = new MultTermProjectionTermContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3495);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(3496);
						match(T__0);
						setState(3497);
						match(T__27);
						setState(3498);
						match(T__182);
						setState(3499);
						qualid(0);
						setState(3501); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3500);
							below_term_ex_minus(0);
							}
							}
							setState(3503); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( ((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (T__16 - 17)) | (1L << (T__27 - 17)) | (1L << (T__41 - 17)) | (1L << (T__71 - 17)) | (1L << (T__72 - 17)) | (1L << (T__73 - 17)) | (1L << (T__76 - 17)) | (1L << (T__79 - 17)))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (T__89 - 90)) | (1L << (T__90 - 90)) | (1L << (T__91 - 90)) | (1L << (T__92 - 90)) | (1L << (T__108 - 90)) | (1L << (T__132 - 90)) | (1L << (T__133 - 90)) | (1L << (T__138 - 90)) | (1L << (T__142 - 90)) | (1L << (T__148 - 90)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (T__156 - 157)) | (1L << (T__176 - 157)) | (1L << (T__178 - 157)) | (1L << (T__179 - 157)) | (1L << (T__186 - 157)) | (1L << (T__187 - 157)) | (1L << (T__200 - 157)) | (1L << (T__214 - 157)) | (1L << (T__215 - 157)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (T__221 - 222)) | (1L << (T__223 - 222)) | (1L << (T__226 - 222)) | (1L << (T__253 - 222)) | (1L << (T__254 - 222)) | (1L << (T__264 - 222)) | (1L << (T__269 - 222)) | (1L << (T__276 - 222)) | (1L << (T__277 - 222)) | (1L << (T__278 - 222)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)) | (1L << (NUM - 311)))) != 0) );
						setState(3505);
						match(T__28);
						}
						break;
					case 10:
						{
						_localctx = new SumOrSpecifContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3507);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(3508);
						match(ADD);
						setState(3509);
						match(T__41);
						setState(3510);
						term();
						setState(3511);
						match(T__43);
						}
						break;
					case 11:
						{
						_localctx = new ColGOpsTermContext(new Above_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term);
						setState(3513);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(3514);
						match(COLG);
						}
						break;
					}
					} 
				}
				setState(3519);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,359,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Above_term_ex_below_70Context extends ParserRuleContext {
		public Above_term_ex_below_70Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_above_term_ex_below_70; }
	 
		public Above_term_ex_below_70Context() { }
		public void copyFrom(Above_term_ex_below_70Context ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LineCalcOpsTermContext extends Above_term_ex_below_70Context {
		public Token op;
		public List<Above_term_ex_below_70Context> above_term_ex_below_70() {
			return getRuleContexts(Above_term_ex_below_70Context.class);
		}
		public Above_term_ex_below_70Context above_term_ex_below_70(int i) {
			return getRuleContext(Above_term_ex_below_70Context.class,i);
		}
		public TerminalNode SUB() { return getToken(coqParser.SUB, 0); }
		public TerminalNode ADD() { return getToken(coqParser.ADD, 0); }
		public TerminalNode ORB() { return getToken(coqParser.ORB, 0); }
		public LineCalcOpsTermContext(Above_term_ex_below_70Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLineCalcOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLineCalcOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLineCalcOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PointCalcAppOpsTermContext extends Above_term_ex_below_70Context {
		public Below_termContext below_term() {
			return getRuleContext(Below_termContext.class,0);
		}
		public List<Arg_bodyContext> arg_body() {
			return getRuleContexts(Arg_bodyContext.class);
		}
		public Arg_bodyContext arg_body(int i) {
			return getRuleContext(Arg_bodyContext.class,i);
		}
		public PointCalcAppOpsTermContext(Above_term_ex_below_70Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPointCalcAppOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPointCalcAppOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPointCalcAppOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BelowTermContext extends Above_term_ex_below_70Context {
		public Below_termContext below_term() {
			return getRuleContext(Below_termContext.class,0);
		}
		public BelowTermContext(Above_term_ex_below_70Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBelowTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBelowTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBelowTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ListOpsTermContext extends Above_term_ex_below_70Context {
		public Token op;
		public List<Above_term_ex_below_70Context> above_term_ex_below_70() {
			return getRuleContexts(Above_term_ex_below_70Context.class);
		}
		public Above_term_ex_below_70Context above_term_ex_below_70(int i) {
			return getRuleContext(Above_term_ex_below_70Context.class,i);
		}
		public TerminalNode LISTCONC() { return getToken(coqParser.LISTCONC, 0); }
		public TerminalNode LISTADD() { return getToken(coqParser.LISTADD, 0); }
		public ListOpsTermContext(Above_term_ex_below_70Context ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterListOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitListOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitListOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Above_term_ex_below_70Context above_term_ex_below_70() throws RecognitionException {
		return above_term_ex_below_70(0);
	}

	private Above_term_ex_below_70Context above_term_ex_below_70(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Above_term_ex_below_70Context _localctx = new Above_term_ex_below_70Context(_ctx, _parentState);
		Above_term_ex_below_70Context _prevctx = _localctx;
		int _startState = 140;
		enterRecursionRule(_localctx, 140, RULE_above_term_ex_below_70, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				_localctx = new PointCalcAppOpsTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3521);
				below_term();
				setState(3523); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3522);
						arg_body();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3525); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				_localctx = new BelowTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3527);
				below_term();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3538);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,363,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3536);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
					case 1:
						{
						_localctx = new ListOpsTermContext(new Above_term_ex_below_70Context(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term_ex_below_70);
						setState(3530);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3531);
						((ListOpsTermContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LISTADD || _la==LISTCONC) ) {
							((ListOpsTermContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3532);
						above_term_ex_below_70(4);
						}
						break;
					case 2:
						{
						_localctx = new LineCalcOpsTermContext(new Above_term_ex_below_70Context(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_above_term_ex_below_70);
						setState(3533);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3534);
						((LineCalcOpsTermContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (ADD - 313)) | (1L << (SUB - 313)) | (1L << (ORB - 313)))) != 0)) ) {
							((LineCalcOpsTermContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3535);
						above_term_ex_below_70(3);
						}
						break;
					}
					} 
				}
				setState(3540);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,363,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Below_termContext extends ParserRuleContext {
		public Below_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_below_term; }
	 
		public Below_termContext() { }
		public void copyFrom(Below_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class NegOpsTermContext extends Below_termContext {
		public TerminalNode SUB() { return getToken(coqParser.SUB, 0); }
		public Below_term_ex_minusContext below_term_ex_minus() {
			return getRuleContext(Below_term_ex_minusContext.class,0);
		}
		public NegOpsTermContext(Below_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNegOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNegOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNegOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BelowTermExMinusContext extends Below_termContext {
		public Below_term_ex_minusContext below_term_ex_minus() {
			return getRuleContext(Below_term_ex_minusContext.class,0);
		}
		public BelowTermExMinusContext(Below_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBelowTermExMinus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBelowTermExMinus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBelowTermExMinus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Below_termContext below_term() throws RecognitionException {
		Below_termContext _localctx = new Below_termContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_below_term);
		try {
			setState(3544);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUB:
				_localctx = new NegOpsTermContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3541);
				match(SUB);
				setState(3542);
				below_term_ex_minus(0);
				}
				break;
			case T__16:
			case T__27:
			case T__41:
			case T__71:
			case T__72:
			case T__73:
			case T__76:
			case T__79:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__108:
			case T__132:
			case T__133:
			case T__138:
			case T__142:
			case T__148:
			case T__156:
			case T__176:
			case T__178:
			case T__179:
			case T__186:
			case T__187:
			case T__200:
			case T__214:
			case T__215:
			case T__221:
			case T__223:
			case T__226:
			case T__253:
			case T__254:
			case T__264:
			case T__269:
			case T__276:
			case T__277:
			case T__278:
			case T__310:
			case T__311:
			case KeySOME:
			case IDENT:
			case NUM:
				_localctx = new BelowTermExMinusContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3543);
				below_term_ex_minus(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Below_term_ex_minusContext extends ParserRuleContext {
		public Below_term_ex_minusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_below_term_ex_minus; }
	 
		public Below_term_ex_minusContext() { }
		public void copyFrom(Below_term_ex_minusContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AtomicTermContext extends Below_term_ex_minusContext {
		public Atomic_termContext atomic_term() {
			return getRuleContext(Atomic_termContext.class,0);
		}
		public AtomicTermContext(Below_term_ex_minusContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtomicTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtomicTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtomicTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Sig2SpecifContext extends Below_term_ex_minusContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Sig2SpecifContext(Below_term_ex_minusContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSig2Specif(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSig2Specif(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSig2Specif(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SigTSpecifContext extends Below_term_ex_minusContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public SigTSpecifContext(Below_term_ex_minusContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSigTSpecif(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSigTSpecif(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSigTSpecif(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewTermContext extends Below_term_ex_minusContext {
		public Rew_termContext rew_term() {
			return getRuleContext(Rew_termContext.class,0);
		}
		public RewTermContext(Below_term_ex_minusContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRewTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRewTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRewTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PowOpsTermContext extends Below_term_ex_minusContext {
		public List<Below_term_ex_minusContext> below_term_ex_minus() {
			return getRuleContexts(Below_term_ex_minusContext.class);
		}
		public Below_term_ex_minusContext below_term_ex_minus(int i) {
			return getRuleContext(Below_term_ex_minusContext.class,i);
		}
		public TerminalNode POW() { return getToken(coqParser.POW, 0); }
		public PowOpsTermContext(Below_term_ex_minusContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPowOpsTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPowOpsTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPowOpsTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TypeTermContext extends Below_term_ex_minusContext {
		public Below_term_ex_minusContext below_term_ex_minus() {
			return getRuleContext(Below_term_ex_minusContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TypeTermContext(Below_term_ex_minusContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTypeTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTypeTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTypeTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MatchTermContext extends Below_term_ex_minusContext {
		public List<Match_itemContext> match_item() {
			return getRuleContexts(Match_itemContext.class);
		}
		public Match_itemContext match_item(int i) {
			return getRuleContext(Match_itemContext.class,i);
		}
		public Return_typeContext return_type() {
			return getRuleContext(Return_typeContext.class,0);
		}
		public List<EquationContext> equation() {
			return getRuleContexts(EquationContext.class);
		}
		public EquationContext equation(int i) {
			return getRuleContext(EquationContext.class,i);
		}
		public MatchTermContext(Below_term_ex_minusContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMatchTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMatchTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMatchTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SumBoolSpecifContext extends Below_term_ex_minusContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public SumBoolSpecifContext(Below_term_ex_minusContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSumBoolSpecif(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSumBoolSpecif(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSumBoolSpecif(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SigT2SpecifContext extends Below_term_ex_minusContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public SigT2SpecifContext(Below_term_ex_minusContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSigT2Specif(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSigT2Specif(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSigT2Specif(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SigSpecifContext extends Below_term_ex_minusContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public SigSpecifContext(Below_term_ex_minusContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSigSpecif(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSigSpecif(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSigSpecif(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Below_term_ex_minusContext below_term_ex_minus() throws RecognitionException {
		return below_term_ex_minus(0);
	}

	private Below_term_ex_minusContext below_term_ex_minus(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Below_term_ex_minusContext _localctx = new Below_term_ex_minusContext(_ctx, _parentState);
		Below_term_ex_minusContext _prevctx = _localctx;
		int _startState = 144;
		enterRecursionRule(_localctx, 144, RULE_below_term_ex_minus, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				_localctx = new SumBoolSpecifContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3547);
				match(T__41);
				setState(3548);
				term();
				setState(3549);
				match(T__43);
				setState(3550);
				match(ADD);
				setState(3551);
				match(T__41);
				setState(3552);
				term();
				setState(3553);
				match(T__43);
				}
				break;
			case 2:
				{
				_localctx = new SigSpecifContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3555);
				match(T__41);
				setState(3556);
				ident();
				setState(3559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(3557);
					match(COLON);
					setState(3558);
					term();
					}
				}

				setState(3561);
				match(T__42);
				setState(3562);
				term();
				setState(3563);
				match(T__43);
				}
				break;
			case 3:
				{
				_localctx = new Sig2SpecifContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3565);
				match(T__41);
				setState(3566);
				ident();
				setState(3567);
				match(COLON);
				setState(3568);
				term();
				setState(3569);
				match(T__42);
				setState(3570);
				term();
				setState(3571);
				match(T__222);
				setState(3572);
				term();
				setState(3573);
				match(T__43);
				}
				break;
			case 4:
				{
				_localctx = new SigTSpecifContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3575);
				match(T__41);
				setState(3576);
				ident();
				setState(3577);
				match(COLON);
				setState(3578);
				term();
				setState(3579);
				match(T__222);
				setState(3580);
				term();
				setState(3581);
				match(T__43);
				}
				break;
			case 5:
				{
				_localctx = new SigT2SpecifContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3583);
				match(T__41);
				setState(3584);
				ident();
				setState(3585);
				match(COLON);
				setState(3586);
				term();
				setState(3587);
				match(T__222);
				setState(3588);
				term();
				setState(3589);
				match(T__222);
				setState(3590);
				term();
				setState(3591);
				match(T__43);
				}
				break;
			case 6:
				{
				_localctx = new MatchTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3593);
				match(T__226);
				setState(3594);
				match_item();
				setState(3599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(3595);
					match(T__111);
					setState(3596);
					match_item();
					}
					}
					setState(3601);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__280) {
					{
					setState(3602);
					return_type();
					}
				}

				setState(3605);
				match(T__24);
				setState(3621);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3610);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__42) {
						{
						{
						setState(3606);
						match(T__42);
						setState(3607);
						equation();
						}
						}
						setState(3612);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					{
					setState(3613);
					equation();
					setState(3618);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__42) {
						{
						{
						setState(3614);
						match(T__42);
						setState(3615);
						equation();
						}
						}
						setState(3620);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				}
				setState(3623);
				match(T__246);
				}
				break;
			case 7:
				{
				_localctx = new RewTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3625);
				rew_term();
				}
				break;
			case 8:
				{
				_localctx = new AtomicTermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3626);
				atomic_term();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3637);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,373,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3635);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
					case 1:
						{
						_localctx = new PowOpsTermContext(new Below_term_ex_minusContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_below_term_ex_minus);
						setState(3629);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3630);
						match(POW);
						setState(3631);
						below_term_ex_minus(6);
						}
						break;
					case 2:
						{
						_localctx = new TypeTermContext(new Below_term_ex_minusContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_below_term_ex_minus);
						setState(3632);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3633);
						match(T__123);
						setState(3634);
						ident();
						}
						break;
					}
					} 
				}
				setState(3639);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,373,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Atomic_termContext extends ParserRuleContext {
		public Atomic_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atomic_term; }
	 
		public Atomic_termContext() { }
		public void copyFrom(Atomic_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnderscoreTermContext extends Atomic_termContext {
		public UnderscoreTermContext(Atomic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnderscoreTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnderscoreTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnderscoreTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SortTermContext extends Atomic_termContext {
		public SortContext sort() {
			return getRuleContext(SortContext.class,0);
		}
		public SortTermContext(Atomic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSortTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSortTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSortTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BracedTermContext extends Atomic_termContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public BracedTermContext(Atomic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBracedTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBracedTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBracedTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QualidTermContext extends Atomic_termContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public QualidTermContext(Atomic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQualidTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQualidTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQualidTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PairTermContext extends Atomic_termContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public PairTermContext(Atomic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPairTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPairTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPairTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MetaVariableTermContext extends Atomic_termContext {
		public MetavariableContext metavariable() {
			return getRuleContext(MetavariableContext.class,0);
		}
		public MetaVariableTermContext(Atomic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMetaVariableTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMetaVariableTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMetaVariableTerm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumTermContext extends Atomic_termContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumTermContext(Atomic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Atomic_termContext atomic_term() throws RecognitionException {
		Atomic_termContext _localctx = new Atomic_termContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_atomic_term);
		try {
			setState(3655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				_localctx = new QualidTermContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3640);
				qualid(0);
				}
				break;
			case 2:
				_localctx = new SortTermContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3641);
				sort();
				}
				break;
			case 3:
				_localctx = new MetaVariableTermContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3642);
				metavariable();
				}
				break;
			case 4:
				_localctx = new NumTermContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3643);
				match(NUM);
				}
				break;
			case 5:
				_localctx = new UnderscoreTermContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3644);
				match(T__221);
				}
				break;
			case 6:
				_localctx = new BracedTermContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3645);
				match(T__27);
				setState(3646);
				term();
				setState(3647);
				match(T__28);
				}
				break;
			case 7:
				_localctx = new PairTermContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3649);
				match(T__27);
				setState(3650);
				term();
				setState(3651);
				match(T__111);
				setState(3652);
				term();
				setState(3653);
				match(T__28);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rew_termContext extends ParserRuleContext {
		public Rew_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rew_term; }
	 
		public Rew_termContext() { }
		public void copyFrom(Rew_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LeftArrowBracedRewContext extends Rew_termContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Rew2_termContext rew2_term() {
			return getRuleContext(Rew2_termContext.class,0);
		}
		public LeftArrowBracedRewContext(Rew_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLeftArrowBracedRew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLeftArrowBracedRew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLeftArrowBracedRew(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BracedRewContext extends Rew_termContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Rew2_termContext rew2_term() {
			return getRuleContext(Rew2_termContext.class,0);
		}
		public BracedRewContext(Rew_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBracedRew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBracedRew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBracedRew(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LeftArrowRewContext extends Rew_termContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Rew2_termContext rew2_term() {
			return getRuleContext(Rew2_termContext.class,0);
		}
		public LeftArrowRewContext(Rew_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLeftArrowRew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLeftArrowRew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLeftArrowRew(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RightArrowBracedRewContext extends Rew_termContext {
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Rew2_termContext rew2_term() {
			return getRuleContext(Rew2_termContext.class,0);
		}
		public RightArrowBracedRewContext(Rew_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRightArrowBracedRew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRightArrowBracedRew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRightArrowBracedRew(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewContext extends Rew_termContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Rew2_termContext rew2_term() {
			return getRuleContext(Rew2_termContext.class,0);
		}
		public RewContext(Rew_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRew(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RightArrowRewContext extends Rew_termContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Rew2_termContext rew2_term() {
			return getRuleContext(Rew2_termContext.class,0);
		}
		public RightArrowRewContext(Rew_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRightArrowRew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRightArrowRew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRightArrowRew(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rew_termContext rew_term() throws RecognitionException {
		Rew_termContext _localctx = new Rew_termContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_rew_term);
		try {
			setState(3700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				_localctx = new RewContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3657);
				match(T__276);
				setState(3658);
				term();
				setState(3659);
				match(T__82);
				setState(3660);
				rew2_term();
				}
				break;
			case 2:
				_localctx = new BracedRewContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3662);
				match(T__276);
				setState(3663);
				match(T__13);
				setState(3664);
				term();
				setState(3665);
				match(T__14);
				setState(3666);
				term();
				setState(3667);
				match(T__82);
				setState(3668);
				rew2_term();
				}
				break;
			case 3:
				_localctx = new LeftArrowRewContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3670);
				match(T__276);
				setState(3671);
				match(T__78);
				setState(3672);
				term();
				setState(3673);
				match(T__82);
				setState(3674);
				rew2_term();
				}
				break;
			case 4:
				_localctx = new LeftArrowBracedRewContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3676);
				match(T__276);
				setState(3677);
				match(T__78);
				setState(3678);
				match(T__13);
				setState(3679);
				term();
				setState(3680);
				match(T__14);
				setState(3681);
				term();
				setState(3682);
				match(T__82);
				setState(3683);
				rew2_term();
				}
				break;
			case 5:
				_localctx = new RightArrowRewContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3685);
				match(T__276);
				setState(3686);
				match(IMPLIES);
				setState(3687);
				term();
				setState(3688);
				match(T__82);
				setState(3689);
				rew2_term();
				}
				break;
			case 6:
				_localctx = new RightArrowBracedRewContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3691);
				match(T__276);
				setState(3692);
				match(IMPLIES);
				setState(3693);
				match(T__13);
				setState(3694);
				term();
				setState(3695);
				match(T__14);
				setState(3696);
				term();
				setState(3697);
				match(T__82);
				setState(3698);
				rew2_term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rew2_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Rew2_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rew2_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRew2_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRew2_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRew2_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rew2_termContext rew2_term() throws RecognitionException {
		Rew2_termContext _localctx = new Rew2_termContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_rew2_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3702);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgContext extends ParserRuleContext {
		public ArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg; }
	 
		public ArgContext() { }
		public void copyFrom(ArgContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IdentAssignArgContext extends ArgContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentAssignArgContext(ArgContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdentAssignArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdentAssignArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdentAssignArg(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SingleTermArgContext extends ArgContext {
		public Below_term_ex_minusContext below_term_ex_minus() {
			return getRuleContext(Below_term_ex_minusContext.class,0);
		}
		public SingleTermArgContext(ArgContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSingleTermArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSingleTermArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSingleTermArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgContext arg() throws RecognitionException {
		ArgContext _localctx = new ArgContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_arg);
		try {
			setState(3711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				_localctx = new SingleTermArgContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3704);
				below_term_ex_minus(0);
				}
				break;
			case 2:
				_localctx = new IdentAssignArgContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3705);
				match(T__27);
				setState(3706);
				ident();
				setState(3707);
				match(T__15);
				setState(3708);
				term();
				setState(3709);
				match(T__28);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_bodyContext extends ParserRuleContext {
		public Token op;
		public Below_termContext below_term() {
			return getRuleContext(Below_termContext.class,0);
		}
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public TerminalNode MUL() { return getToken(coqParser.MUL, 0); }
		public TerminalNode DIV() { return getToken(coqParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(coqParser.MOD, 0); }
		public TerminalNode MOD2() { return getToken(coqParser.MOD2, 0); }
		public Arg_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterArg_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitArg_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitArg_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_bodyContext arg_body() throws RecognitionException {
		Arg_bodyContext _localctx = new Arg_bodyContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_arg_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3716);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MUL:
			case DIV:
			case MOD:
			case MOD2:
				{
				setState(3713);
				((Arg_bodyContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (MUL - 316)) | (1L << (DIV - 316)) | (1L << (MOD - 316)) | (1L << (MOD2 - 316)))) != 0)) ) {
					((Arg_bodyContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3714);
				below_term();
				}
				break;
			case T__16:
			case T__27:
			case T__41:
			case T__71:
			case T__72:
			case T__73:
			case T__76:
			case T__79:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__108:
			case T__132:
			case T__133:
			case T__138:
			case T__142:
			case T__148:
			case T__156:
			case T__176:
			case T__178:
			case T__179:
			case T__186:
			case T__187:
			case T__200:
			case T__214:
			case T__215:
			case T__221:
			case T__223:
			case T__226:
			case T__253:
			case T__254:
			case T__264:
			case T__269:
			case T__276:
			case T__277:
			case T__278:
			case T__310:
			case T__311:
			case KeySOME:
			case IDENT:
			case NUM:
				{
				setState(3715);
				arg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BindersContext extends ParserRuleContext {
		public BindersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binders; }
	 
		public BindersContext() { }
		public void copyFrom(BindersContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MultipleBindersContext extends BindersContext {
		public List<BinderContext> binder() {
			return getRuleContexts(BinderContext.class);
		}
		public BinderContext binder(int i) {
			return getRuleContext(BinderContext.class,i);
		}
		public MultipleBindersContext(BindersContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMultipleBinders(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMultipleBinders(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMultipleBinders(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SingleBinderContext extends BindersContext {
		public Binders_with_one_paramContext binders_with_one_param() {
			return getRuleContext(Binders_with_one_paramContext.class,0);
		}
		public SingleBinderContext(BindersContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSingleBinder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSingleBinder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSingleBinder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BindersContext binders() throws RecognitionException {
		BindersContext _localctx = new BindersContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_binders);
		try {
			int _alt;
			setState(3726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				_localctx = new SingleBinderContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3718);
				binders_with_one_param();
				}
				break;
			case 2:
				_localctx = new MultipleBindersContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3719);
				binder();
				setState(3723);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,378,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3720);
						binder();
						}
						} 
					}
					setState(3725);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,378,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binders_with_one_paramContext extends ParserRuleContext {
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Binders_with_one_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binders_with_one_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBinders_with_one_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBinders_with_one_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBinders_with_one_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Binders_with_one_paramContext binders_with_one_param() throws RecognitionException {
		Binders_with_one_paramContext _localctx = new Binders_with_one_paramContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_binders_with_one_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3728);
			name();
			setState(3732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				{
				setState(3729);
				name();
				}
				}
				setState(3734);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3735);
			match(COLON);
			setState(3736);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinderContext extends ParserRuleContext {
		public BinderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binder; }
	 
		public BinderContext() { }
		public void copyFrom(BinderContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MultipleNamesBinderContext extends BinderContext {
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public MultipleNamesBinderContext(BinderContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMultipleNamesBinder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMultipleNamesBinder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMultipleNamesBinder(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BracedNameOptionalBinderContext extends BinderContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public BracedNameOptionalBinderContext(BinderContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBracedNameOptionalBinder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBracedNameOptionalBinder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBracedNameOptionalBinder(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SingleNameBinderContext extends BinderContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SingleNameBinderContext(BinderContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSingleNameBinder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSingleNameBinder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSingleNameBinder(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BracedNameBinderContext extends BinderContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public BracedNameBinderContext(BinderContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBracedNameBinder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBracedNameBinder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBracedNameBinder(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ImplicitBinderContext extends BinderContext {
		public ImplicitArgsContext implicitArgs() {
			return getRuleContext(ImplicitArgsContext.class,0);
		}
		public ImplicitBinderContext(BinderContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterImplicitBinder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitImplicitBinder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitImplicitBinder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinderContext binder() throws RecognitionException {
		BinderContext _localctx = new BinderContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_binder);
		int _la;
		try {
			setState(3766);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				_localctx = new SingleNameBinderContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3738);
				name();
				}
				break;
			case 2:
				_localctx = new MultipleNamesBinderContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3739);
				match(T__27);
				setState(3740);
				name();
				setState(3744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					{
					setState(3741);
					name();
					}
					}
					setState(3746);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3747);
				match(COLON);
				setState(3748);
				term();
				setState(3749);
				match(T__28);
				}
				break;
			case 3:
				_localctx = new BracedNameBinderContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3751);
				match(T__27);
				setState(3752);
				name();
				setState(3753);
				match(T__15);
				setState(3754);
				term();
				setState(3755);
				match(T__28);
				}
				break;
			case 4:
				_localctx = new BracedNameOptionalBinderContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3757);
				match(T__27);
				setState(3758);
				name();
				setState(3759);
				match(COLON);
				setState(3760);
				term();
				setState(3761);
				match(T__15);
				setState(3762);
				term();
				setState(3763);
				match(T__28);
				}
				break;
			case 5:
				_localctx = new ImplicitBinderContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3765);
				implicitArgs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
	 
		public NameContext() { }
		public void copyFrom(NameContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleNameContext extends NameContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public SimpleNameContext(NameContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSimpleName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSimpleName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSimpleName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnderscoreNameContext extends NameContext {
		public UnderscoreNameContext(NameContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnderscoreName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnderscoreName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnderscoreName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_name);
		try {
			setState(3770);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__71:
			case T__72:
			case T__73:
			case T__76:
			case T__79:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__108:
			case T__132:
			case T__138:
			case T__142:
			case T__148:
			case T__156:
			case T__176:
			case T__178:
			case T__179:
			case T__186:
			case T__187:
			case T__200:
			case T__214:
			case T__215:
			case T__223:
			case T__253:
			case T__254:
			case T__264:
			case T__269:
			case T__310:
			case T__311:
			case KeySOME:
			case IDENT:
				_localctx = new SimpleNameContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3768);
				ident();
				}
				break;
			case T__221:
				_localctx = new UnderscoreNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3769);
				match(T__221);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualidContext extends ParserRuleContext {
		public QualidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualid; }
	 
		public QualidContext() { }
		public void copyFrom(QualidContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SingleQualidBinderContext extends QualidContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public SingleQualidBinderContext(QualidContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSingleQualidBinder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSingleQualidBinder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSingleQualidBinder(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AccessQualidBinderContext extends QualidContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public TerminalNode ACCESS_IDENT() { return getToken(coqParser.ACCESS_IDENT, 0); }
		public AccessQualidBinderContext(QualidContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAccessQualidBinder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAccessQualidBinder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAccessQualidBinder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualidContext qualid() throws RecognitionException {
		return qualid(0);
	}

	private QualidContext qualid(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QualidContext _localctx = new QualidContext(_ctx, _parentState);
		QualidContext _prevctx = _localctx;
		int _startState = 164;
		enterRecursionRule(_localctx, 164, RULE_qualid, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SingleQualidBinderContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(3773);
			ident();
			}
			_ctx.stop = _input.LT(-1);
			setState(3779);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,384,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AccessQualidBinderContext(new QualidContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_qualid);
					setState(3775);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3776);
					match(ACCESS_IDENT);
					}
					} 
				}
				setState(3781);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,384,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class MetavariableContext extends ParserRuleContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public MetavariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metavariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMetavariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMetavariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMetavariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MetavariableContext metavariable() throws RecognitionException {
		MetavariableContext _localctx = new MetavariableContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_metavariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3782);
			match(T__133);
			setState(3783);
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortContext extends ParserRuleContext {
		public SortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort; }
	 
		public SortContext() { }
		public void copyFrom(SortContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SortTypeContext extends SortContext {
		public SortTypeContext(SortContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSortType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSortType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSortType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SortSetContext extends SortContext {
		public SortSetContext(SortContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSortSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSortSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSortSet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SortPropContext extends SortContext {
		public SortPropContext(SortContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSortProp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSortProp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSortProp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortContext sort() throws RecognitionException {
		SortContext _localctx = new SortContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_sort);
		try {
			setState(3788);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__277:
				_localctx = new SortPropContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3785);
				match(T__277);
				}
				break;
			case T__278:
				_localctx = new SortSetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3786);
				match(T__278);
				}
				break;
			case T__16:
				_localctx = new SortTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3787);
				match(T__16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fix_bodiesContext extends ParserRuleContext {
		public Fix_bodiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fix_bodies; }
	 
		public Fix_bodiesContext() { }
		public void copyFrom(Fix_bodiesContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SingleFixBodyContext extends Fix_bodiesContext {
		public Fix_bodyContext fix_body() {
			return getRuleContext(Fix_bodyContext.class,0);
		}
		public SingleFixBodyContext(Fix_bodiesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSingleFixBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSingleFixBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSingleFixBody(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultipleFixBodiesContext extends Fix_bodiesContext {
		public List<Fix_bodyContext> fix_body() {
			return getRuleContexts(Fix_bodyContext.class);
		}
		public Fix_bodyContext fix_body(int i) {
			return getRuleContext(Fix_bodyContext.class,i);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public MultipleFixBodiesContext(Fix_bodiesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMultipleFixBodies(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMultipleFixBodies(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMultipleFixBodies(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fix_bodiesContext fix_bodies() throws RecognitionException {
		Fix_bodiesContext _localctx = new Fix_bodiesContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_fix_bodies);
		int _la;
		try {
			setState(3802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				_localctx = new SingleFixBodyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3790);
				fix_body();
				}
				break;
			case 2:
				_localctx = new MultipleFixBodiesContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3791);
				fix_body();
				setState(3796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__24) {
					{
					{
					setState(3792);
					match(T__24);
					setState(3793);
					fix_body();
					}
					}
					setState(3798);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3799);
				match(T__279);
				setState(3800);
				ident();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cofix_bodiesContext extends ParserRuleContext {
		public Cofix_bodiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cofix_bodies; }
	 
		public Cofix_bodiesContext() { }
		public void copyFrom(Cofix_bodiesContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MultipleCoFixBodiesContext extends Cofix_bodiesContext {
		public List<Cofix_bodyContext> cofix_body() {
			return getRuleContexts(Cofix_bodyContext.class);
		}
		public Cofix_bodyContext cofix_body(int i) {
			return getRuleContext(Cofix_bodyContext.class,i);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public MultipleCoFixBodiesContext(Cofix_bodiesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMultipleCoFixBodies(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMultipleCoFixBodies(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMultipleCoFixBodies(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SingleCoFixBodyContext extends Cofix_bodiesContext {
		public Cofix_bodyContext cofix_body() {
			return getRuleContext(Cofix_bodyContext.class,0);
		}
		public SingleCoFixBodyContext(Cofix_bodiesContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSingleCoFixBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSingleCoFixBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSingleCoFixBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cofix_bodiesContext cofix_bodies() throws RecognitionException {
		Cofix_bodiesContext _localctx = new Cofix_bodiesContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_cofix_bodies);
		int _la;
		try {
			setState(3816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				_localctx = new SingleCoFixBodyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3804);
				cofix_body();
				}
				break;
			case 2:
				_localctx = new MultipleCoFixBodiesContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3805);
				cofix_body();
				setState(3810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__24) {
					{
					{
					setState(3806);
					match(T__24);
					setState(3807);
					cofix_body();
					}
					}
					setState(3812);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3813);
				match(T__279);
				setState(3814);
				ident();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fix_bodyContext extends ParserRuleContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public Fix_body_termContext fix_body_term() {
			return getRuleContext(Fix_body_termContext.class,0);
		}
		public AnnotationContext annotation() {
			return getRuleContext(AnnotationContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Fix_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fix_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFix_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFix_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFix_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fix_bodyContext fix_body() throws RecognitionException {
		Fix_bodyContext _localctx = new Fix_bodyContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_fix_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3818);
			ident();
			setState(3819);
			binders();
			setState(3821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__41) {
				{
				setState(3820);
				annotation();
				}
			}

			setState(3825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(3823);
				match(COLON);
				setState(3824);
				term();
				}
			}

			setState(3827);
			match(T__15);
			setState(3828);
			fix_body_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cofix_bodyContext extends ParserRuleContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public Cofix_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cofix_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCofix_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCofix_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCofix_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cofix_bodyContext cofix_body() throws RecognitionException {
		Cofix_bodyContext _localctx = new Cofix_bodyContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_cofix_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3830);
			ident();
			setState(3832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(3831);
				binders();
				}
			}

			setState(3836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(3834);
				match(COLON);
				setState(3835);
				term();
				}
			}

			setState(3838);
			match(T__15);
			setState(3839);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnnotationContext extends ParserRuleContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_annotation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAnnotation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAnnotation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAnnotation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnnotationContext annotation() throws RecognitionException {
		AnnotationContext _localctx = new AnnotationContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_annotation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			match(T__41);
			setState(3842);
			match(T__158);
			setState(3843);
			ident();
			setState(3844);
			match(T__43);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_itemContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<PatternContext> pattern() {
			return getRuleContexts(PatternContext.class);
		}
		public PatternContext pattern(int i) {
			return getRuleContext(PatternContext.class,i);
		}
		public Match_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMatch_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMatch_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMatch_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_itemContext match_item() throws RecognitionException {
		Match_itemContext _localctx = new Match_itemContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_match_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3846);
			term();
			setState(3849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__137) {
				{
				setState(3847);
				match(T__137);
				setState(3848);
				name();
				}
			}

			setState(3859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__82) {
				{
				setState(3851);
				match(T__82);
				setState(3852);
				qualid(0);
				setState(3856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__27 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__182 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)) | (1L << (NUM - 311)))) != 0)) {
					{
					{
					setState(3853);
					pattern(0);
					}
					}
					setState(3858);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dep_ret_typeContext extends ParserRuleContext {
		public Return_typeContext return_type() {
			return getRuleContext(Return_typeContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Dep_ret_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dep_ret_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDep_ret_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDep_ret_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDep_ret_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dep_ret_typeContext dep_ret_type() throws RecognitionException {
		Dep_ret_typeContext _localctx = new Dep_ret_typeContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_dep_ret_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__137) {
				{
				setState(3861);
				match(T__137);
				setState(3862);
				name();
				}
			}

			setState(3865);
			return_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_typeContext extends ParserRuleContext {
		public Return_termContext return_term() {
			return getRuleContext(Return_termContext.class,0);
		}
		public Return_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterReturn_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitReturn_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitReturn_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_typeContext return_type() throws RecognitionException {
		Return_typeContext _localctx = new Return_typeContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_return_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3867);
			match(T__280);
			setState(3868);
			return_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EquationContext extends ParserRuleContext {
		public List<Mult_patternContext> mult_pattern() {
			return getRuleContexts(Mult_patternContext.class);
		}
		public Mult_patternContext mult_pattern(int i) {
			return getRuleContext(Mult_patternContext.class,i);
		}
		public Equation_termContext equation_term() {
			return getRuleContext(Equation_termContext.class,0);
		}
		public EquationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEquation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEquation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEquation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EquationContext equation() throws RecognitionException {
		EquationContext _localctx = new EquationContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_equation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3870);
			mult_pattern();
			setState(3875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__42) {
				{
				{
				setState(3871);
				match(T__42);
				setState(3872);
				mult_pattern();
				}
				}
				setState(3877);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3878);
			match(T__243);
			setState(3879);
			equation_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mult_patternContext extends ParserRuleContext {
		public List<PatternContext> pattern() {
			return getRuleContexts(PatternContext.class);
		}
		public PatternContext pattern(int i) {
			return getRuleContext(PatternContext.class,i);
		}
		public Mult_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mult_pattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMult_pattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMult_pattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMult_pattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mult_patternContext mult_pattern() throws RecognitionException {
		Mult_patternContext _localctx = new Mult_patternContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_mult_pattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3881);
			pattern(0);
			setState(3886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__111) {
				{
				{
				setState(3882);
				match(T__111);
				setState(3883);
				pattern(0);
				}
				}
				setState(3888);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PatternContext extends ParserRuleContext {
		public PatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern; }
	 
		public PatternContext() { }
		public void copyFrom(PatternContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnderscorePatternContext extends PatternContext {
		public UnderscorePatternContext(PatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnderscorePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnderscorePattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnderscorePattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QualidPatternContext extends PatternContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public QualidPatternContext(PatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQualidPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQualidPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQualidPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumPatternContext extends PatternContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumPatternContext(PatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ListOpsPatternContext extends PatternContext {
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public ListOpsPatternContext(PatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterListOpsPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitListOpsPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitListOpsPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefMultiplePatternContext extends PatternContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<Pattern_without_implicitsContext> pattern_without_implicits() {
			return getRuleContexts(Pattern_without_implicitsContext.class);
		}
		public Pattern_without_implicitsContext pattern_without_implicits(int i) {
			return getRuleContext(Pattern_without_implicitsContext.class,i);
		}
		public DefMultiplePatternContext(PatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDefMultiplePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDefMultiplePattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDefMultiplePattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PercOpsPatternContext extends PatternContext {
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public PercOpsPatternContext(PatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPercOpsPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPercOpsPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPercOpsPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OrMultiplePatternContext extends PatternContext {
		public List<Or_patternContext> or_pattern() {
			return getRuleContexts(Or_patternContext.class);
		}
		public Or_patternContext or_pattern(int i) {
			return getRuleContext(Or_patternContext.class,i);
		}
		public OrMultiplePatternContext(PatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterOrMultiplePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitOrMultiplePattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitOrMultiplePattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtDefMultiplePatternContext extends PatternContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public List<Pattern_without_implicitsContext> pattern_without_implicits() {
			return getRuleContexts(Pattern_without_implicitsContext.class);
		}
		public Pattern_without_implicitsContext pattern_without_implicits(int i) {
			return getRuleContext(Pattern_without_implicitsContext.class,i);
		}
		public AtDefMultiplePatternContext(PatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAtDefMultiplePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAtDefMultiplePattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAtDefMultiplePattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsOpsPatternContext extends PatternContext {
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public AsOpsPatternContext(PatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsOpsPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsOpsPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsOpsPattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PatternContext pattern() throws RecognitionException {
		return pattern(0);
	}

	private PatternContext pattern(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PatternContext _localctx = new PatternContext(_ctx, _parentState);
		PatternContext _prevctx = _localctx;
		int _startState = 190;
		enterRecursionRule(_localctx, 190, RULE_pattern, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				_localctx = new DefMultiplePatternContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3890);
				qualid(0);
				setState(3891);
				pattern_without_implicits();
				setState(3895);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3892);
						pattern_without_implicits();
						}
						} 
					}
					setState(3897);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
				}
				}
				break;
			case 2:
				{
				_localctx = new AtDefMultiplePatternContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3898);
				match(T__182);
				setState(3899);
				qualid(0);
				setState(3900);
				pattern_without_implicits();
				setState(3904);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3901);
						pattern_without_implicits();
						}
						} 
					}
					setState(3906);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
				}
				}
				break;
			case 3:
				{
				_localctx = new QualidPatternContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3907);
				qualid(0);
				}
				break;
			case 4:
				{
				_localctx = new UnderscorePatternContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3908);
				match(T__221);
				}
				break;
			case 5:
				{
				_localctx = new NumPatternContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3909);
				match(NUM);
				}
				break;
			case 6:
				{
				_localctx = new OrMultiplePatternContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3910);
				match(T__27);
				setState(3911);
				or_pattern();
				setState(3916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(3912);
					match(T__111);
					setState(3913);
					or_pattern();
					}
					}
					setState(3918);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3919);
				match(T__28);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3934);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,405,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3932);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
					case 1:
						{
						_localctx = new AsOpsPatternContext(new PatternContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_pattern);
						setState(3923);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3924);
						match(T__137);
						setState(3925);
						ident();
						}
						break;
					case 2:
						{
						_localctx = new PercOpsPatternContext(new PatternContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_pattern);
						setState(3926);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3927);
						match(T__123);
						setState(3928);
						ident();
						}
						break;
					case 3:
						{
						_localctx = new ListOpsPatternContext(new PatternContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_pattern);
						setState(3929);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3930);
						match(LISTCONC);
						setState(3931);
						ident();
						}
						break;
					}
					} 
				}
				setState(3936);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,405,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Pattern_without_implicitsContext extends ParserRuleContext {
		public Pattern_without_implicitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern_without_implicits; }
	 
		public Pattern_without_implicitsContext() { }
		public void copyFrom(Pattern_without_implicitsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnderscorePatternImplContext extends Pattern_without_implicitsContext {
		public UnderscorePatternImplContext(Pattern_without_implicitsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterUnderscorePatternImpl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitUnderscorePatternImpl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitUnderscorePatternImpl(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BracedPatternContext extends Pattern_without_implicitsContext {
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public BracedPatternContext(Pattern_without_implicitsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBracedPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBracedPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBracedPattern(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QualidPatternImplContext extends Pattern_without_implicitsContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public QualidPatternImplContext(Pattern_without_implicitsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQualidPatternImpl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQualidPatternImpl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQualidPatternImpl(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OrMultiplePatternImplContext extends Pattern_without_implicitsContext {
		public List<Or_patternContext> or_pattern() {
			return getRuleContexts(Or_patternContext.class);
		}
		public Or_patternContext or_pattern(int i) {
			return getRuleContext(Or_patternContext.class,i);
		}
		public OrMultiplePatternImplContext(Pattern_without_implicitsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterOrMultiplePatternImpl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitOrMultiplePatternImpl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitOrMultiplePatternImpl(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PercOpsPatternImplContext extends Pattern_without_implicitsContext {
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public PercOpsPatternImplContext(Pattern_without_implicitsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPercOpsPatternImpl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPercOpsPatternImpl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPercOpsPatternImpl(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsOpsPatternImplContext extends Pattern_without_implicitsContext {
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public AsOpsPatternImplContext(Pattern_without_implicitsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAsOpsPatternImpl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAsOpsPatternImpl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAsOpsPatternImpl(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumPatternImplContext extends Pattern_without_implicitsContext {
		public TerminalNode NUM() { return getToken(coqParser.NUM, 0); }
		public NumPatternImplContext(Pattern_without_implicitsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterNumPatternImpl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitNumPatternImpl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitNumPatternImpl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pattern_without_implicitsContext pattern_without_implicits() throws RecognitionException {
		Pattern_without_implicitsContext _localctx = new Pattern_without_implicitsContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_pattern_without_implicits);
		int _la;
		try {
			setState(3963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				_localctx = new AsOpsPatternImplContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3937);
				pattern(0);
				setState(3938);
				match(T__137);
				setState(3939);
				ident();
				}
				break;
			case 2:
				_localctx = new PercOpsPatternImplContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3941);
				pattern(0);
				setState(3942);
				match(T__123);
				setState(3943);
				ident();
				}
				break;
			case 3:
				_localctx = new QualidPatternImplContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3945);
				qualid(0);
				}
				break;
			case 4:
				_localctx = new UnderscorePatternImplContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3946);
				match(T__221);
				}
				break;
			case 5:
				_localctx = new NumPatternImplContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3947);
				match(NUM);
				}
				break;
			case 6:
				_localctx = new BracedPatternContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3948);
				match(T__27);
				setState(3949);
				pattern(0);
				setState(3950);
				match(T__28);
				}
				break;
			case 7:
				_localctx = new OrMultiplePatternImplContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3952);
				match(T__27);
				setState(3953);
				or_pattern();
				setState(3958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__111) {
					{
					{
					setState(3954);
					match(T__111);
					setState(3955);
					or_pattern();
					}
					}
					setState(3960);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3961);
				match(T__28);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Or_patternContext extends ParserRuleContext {
		public List<PatternContext> pattern() {
			return getRuleContexts(PatternContext.class);
		}
		public PatternContext pattern(int i) {
			return getRuleContext(PatternContext.class,i);
		}
		public Or_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_or_pattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterOr_pattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitOr_pattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitOr_pattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Or_patternContext or_pattern() throws RecognitionException {
		Or_patternContext _localctx = new Or_patternContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_or_pattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3965);
			pattern(0);
			setState(3970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__42) {
				{
				{
				setState(3966);
				match(T__42);
				setState(3967);
				pattern(0);
				}
				}
				setState(3972);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exists_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Exists_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exists_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExists_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExists_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExists_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exists_termContext exists_term() throws RecognitionException {
		Exists_termContext _localctx = new Exists_termContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_exists_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3973);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Return_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterReturn_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitReturn_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitReturn_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_termContext return_term() throws RecognitionException {
		Return_termContext _localctx = new Return_termContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_return_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3975);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equation_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Equation_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equation_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEquation_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEquation_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEquation_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equation_termContext equation_term() throws RecognitionException {
		Equation_termContext _localctx = new Equation_termContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_equation_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3977);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Forall_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterForall_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitForall_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitForall_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Forall_termContext forall_term() throws RecognitionException {
		Forall_termContext _localctx = new Forall_termContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_forall_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3979);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fun_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Fun_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fun_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFun_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFun_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFun_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fun_termContext fun_term() throws RecognitionException {
		Fun_termContext _localctx = new Fun_termContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_fun_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3981);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ident_assign_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Ident_assign_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ident_assign_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIdent_assign_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIdent_assign_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIdent_assign_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ident_assign_termContext ident_assign_term() throws RecognitionException {
		Ident_assign_termContext _localctx = new Ident_assign_termContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_ident_assign_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3983);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fix_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Fix_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fix_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFix_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFix_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFix_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fix_termContext fix_term() throws RecognitionException {
		Fix_termContext _localctx = new Fix_termContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_fix_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3985);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fix_body_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Fix_body_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fix_body_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFix_body_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFix_body_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFix_body_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fix_body_termContext fix_body_term() throws RecognitionException {
		Fix_body_termContext _localctx = new Fix_body_termContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_fix_body_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3987);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cofix_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Cofix_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cofix_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCofix_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCofix_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCofix_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cofix_termContext cofix_term() throws RecognitionException {
		Cofix_termContext _localctx = new Cofix_termContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_cofix_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3989);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_assign_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Name_assign_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_assign_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterName_assign_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitName_assign_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitName_assign_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_assign_termContext name_assign_term() throws RecognitionException {
		Name_assign_termContext _localctx = new Name_assign_termContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_name_assign_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3991);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pattern_assign_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Pattern_assign_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern_assign_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterPattern_assign_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitPattern_assign_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitPattern_assign_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pattern_assign_termContext pattern_assign_term() throws RecognitionException {
		Pattern_assign_termContext _localctx = new Pattern_assign_termContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_pattern_assign_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3993);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_then_else_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public If_then_else_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_then_else_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIf_then_else_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIf_then_else_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIf_then_else_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_then_else_termContext if_then_else_term() throws RecognitionException {
		If_then_else_termContext _localctx = new If_then_else_termContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_if_then_else_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3995);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RecordContext extends ParserRuleContext {
		public Record_keywordContext record_keyword() {
			return getRuleContext(Record_keywordContext.class,0);
		}
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public SortContext sort() {
			return getRuleContext(SortContext.class,0);
		}
		public List<FieldContext> field() {
			return getRuleContexts(FieldContext.class);
		}
		public FieldContext field(int i) {
			return getRuleContext(FieldContext.class,i);
		}
		public RecordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRecord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRecord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRecord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RecordContext record() throws RecognitionException {
		RecordContext _localctx = new RecordContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_record);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3997);
			record_keyword();
			setState(3998);
			ident();
			setState(4000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(3999);
				binders();
				}
			}

			setState(4004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(4002);
				match(COLON);
				setState(4003);
				sort();
				}
			}

			setState(4006);
			match(T__15);
			setState(4008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(4007);
				ident();
				}
			}

			setState(4010);
			match(T__41);
			setState(4019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(4011);
				field();
				setState(4016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__229) {
					{
					{
					setState(4012);
					match(T__229);
					setState(4013);
					field();
					}
					}
					setState(4018);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4021);
			match(T__43);
			setState(4022);
			match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_keywordContext extends ParserRuleContext {
		public Record_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_keyword; }
	 
		public Record_keywordContext() { }
		public void copyFrom(Record_keywordContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CoinductiveRecordContext extends Record_keywordContext {
		public CoinductiveRecordContext(Record_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCoinductiveRecord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCoinductiveRecord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCoinductiveRecord(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RecordRecordContext extends Record_keywordContext {
		public RecordRecordContext(Record_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRecordRecord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRecordRecord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRecordRecord(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InductiveRecordContext extends Record_keywordContext {
		public InductiveRecordContext(Record_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInductiveRecord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInductiveRecord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInductiveRecord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_keywordContext record_keyword() throws RecognitionException {
		Record_keywordContext _localctx = new Record_keywordContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_record_keyword);
		try {
			setState(4027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__281:
				_localctx = new RecordRecordContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4024);
				match(T__281);
				}
				break;
			case T__282:
				_localctx = new InductiveRecordContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4025);
				match(T__282);
				}
				break;
			case T__283:
				_localctx = new CoinductiveRecordContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4026);
				match(T__283);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldContext extends ParserRuleContext {
		public FieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field; }
	 
		public FieldContext() { }
		public void copyFrom(FieldContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefFieldContext extends FieldContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Field_termContext field_term() {
			return getRuleContext(Field_termContext.class,0);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public DefFieldContext(FieldContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDefField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDefField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDefField(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdFieldContext extends FieldContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Field_termContext field_term() {
			return getRuleContext(Field_termContext.class,0);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public StdFieldContext(FieldContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldContext field() throws RecognitionException {
		FieldContext _localctx = new FieldContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_field);
		int _la;
		try {
			setState(4047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				_localctx = new DefFieldContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4029);
				name();
				setState(4031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					setState(4030);
					binders();
					}
				}

				setState(4035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(4033);
					match(COLON);
					setState(4034);
					term();
					}
				}

				setState(4037);
				match(T__15);
				setState(4038);
				field_term();
				}
				break;
			case 2:
				_localctx = new StdFieldContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4040);
				name();
				setState(4042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					setState(4041);
					binders();
					}
				}

				setState(4044);
				match(COLON);
				setState(4045);
				field_term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Field_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterField_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitField_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitField_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_termContext field_term() throws RecognitionException {
		Field_termContext _localctx = new Field_termContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_field_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4049);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_termContext extends ParserRuleContext {
		public List<Field_defContext> field_def() {
			return getRuleContexts(Field_defContext.class);
		}
		public Field_defContext field_def(int i) {
			return getRuleContext(Field_defContext.class,i);
		}
		public Record_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRecord_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRecord_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRecord_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_termContext record_term() throws RecognitionException {
		Record_termContext _localctx = new Record_termContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_record_term);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4051);
			match(T__284);
			setState(4060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(4052);
				field_def();
				setState(4057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__229) {
					{
					{
					setState(4053);
					match(T__229);
					setState(4054);
					field_def();
					}
					}
					setState(4059);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4062);
			match(T__285);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_defContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Field_def_termContext field_def_term() {
			return getRuleContext(Field_def_termContext.class,0);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public Field_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterField_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitField_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitField_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_defContext field_def() throws RecognitionException {
		Field_defContext _localctx = new Field_defContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_field_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4064);
			name();
			setState(4066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(4065);
				binders();
				}
			}

			setState(4068);
			match(T__15);
			setState(4069);
			field_def_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_def_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Field_def_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_def_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterField_def_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitField_def_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitField_def_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_def_termContext field_def_term() throws RecognitionException {
		Field_def_termContext _localctx = new Field_def_termContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_field_def_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4071);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_typeContext extends ParserRuleContext {
		public Module_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_type; }
	 
		public Module_typeContext() { }
		public void copyFrom(Module_typeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QualidModuleTypeContext extends Module_typeContext {
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public QualidModuleTypeContext(Module_typeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterQualidModuleType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitQualidModuleType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitQualidModuleType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithDefModuleTypeContext extends Module_typeContext {
		public Module_typeContext module_type() {
			return getRuleContext(Module_typeContext.class,0);
		}
		public QualidContext qualid() {
			return getRuleContext(QualidContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public WithDefModuleTypeContext(Module_typeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithDefModuleType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithDefModuleType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithDefModuleType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithModuleModuleTypeContext extends Module_typeContext {
		public Module_typeContext module_type() {
			return getRuleContext(Module_typeContext.class,0);
		}
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public WithModuleModuleTypeContext(Module_typeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterWithModuleModuleType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitWithModuleModuleType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitWithModuleModuleType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ModuleExprModuleTypeContext extends Module_typeContext {
		public Module_expressionContext module_expression() {
			return getRuleContext(Module_expressionContext.class,0);
		}
		public ModuleExprModuleTypeContext(Module_typeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterModuleExprModuleType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitModuleExprModuleType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitModuleExprModuleType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_typeContext module_type() throws RecognitionException {
		return module_type(0);
	}

	private Module_typeContext module_type(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Module_typeContext _localctx = new Module_typeContext(_ctx, _parentState);
		Module_typeContext _prevctx = _localctx;
		int _startState = 234;
		enterRecursionRule(_localctx, 234, RULE_module_type, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				_localctx = new QualidModuleTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(4074);
				qualid(0);
				}
				break;
			case 2:
				{
				_localctx = new ModuleExprModuleTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4075);
				module_expression();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4094);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,424,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4092);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
					case 1:
						{
						_localctx = new WithDefModuleTypeContext(new Module_typeContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_module_type);
						setState(4078);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(4079);
						match(T__24);
						setState(4080);
						match(T__286);
						setState(4081);
						qualid(0);
						setState(4082);
						match(T__15);
						setState(4083);
						term();
						}
						break;
					case 2:
						{
						_localctx = new WithModuleModuleTypeContext(new Module_typeContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_module_type);
						setState(4085);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(4086);
						match(T__24);
						setState(4087);
						match(T__287);
						setState(4088);
						qualid(0);
						setState(4089);
						match(T__15);
						setState(4090);
						qualid(0);
						}
						break;
					}
					} 
				}
				setState(4096);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,424,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Module_bindingContext extends ParserRuleContext {
		public Module_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_binding; }
	 
		public Module_bindingContext() { }
		public void copyFrom(Module_bindingContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StdModuleBindingContext extends Module_bindingContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public Module_typeContext module_type() {
			return getRuleContext(Module_typeContext.class,0);
		}
		public StdModuleBindingContext(Module_bindingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdModuleBinding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdModuleBinding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdModuleBinding(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ImportModuleBindingContext extends Module_bindingContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public Module_typeContext module_type() {
			return getRuleContext(Module_typeContext.class,0);
		}
		public ImportModuleBindingContext(Module_bindingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterImportModuleBinding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitImportModuleBinding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitImportModuleBinding(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExportModuleBindingContext extends Module_bindingContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public Module_typeContext module_type() {
			return getRuleContext(Module_typeContext.class,0);
		}
		public ExportModuleBindingContext(Module_bindingContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExportModuleBinding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExportModuleBinding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExportModuleBinding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_bindingContext module_binding() throws RecognitionException {
		Module_bindingContext _localctx = new Module_bindingContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_module_binding);
		int _la;
		try {
			setState(4135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				_localctx = new ImportModuleBindingContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4097);
				match(T__27);
				setState(4098);
				match(T__8);
				setState(4099);
				ident();
				setState(4103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					{
					setState(4100);
					ident();
					}
					}
					setState(4105);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4106);
				match(COLON);
				setState(4107);
				module_type(0);
				setState(4108);
				match(T__28);
				}
				break;
			case 2:
				_localctx = new ExportModuleBindingContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4110);
				match(T__27);
				setState(4111);
				match(T__9);
				setState(4112);
				ident();
				setState(4116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					{
					setState(4113);
					ident();
					}
					}
					setState(4118);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4119);
				match(COLON);
				setState(4120);
				module_type(0);
				setState(4121);
				match(T__28);
				}
				break;
			case 3:
				_localctx = new StdModuleBindingContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4123);
				match(T__27);
				setState(4124);
				ident();
				setState(4128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					{
					setState(4125);
					ident();
					}
					}
					setState(4130);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4131);
				match(COLON);
				setState(4132);
				module_type(0);
				setState(4133);
				match(T__28);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_bindingsContext extends ParserRuleContext {
		public List<Module_bindingContext> module_binding() {
			return getRuleContexts(Module_bindingContext.class);
		}
		public Module_bindingContext module_binding(int i) {
			return getRuleContext(Module_bindingContext.class,i);
		}
		public Module_bindingsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_bindings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterModule_bindings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitModule_bindings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitModule_bindings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_bindingsContext module_bindings() throws RecognitionException {
		Module_bindingsContext _localctx = new Module_bindingsContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_module_bindings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4137);
			module_binding();
			setState(4141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__27) {
				{
				{
				setState(4138);
				module_binding();
				}
				}
				setState(4143);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_expressionContext extends ParserRuleContext {
		public Module_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_expression; }
	 
		public Module_expressionContext() { }
		public void copyFrom(Module_expressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExclamationModuleExprContext extends Module_expressionContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public ExclamationModuleExprContext(Module_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExclamationModuleExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExclamationModuleExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExclamationModuleExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdModuleExprContext extends Module_expressionContext {
		public List<QualidContext> qualid() {
			return getRuleContexts(QualidContext.class);
		}
		public QualidContext qualid(int i) {
			return getRuleContext(QualidContext.class,i);
		}
		public StdModuleExprContext(Module_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdModuleExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdModuleExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdModuleExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_expressionContext module_expression() throws RecognitionException {
		Module_expressionContext _localctx = new Module_expressionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_module_expression);
		try {
			int _alt;
			setState(4159);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__71:
			case T__72:
			case T__73:
			case T__76:
			case T__79:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__108:
			case T__132:
			case T__138:
			case T__142:
			case T__148:
			case T__156:
			case T__176:
			case T__178:
			case T__179:
			case T__186:
			case T__187:
			case T__200:
			case T__214:
			case T__215:
			case T__223:
			case T__253:
			case T__254:
			case T__264:
			case T__269:
			case T__310:
			case T__311:
			case KeySOME:
			case IDENT:
				_localctx = new StdModuleExprContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4144);
				qualid(0);
				setState(4148);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,430,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4145);
						qualid(0);
						}
						} 
					}
					setState(4150);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,430,_ctx);
				}
				}
				break;
			case T__134:
				_localctx = new ExclamationModuleExprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4151);
				match(T__134);
				setState(4152);
				qualid(0);
				setState(4156);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,431,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4153);
						qualid(0);
						}
						} 
					}
					setState(4158);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,431,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SentenceContext extends ParserRuleContext {
		public SentenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sentence; }
	 
		public SentenceContext() { }
		public void copyFrom(SentenceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RecContext extends SentenceContext {
		public RecordContext record() {
			return getRuleContext(RecordContext.class,0);
		}
		public RecContext(SentenceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRec(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefContext extends SentenceContext {
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public DefContext(SentenceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDef(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FixContext extends SentenceContext {
		public FixpointContext fixpoint() {
			return getRuleContext(FixpointContext.class,0);
		}
		public FixContext(SentenceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFix(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AssertContext extends SentenceContext {
		public AssertionContext assertion() {
			return getRuleContext(AssertionContext.class,0);
		}
		public ProofContext proof() {
			return getRuleContext(ProofContext.class,0);
		}
		public AssertContext(SentenceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAssert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAssert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAssert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AssumptContext extends SentenceContext {
		public AssumptionContext assumption() {
			return getRuleContext(AssumptionContext.class,0);
		}
		public AssumptContext(SentenceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAssumpt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAssumpt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAssumpt(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GoContext extends SentenceContext {
		public GoalContext goal() {
			return getRuleContext(GoalContext.class,0);
		}
		public GoContext(SentenceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterGo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitGo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitGo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndContext extends SentenceContext {
		public InductiveContext inductive() {
			return getRuleContext(InductiveContext.class,0);
		}
		public IndContext(SentenceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SentenceContext sentence() throws RecognitionException {
		SentenceContext _localctx = new SentenceContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_sentence);
		try {
			setState(4171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				_localctx = new AssumptContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4161);
				assumption();
				}
				break;
			case 2:
				_localctx = new DefContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4162);
				definition();
				}
				break;
			case 3:
				_localctx = new IndContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4163);
				inductive();
				}
				break;
			case 4:
				_localctx = new FixContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4164);
				fixpoint();
				}
				break;
			case 5:
				_localctx = new RecContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4165);
				record();
				}
				break;
			case 6:
				_localctx = new AssertContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4166);
				assertion();
				setState(4168);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
				case 1:
					{
					setState(4167);
					proof();
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new GoContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4170);
				goal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssumptionContext extends ParserRuleContext {
		public AssumptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assumption; }
	 
		public AssumptionContext() { }
		public void copyFrom(AssumptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SingleAssumptionContext extends AssumptionContext {
		public Assumption_keywordContext assumption_keyword() {
			return getRuleContext(Assumption_keywordContext.class,0);
		}
		public AssumsContext assums() {
			return getRuleContext(AssumsContext.class,0);
		}
		public SingleAssumptionContext(AssumptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSingleAssumption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSingleAssumption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSingleAssumption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultipleAssumptionContext extends AssumptionContext {
		public Assumption_keywordContext assumption_keyword() {
			return getRuleContext(Assumption_keywordContext.class,0);
		}
		public List<AssumsContext> assums() {
			return getRuleContexts(AssumsContext.class);
		}
		public AssumsContext assums(int i) {
			return getRuleContext(AssumsContext.class,i);
		}
		public MultipleAssumptionContext(AssumptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMultipleAssumption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMultipleAssumption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMultipleAssumption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssumptionContext assumption() throws RecognitionException {
		AssumptionContext _localctx = new AssumptionContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_assumption);
		try {
			int _alt;
			setState(4190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				_localctx = new SingleAssumptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4173);
				assumption_keyword();
				setState(4174);
				assums();
				setState(4175);
				match(T__0);
				}
				break;
			case 2:
				_localctx = new MultipleAssumptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4177);
				assumption_keyword();
				setState(4178);
				match(T__27);
				setState(4179);
				assums();
				setState(4180);
				match(T__28);
				setState(4187);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4181);
						match(T__27);
						setState(4182);
						assums();
						setState(4183);
						match(T__28);
						}
						} 
					}
					setState(4189);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assumption_keywordContext extends ParserRuleContext {
		public Assumption_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assumption_keyword; }
	 
		public Assumption_keywordContext() { }
		public void copyFrom(Assumption_keywordContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ParamContext extends Assumption_keywordContext {
		public ParamContext(Assumption_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitParam(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HypsContext extends Assumption_keywordContext {
		public HypsContext(Assumption_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterHyps(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitHyps(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitHyps(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConjContext extends Assumption_keywordContext {
		public ConjContext(Assumption_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterConj(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitConj(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitConj(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VarContext extends Assumption_keywordContext {
		public VarContext(Assumption_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterVar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitVar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitVar(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VarsContext extends Assumption_keywordContext {
		public VarsContext(Assumption_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterVars(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitVars(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitVars(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParamsContext extends Assumption_keywordContext {
		public ParamsContext(Assumption_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitParams(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HypContext extends Assumption_keywordContext {
		public HypContext(Assumption_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterHyp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitHyp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitHyp(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AxiomContext extends Assumption_keywordContext {
		public AxiomContext(Assumption_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAxiom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAxiom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAxiom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assumption_keywordContext assumption_keyword() throws RecognitionException {
		Assumption_keywordContext _localctx = new Assumption_keywordContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_assumption_keyword);
		try {
			setState(4200);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__288:
				_localctx = new AxiomContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4192);
				match(T__288);
				}
				break;
			case T__289:
				_localctx = new ConjContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4193);
				match(T__289);
				}
				break;
			case T__290:
				_localctx = new ParamContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4194);
				match(T__290);
				}
				break;
			case T__291:
				_localctx = new ParamsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4195);
				match(T__291);
				}
				break;
			case T__292:
				_localctx = new VarContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4196);
				match(T__292);
				}
				break;
			case T__35:
				_localctx = new VarsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4197);
				match(T__35);
				}
				break;
			case T__293:
				_localctx = new HypContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4198);
				match(T__293);
				}
				break;
			case T__294:
				_localctx = new HypsContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4199);
				match(T__294);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssumsContext extends ParserRuleContext {
		public List<IdentContext> ident() {
			return getRuleContexts(IdentContext.class);
		}
		public IdentContext ident(int i) {
			return getRuleContext(IdentContext.class,i);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public AssumsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assums; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAssums(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAssums(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAssums(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssumsContext assums() throws RecognitionException {
		AssumsContext _localctx = new AssumsContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_assums);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4202);
			ident();
			setState(4206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				{
				setState(4203);
				ident();
				}
				}
				setState(4208);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4209);
			match(COLON);
			setState(4210);
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
	 
		public DefinitionContext() { }
		public void copyFrom(DefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LetDefinitionContext extends DefinitionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public LetDefinitionContext(DefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLetDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLetDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLetDefinition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdDefinitionContext extends DefinitionContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public TerminalNode KeyLOCAL() { return getToken(coqParser.KeyLOCAL, 0); }
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public StdDefinitionContext(DefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_definition);
		int _la;
		try {
			setState(4241);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__286:
			case KeyLOCAL:
				_localctx = new StdDefinitionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KeyLOCAL) {
					{
					setState(4212);
					match(KeyLOCAL);
					}
				}

				setState(4215);
				match(T__286);
				setState(4216);
				ident();
				setState(4218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					setState(4217);
					binders();
					}
				}

				setState(4222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(4220);
					match(COLON);
					setState(4221);
					term();
					}
				}

				setState(4224);
				match(T__15);
				setState(4225);
				term();
				setState(4226);
				match(T__0);
				}
				break;
			case T__295:
				_localctx = new LetDefinitionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4228);
				match(T__295);
				setState(4229);
				ident();
				setState(4231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					setState(4230);
					binders();
					}
				}

				setState(4235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(4233);
					match(COLON);
					setState(4234);
					term();
					}
				}

				setState(4237);
				match(T__15);
				setState(4238);
				term();
				setState(4239);
				match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InductiveContext extends ParserRuleContext {
		public InductiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inductive; }
	 
		public InductiveContext() { }
		public void copyFrom(InductiveContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CoInductiveContext extends InductiveContext {
		public List<Ind_bodyContext> ind_body() {
			return getRuleContexts(Ind_bodyContext.class);
		}
		public Ind_bodyContext ind_body(int i) {
			return getRuleContext(Ind_bodyContext.class,i);
		}
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public CoInductiveContext(InductiveContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCoInductive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCoInductive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCoInductive(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdInductiveContext extends InductiveContext {
		public List<Ind_bodyContext> ind_body() {
			return getRuleContexts(Ind_bodyContext.class);
		}
		public Ind_bodyContext ind_body(int i) {
			return getRuleContext(Ind_bodyContext.class,i);
		}
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public StdInductiveContext(InductiveContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdInductive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdInductive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdInductive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InductiveContext inductive() throws RecognitionException {
		InductiveContext _localctx = new InductiveContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_inductive);
		int _la;
		try {
			setState(4283);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__282:
				_localctx = new StdInductiveContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4243);
				match(T__282);
				setState(4244);
				ind_body();
				setState(4249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__24) {
					{
					{
					setState(4245);
					match(T__24);
					setState(4246);
					ind_body();
					}
					}
					setState(4251);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__296) {
					{
					setState(4252);
					match(T__296);
					setState(4253);
					match(STRING);
					setState(4254);
					match(T__15);
					setState(4255);
					term();
					setState(4256);
					match(COLON);
					setState(4257);
					ident();
					}
				}

				setState(4261);
				match(T__0);
				}
				break;
			case T__283:
				_localctx = new CoInductiveContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4263);
				match(T__283);
				setState(4264);
				ind_body();
				setState(4269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__24) {
					{
					{
					setState(4265);
					match(T__24);
					setState(4266);
					ind_body();
					}
					}
					setState(4271);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__296) {
					{
					setState(4272);
					match(T__296);
					setState(4273);
					match(STRING);
					setState(4274);
					match(T__15);
					setState(4275);
					term();
					setState(4276);
					match(COLON);
					setState(4277);
					ident();
					}
				}

				setState(4281);
				match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ind_bodyContext extends ParserRuleContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Ind_body_allocContext ind_body_alloc() {
			return getRuleContext(Ind_body_allocContext.class,0);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public Ind_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ind_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInd_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInd_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInd_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ind_bodyContext ind_body() throws RecognitionException {
		Ind_bodyContext _localctx = new Ind_bodyContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_ind_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4285);
			ident();
			setState(4291);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (COLON - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(4287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
					{
					setState(4286);
					binders();
					}
				}

				setState(4289);
				match(COLON);
				setState(4290);
				term();
				}
			}

			setState(4293);
			match(T__15);
			setState(4297);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__71:
			case T__72:
			case T__73:
			case T__76:
			case T__79:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__108:
			case T__132:
			case T__138:
			case T__142:
			case T__148:
			case T__156:
			case T__176:
			case T__178:
			case T__179:
			case T__186:
			case T__187:
			case T__200:
			case T__214:
			case T__215:
			case T__223:
			case T__253:
			case T__254:
			case T__264:
			case T__269:
			case T__310:
			case T__311:
			case KeySOME:
			case IDENT:
				{
				setState(4294);
				ind_body_alloc();
				}
				break;
			case T__42:
				{
				setState(4295);
				match(T__42);
				setState(4296);
				ind_body_alloc();
				}
				break;
			case T__0:
			case T__24:
			case T__296:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ind_body_allocContext extends ParserRuleContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public List<Ind_body_alloc_elementContext> ind_body_alloc_element() {
			return getRuleContexts(Ind_body_alloc_elementContext.class);
		}
		public Ind_body_alloc_elementContext ind_body_alloc_element(int i) {
			return getRuleContext(Ind_body_alloc_elementContext.class,i);
		}
		public Ind_body_allocContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ind_body_alloc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInd_body_alloc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInd_body_alloc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInd_body_alloc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ind_body_allocContext ind_body_alloc() throws RecognitionException {
		Ind_body_allocContext _localctx = new Ind_body_allocContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_ind_body_alloc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4299);
			ident();
			setState(4301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(4300);
				binders();
				}
			}

			setState(4305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(4303);
				match(COLON);
				setState(4304);
				term();
				}
			}

			setState(4310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__42) {
				{
				{
				setState(4307);
				ind_body_alloc_element();
				}
				}
				setState(4312);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ind_body_alloc_elementContext extends ParserRuleContext {
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public Ind_body_alloc_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ind_body_alloc_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInd_body_alloc_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInd_body_alloc_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInd_body_alloc_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ind_body_alloc_elementContext ind_body_alloc_element() throws RecognitionException {
		Ind_body_alloc_elementContext _localctx = new Ind_body_alloc_elementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_ind_body_alloc_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4313);
			match(T__42);
			setState(4314);
			ident();
			setState(4316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(4315);
				binders();
				}
			}

			setState(4320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(4318);
				match(COLON);
				setState(4319);
				term();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FixpointContext extends ParserRuleContext {
		public FixpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixpoint; }
	 
		public FixpointContext() { }
		public void copyFrom(FixpointContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CoFixPointContext extends FixpointContext {
		public List<Cofix_bodyContext> cofix_body() {
			return getRuleContexts(Cofix_bodyContext.class);
		}
		public Cofix_bodyContext cofix_body(int i) {
			return getRuleContext(Cofix_bodyContext.class,i);
		}
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public CoFixPointContext(FixpointContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCoFixPoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCoFixPoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCoFixPoint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdFixPointContext extends FixpointContext {
		public List<Fix_bodyContext> fix_body() {
			return getRuleContexts(Fix_bodyContext.class);
		}
		public Fix_bodyContext fix_body(int i) {
			return getRuleContext(Fix_bodyContext.class,i);
		}
		public TerminalNode STRING() { return getToken(coqParser.STRING, 0); }
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public StdFixPointContext(FixpointContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdFixPoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdFixPoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdFixPoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FixpointContext fixpoint() throws RecognitionException {
		FixpointContext _localctx = new FixpointContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_fixpoint);
		int _la;
		try {
			setState(4362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__297:
				_localctx = new StdFixPointContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4322);
				match(T__297);
				setState(4323);
				fix_body();
				setState(4328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__24) {
					{
					{
					setState(4324);
					match(T__24);
					setState(4325);
					fix_body();
					}
					}
					setState(4330);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__296) {
					{
					setState(4331);
					match(T__296);
					setState(4332);
					match(STRING);
					setState(4333);
					match(T__15);
					setState(4334);
					term();
					setState(4335);
					match(COLON);
					setState(4336);
					ident();
					}
				}

				setState(4340);
				match(T__0);
				}
				break;
			case T__298:
				_localctx = new CoFixPointContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4342);
				match(T__298);
				setState(4343);
				cofix_body();
				setState(4348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__24) {
					{
					{
					setState(4344);
					match(T__24);
					setState(4345);
					cofix_body();
					}
					}
					setState(4350);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__296) {
					{
					setState(4351);
					match(T__296);
					setState(4352);
					match(STRING);
					setState(4353);
					match(T__15);
					setState(4354);
					term();
					setState(4355);
					match(COLON);
					setState(4356);
					ident();
					}
				}

				setState(4360);
				match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImplicitArgsContext extends ParserRuleContext {
		public ImplicitArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicitArgs; }
	 
		public ImplicitArgsContext() { }
		public void copyFrom(ImplicitArgsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MultipleBindersImplicitContext extends ImplicitArgsContext {
		public List<BinderContext> binder() {
			return getRuleContexts(BinderContext.class);
		}
		public BinderContext binder(int i) {
			return getRuleContext(BinderContext.class,i);
		}
		public MultipleBindersImplicitContext(ImplicitArgsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterMultipleBindersImplicit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitMultipleBindersImplicit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitMultipleBindersImplicit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SingleBinderImplicitContext extends ImplicitArgsContext {
		public Binders_with_one_paramContext binders_with_one_param() {
			return getRuleContext(Binders_with_one_paramContext.class,0);
		}
		public SingleBinderImplicitContext(ImplicitArgsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSingleBinderImplicit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSingleBinderImplicit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSingleBinderImplicit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImplicitArgsContext implicitArgs() throws RecognitionException {
		ImplicitArgsContext _localctx = new ImplicitArgsContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_implicitArgs);
		int _la;
		try {
			setState(4376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				_localctx = new SingleBinderImplicitContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4364);
				match(T__41);
				setState(4365);
				binders_with_one_param();
				setState(4366);
				match(T__43);
				}
				break;
			case 2:
				_localctx = new MultipleBindersImplicitContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4368);
				match(T__41);
				setState(4370); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4369);
					binder();
					}
					}
					setState(4372); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0) );
				setState(4374);
				match(T__43);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssertionContext extends ParserRuleContext {
		public Assertion_keywordContext assertion_keyword() {
			return getRuleContext(Assertion_keywordContext.class,0);
		}
		public IdentContext ident() {
			return getRuleContext(IdentContext.class,0);
		}
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public BindersContext binders() {
			return getRuleContext(BindersContext.class,0);
		}
		public AssertionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assertion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAssertion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAssertion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAssertion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssertionContext assertion() throws RecognitionException {
		AssertionContext _localctx = new AssertionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_assertion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4378);
			assertion_keyword();
			setState(4379);
			ident();
			setState(4381);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__27 || _la==T__41 || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T__71 - 72)) | (1L << (T__72 - 72)) | (1L << (T__73 - 72)) | (1L << (T__76 - 72)) | (1L << (T__79 - 72)) | (1L << (T__89 - 72)) | (1L << (T__90 - 72)) | (1L << (T__91 - 72)) | (1L << (T__92 - 72)) | (1L << (T__108 - 72)) | (1L << (T__132 - 72)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (T__138 - 139)) | (1L << (T__142 - 139)) | (1L << (T__148 - 139)) | (1L << (T__156 - 139)) | (1L << (T__176 - 139)) | (1L << (T__178 - 139)) | (1L << (T__179 - 139)) | (1L << (T__186 - 139)) | (1L << (T__187 - 139)) | (1L << (T__200 - 139)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (T__214 - 215)) | (1L << (T__215 - 215)) | (1L << (T__221 - 215)) | (1L << (T__223 - 215)) | (1L << (T__253 - 215)) | (1L << (T__254 - 215)) | (1L << (T__264 - 215)) | (1L << (T__269 - 215)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (T__310 - 311)) | (1L << (T__311 - 311)) | (1L << (KeySOME - 311)) | (1L << (IDENT - 311)))) != 0)) {
				{
				setState(4380);
				binders();
				}
			}

			setState(4383);
			match(COLON);
			setState(4384);
			term();
			setState(4385);
			match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assertion_keywordContext extends ParserRuleContext {
		public Assertion_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assertion_keyword; }
	 
		public Assertion_keywordContext() { }
		public void copyFrom(Assertion_keywordContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExamContext extends Assertion_keywordContext {
		public ExamContext(Assertion_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExam(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColContext extends Assertion_keywordContext {
		public ColContext(Assertion_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCol(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RemaContext extends Assertion_keywordContext {
		public RemaContext(Assertion_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRema(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LemContext extends Assertion_keywordContext {
		public LemContext(Assertion_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PropContext extends Assertion_keywordContext {
		public PropContext(Assertion_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterProp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitProp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitProp(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TheoContext extends Assertion_keywordContext {
		public TheoContext(Assertion_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTheo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTheo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTheo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefAssertContext extends Assertion_keywordContext {
		public DefAssertContext(Assertion_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDefAssert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDefAssert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDefAssert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FacContext extends Assertion_keywordContext {
		public FacContext(Assertion_keywordContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFac(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFac(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFac(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assertion_keywordContext assertion_keyword() throws RecognitionException {
		Assertion_keywordContext _localctx = new Assertion_keywordContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_assertion_keyword);
		try {
			setState(4395);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__299:
				_localctx = new TheoContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4387);
				match(T__299);
				}
				break;
			case T__300:
				_localctx = new LemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4388);
				match(T__300);
				}
				break;
			case T__301:
				_localctx = new RemaContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4389);
				match(T__301);
				}
				break;
			case T__302:
				_localctx = new FacContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4390);
				match(T__302);
				}
				break;
			case T__303:
				_localctx = new ColContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4391);
				match(T__303);
				}
				break;
			case T__304:
				_localctx = new PropContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4392);
				match(T__304);
				}
				break;
			case T__286:
				_localctx = new DefAssertContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4393);
				match(T__286);
				}
				break;
			case T__305:
				_localctx = new ExamContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4394);
				match(T__305);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GoalContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public ProofContext proof() {
			return getRuleContext(ProofContext.class,0);
		}
		public GoalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterGoal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitGoal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitGoal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GoalContext goal() throws RecognitionException {
		GoalContext _localctx = new GoalContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_goal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4397);
			match(T__306);
			setState(4398);
			term();
			setState(4399);
			proof();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProofContext extends ParserRuleContext {
		public Proof_commandContext proof_command() {
			return getRuleContext(Proof_commandContext.class,0);
		}
		public List<Proof_bodyContext> proof_body() {
			return getRuleContexts(Proof_bodyContext.class);
		}
		public Proof_bodyContext proof_body(int i) {
			return getRuleContext(Proof_bodyContext.class,i);
		}
		public ProofContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proof; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterProof(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitProof(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitProof(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProofContext proof() throws RecognitionException {
		ProofContext _localctx = new ProofContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_proof);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				setState(4401);
				proof_command();
				setState(4402);
				match(T__0);
				}
				break;
			}
			setState(4407); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4406);
				proof_body();
				}
				}
				setState(4409); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__13) | (1L << T__27) | (1L << T__41) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__122 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (T__128 - 129)) | (1L << (T__129 - 129)) | (1L << (T__130 - 129)) | (1L << (T__131 - 129)) | (1L << (T__132 - 129)) | (1L << (T__135 - 129)) | (1L << (T__136 - 129)) | (1L << (T__138 - 129)) | (1L << (T__139 - 129)) | (1L << (T__140 - 129)) | (1L << (T__141 - 129)) | (1L << (T__142 - 129)) | (1L << (T__143 - 129)) | (1L << (T__144 - 129)) | (1L << (T__145 - 129)) | (1L << (T__146 - 129)) | (1L << (T__147 - 129)) | (1L << (T__148 - 129)) | (1L << (T__151 - 129)) | (1L << (T__152 - 129)) | (1L << (T__153 - 129)) | (1L << (T__154 - 129)) | (1L << (T__155 - 129)) | (1L << (T__156 - 129)) | (1L << (T__157 - 129)) | (1L << (T__159 - 129)) | (1L << (T__160 - 129)) | (1L << (T__161 - 129)) | (1L << (T__162 - 129)) | (1L << (T__164 - 129)) | (1L << (T__165 - 129)) | (1L << (T__166 - 129)) | (1L << (T__167 - 129)) | (1L << (T__168 - 129)) | (1L << (T__169 - 129)) | (1L << (T__170 - 129)) | (1L << (T__171 - 129)) | (1L << (T__174 - 129)) | (1L << (T__175 - 129)) | (1L << (T__176 - 129)) | (1L << (T__177 - 129)) | (1L << (T__178 - 129)) | (1L << (T__179 - 129)) | (1L << (T__180 - 129)) | (1L << (T__181 - 129)) | (1L << (T__186 - 129)) | (1L << (T__187 - 129)) | (1L << (T__188 - 129)) | (1L << (T__189 - 129)) | (1L << (T__190 - 129)) | (1L << (T__191 - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (T__192 - 193)) | (1L << (T__194 - 193)) | (1L << (T__195 - 193)) | (1L << (T__196 - 193)) | (1L << (T__197 - 193)) | (1L << (T__199 - 193)) | (1L << (T__200 - 193)) | (1L << (T__202 - 193)) | (1L << (T__203 - 193)) | (1L << (T__204 - 193)) | (1L << (T__205 - 193)) | (1L << (T__206 - 193)) | (1L << (T__207 - 193)) | (1L << (T__208 - 193)) | (1L << (T__209 - 193)) | (1L << (T__210 - 193)) | (1L << (T__211 - 193)) | (1L << (T__212 - 193)) | (1L << (T__213 - 193)) | (1L << (T__214 - 193)) | (1L << (T__215 - 193)) | (1L << (T__216 - 193)) | (1L << (T__217 - 193)) | (1L << (T__218 - 193)) | (1L << (T__219 - 193)) | (1L << (T__223 - 193)) | (1L << (T__226 - 193)) | (1L << (T__230 - 193)) | (1L << (T__231 - 193)) | (1L << (T__232 - 193)) | (1L << (T__233 - 193)) | (1L << (T__234 - 193)) | (1L << (T__235 - 193)) | (1L << (T__236 - 193)) | (1L << (T__237 - 193)) | (1L << (T__238 - 193)) | (1L << (T__239 - 193)) | (1L << (T__242 - 193)) | (1L << (T__244 - 193)) | (1L << (T__247 - 193)) | (1L << (T__248 - 193)) | (1L << (T__249 - 193)) | (1L << (T__250 - 193)) | (1L << (T__251 - 193)) | (1L << (T__252 - 193)) | (1L << (T__253 - 193)) | (1L << (T__254 - 193)) | (1L << (T__255 - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (T__256 - 257)) | (1L << (T__258 - 257)) | (1L << (T__259 - 257)) | (1L << (T__260 - 257)) | (1L << (T__261 - 257)) | (1L << (T__262 - 257)) | (1L << (T__263 - 257)) | (1L << (T__264 - 257)) | (1L << (T__265 - 257)) | (1L << (T__266 - 257)) | (1L << (T__267 - 257)) | (1L << (T__269 - 257)) | (1L << (T__270 - 257)) | (1L << (T__310 - 257)) | (1L << (T__311 - 257)) | (1L << (ADD - 257)) | (1L << (LISTADD - 257)) | (1L << (MUL - 257)) | (1L << (SUB - 257)))) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & ((1L << (KeySOME - 337)) | (1L << (KeySTARSTAR - 337)) | (1L << (IDENT - 337)) | (1L << (NUM - 337)))) != 0) );
			setState(4411);
			_la = _input.LA(1);
			if ( !(((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (T__307 - 308)) | (1L << (T__308 - 308)) | (1L << (T__309 - 308)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proof_bodyContext extends ParserRuleContext {
		public Proof_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proof_body; }
	 
		public Proof_bodyContext() { }
		public void copyFrom(Proof_bodyContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StdProofBodyContext extends Proof_bodyContext {
		public Tactic_invocationContext tactic_invocation() {
			return getRuleContext(Tactic_invocationContext.class,0);
		}
		public BulletContext bullet() {
			return getRuleContext(BulletContext.class,0);
		}
		public StdProofBodyContext(Proof_bodyContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdProofBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdProofBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdProofBody(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BracedProofBodyContext extends Proof_bodyContext {
		public Tactic_invocationContext tactic_invocation() {
			return getRuleContext(Tactic_invocationContext.class,0);
		}
		public BulletContext bullet() {
			return getRuleContext(BulletContext.class,0);
		}
		public BracedProofBodyContext(Proof_bodyContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBracedProofBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBracedProofBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBracedProofBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proof_bodyContext proof_body() throws RecognitionException {
		Proof_bodyContext _localctx = new Proof_bodyContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_proof_body);
		int _la;
		try {
			setState(4424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				_localctx = new StdProofBodyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4414);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(4413);
					bullet();
					}
					break;
				}
				setState(4416);
				tactic_invocation();
				}
				break;
			case 2:
				_localctx = new BracedProofBodyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (ADD - 313)) | (1L << (LISTADD - 313)) | (1L << (MUL - 313)) | (1L << (SUB - 313)) | (1L << (KeySTARSTAR - 313)))) != 0)) {
					{
					setState(4417);
					bullet();
					}
				}

				setState(4420);
				match(T__41);
				setState(4421);
				tactic_invocation();
				setState(4422);
				match(T__43);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentContext extends ParserRuleContext {
		public IdentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ident; }
	 
		public IdentContext() { }
		public void copyFrom(IdentContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class OrIdentContext extends IdentContext {
		public OrIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterOrIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitOrIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitOrIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChangeIdentContext extends IdentContext {
		public ChangeIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterChangeIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitChangeIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitChangeIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DtAutoIdentContext extends IdentContext {
		public DtAutoIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDtAutoIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDtAutoIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDtAutoIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FreshIdentContext extends IdentContext {
		public FreshIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFreshIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFreshIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFreshIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DintuitionContext extends IdentContext {
		public DintuitionContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDintuition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDintuition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDintuition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoubleIdentContext extends IdentContext {
		public DoubleIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDoubleIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDoubleIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDoubleIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DependentIdentContext extends IdentContext {
		public DependentIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDependentIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDependentIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDependentIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Case_eqIdentContext extends IdentContext {
		public Case_eqIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCase_eqIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCase_eqIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCase_eqIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ContradictIdentContext extends IdentContext {
		public ContradictIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterContradictIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitContradictIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitContradictIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntuitionIdentContext extends IdentContext {
		public IntuitionIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterIntuitionIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitIntuitionIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitIntuitionIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StdIdentContext extends IdentContext {
		public TerminalNode IDENT() { return getToken(coqParser.IDENT, 0); }
		public StdIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterStdIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitStdIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitStdIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EasyIdentContext extends IdentContext {
		public EasyIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEasyIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEasyIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEasyIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EqualityIdentContext extends IdentContext {
		public EqualityIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEqualityIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEqualityIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEqualityIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Assert_fialsIdentContext extends IdentContext {
		public Assert_fialsIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAssert_fialsIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAssert_fialsIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAssert_fialsIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SomeIdentContext extends IdentContext {
		public SomeIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSomeIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSomeIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSomeIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class F_equalIdentContext extends IdentContext {
		public F_equalIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterF_equalIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitF_equalIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitF_equalIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TAutoIdentContext extends IdentContext {
		public TAutoIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTAutoIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTAutoIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTAutoIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AbsurdIdentContext extends IdentContext {
		public AbsurdIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAbsurdIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAbsurdIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAbsurdIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FailIdentContext extends IdentContext {
		public FailIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterFailIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitFailIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitFailIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SumIdentContext extends IdentContext {
		public SumIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterSumIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitSumIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitSumIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExfalsoIdentContext extends IdentContext {
		public ExfalsoIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterExfalsoIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitExfalsoIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitExfalsoIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BottomIdentContext extends IdentContext {
		public BottomIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterBottomIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitBottomIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitBottomIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LemmaIdentContext extends IdentContext {
		public LemmaIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLemmaIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLemmaIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLemmaIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Inversion_sigmaIdentContext extends IdentContext {
		public Inversion_sigmaIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterInversion_sigmaIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitInversion_sigmaIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitInversion_sigmaIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TopIdentContext extends IdentContext {
		public TopIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterTopIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitTopIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitTopIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DecideIdentContext extends IdentContext {
		public DecideIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterDecideIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitDecideIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitDecideIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EqIdentContext extends IdentContext {
		public EqIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterEqIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitEqIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitEqIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RightIdentContext extends IdentContext {
		public RightIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRightIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRightIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRightIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CompareIdentContext extends IdentContext {
		public CompareIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterCompareIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitCompareIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitCompareIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AllIdentContext extends IdentContext {
		public AllIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterAllIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitAllIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitAllIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RecIdentContext extends IdentContext {
		public RecIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterRecIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitRecIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitRecIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LeftIdentContext extends IdentContext {
		public LeftIdentContext(IdentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).enterLeftIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof coqListener ) ((coqListener)listener).exitLeftIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof coqVisitor ) return ((coqVisitor<? extends T>)visitor).visitLeftIdent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentContext ident() throws RecognitionException {
		IdentContext _localctx = new IdentContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_ident);
		try {
			setState(4458);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KeySOME:
				_localctx = new SomeIdentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4426);
				match(KeySOME);
				}
				break;
			case T__138:
				_localctx = new EqIdentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4427);
				match(T__138);
				}
				break;
			case T__269:
				_localctx = new AllIdentContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4428);
				match(T__269);
				}
				break;
			case T__176:
				_localctx = new AbsurdIdentContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4429);
				match(T__176);
				}
				break;
			case T__72:
				_localctx = new EqualityIdentContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4430);
				match(T__72);
				}
				break;
			case T__148:
				_localctx = new DoubleIdentContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4431);
				match(T__148);
				}
				break;
			case T__79:
				_localctx = new F_equalIdentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4432);
				match(T__79);
				}
				break;
			case T__223:
				_localctx = new OrIdentContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4433);
				match(T__223);
				}
				break;
			case T__178:
				_localctx = new ContradictIdentContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4434);
				match(T__178);
				}
				break;
			case T__254:
				_localctx = new FreshIdentContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4435);
				match(T__254);
				}
				break;
			case T__142:
				_localctx = new Case_eqIdentContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(4436);
				match(T__142);
				}
				break;
			case T__310:
				_localctx = new LemmaIdentContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(4437);
				match(T__310);
				}
				break;
			case T__108:
				_localctx = new EasyIdentContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(4438);
				match(T__108);
				}
				break;
			case T__311:
				_localctx = new RecIdentContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(4439);
				match(T__311);
				}
				break;
			case T__132:
				_localctx = new ChangeIdentContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(4440);
				match(T__132);
				}
				break;
			case T__71:
				_localctx = new DecideIdentContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(4441);
				match(T__71);
				}
				break;
			case T__214:
				_localctx = new LeftIdentContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(4442);
				match(T__214);
				}
				break;
			case T__215:
				_localctx = new RightIdentContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(4443);
				match(T__215);
				}
				break;
			case T__156:
				_localctx = new Inversion_sigmaIdentContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(4444);
				match(T__156);
				}
				break;
			case T__264:
				_localctx = new Assert_fialsIdentContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(4445);
				match(T__264);
				}
				break;
			case T__253:
				_localctx = new FailIdentContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(4446);
				match(T__253);
				}
				break;
			case T__76:
				_localctx = new DependentIdentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(4447);
				match(T__76);
				}
				break;
			case T__200:
				_localctx = new SumIdentContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(4448);
				match(T__200);
				}
				break;
			case T__73:
				_localctx = new CompareIdentContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(4449);
				match(T__73);
				}
				break;
			case T__89:
				_localctx = new TAutoIdentContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(4450);
				match(T__89);
				}
				break;
			case T__90:
				_localctx = new DtAutoIdentContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(4451);
				match(T__90);
				}
				break;
			case T__91:
				_localctx = new IntuitionIdentContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(4452);
				match(T__91);
				}
				break;
			case T__92:
				_localctx = new DintuitionContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(4453);
				match(T__92);
				}
				break;
			case T__186:
				_localctx = new TopIdentContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(4454);
				match(T__186);
				}
				break;
			case T__187:
				_localctx = new BottomIdentContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(4455);
				match(T__187);
				}
				break;
			case T__179:
				_localctx = new ExfalsoIdentContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(4456);
				match(T__179);
				}
				break;
			case IDENT:
				_localctx = new StdIdentContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(4457);
				match(IDENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7:
			return collection_sempred((CollectionContext)_localctx, predIndex);
		case 38:
			return intro_pattern_sempred((Intro_patternContext)_localctx, predIndex);
		case 48:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 49:
			return expr2_sempred((Expr2Context)_localctx, predIndex);
		case 69:
			return above_term_sempred((Above_termContext)_localctx, predIndex);
		case 70:
			return above_term_ex_below_70_sempred((Above_term_ex_below_70Context)_localctx, predIndex);
		case 72:
			return below_term_ex_minus_sempred((Below_term_ex_minusContext)_localctx, predIndex);
		case 82:
			return qualid_sempred((QualidContext)_localctx, predIndex);
		case 95:
			return pattern_sempred((PatternContext)_localctx, predIndex);
		case 117:
			return module_type_sempred((Module_typeContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean collection_sempred(CollectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 10);
		case 1:
			return precpred(_ctx, 9);
		case 2:
			return precpred(_ctx, 8);
		case 3:
			return precpred(_ctx, 7);
		case 4:
			return precpred(_ctx, 6);
		}
		return true;
	}
	private boolean intro_pattern_sempred(Intro_patternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean expr2_sempred(Expr2Context _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean above_term_sempred(Above_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 10);
		case 9:
			return precpred(_ctx, 9);
		case 10:
			return precpred(_ctx, 6);
		case 11:
			return precpred(_ctx, 5);
		case 12:
			return precpred(_ctx, 4);
		case 13:
			return precpred(_ctx, 3);
		case 14:
			return precpred(_ctx, 16);
		case 15:
			return precpred(_ctx, 15);
		case 16:
			return precpred(_ctx, 14);
		case 17:
			return precpred(_ctx, 13);
		case 18:
			return precpred(_ctx, 8);
		}
		return true;
	}
	private boolean above_term_ex_below_70_sempred(Above_term_ex_below_70Context _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return precpred(_ctx, 3);
		case 20:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean below_term_ex_minus_sempred(Below_term_ex_minusContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return precpred(_ctx, 5);
		case 22:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean qualid_sempred(QualidContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean pattern_sempred(PatternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return precpred(_ctx, 7);
		case 25:
			return precpred(_ctx, 6);
		case 26:
			return precpred(_ctx, 5);
		}
		return true;
	}
	private boolean module_type_sempred(Module_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27:
			return precpred(_ctx, 3);
		case 28:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u015d\u116f\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\3\2\6\2\u0118\n\2\r\2\16\2\u0119\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0123\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\5\4\u012f\n\4\3\5\3\5\5\5\u0133\n\5\3\6\6\6\u0136\n\6\r\6\16"+
		"\6\u0137\3\7\3\7\5\7\u013c\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\6\7\u0149\n\7\r\7\16\7\u014a\3\7\3\7\3\7\6\7\u0150\n\7\r\7\16\7\u0151"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u015b\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\5\7\u0164\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u016f\n\7\f\7\16"+
		"\7\u0172\13\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u017f\n"+
		"\7\3\7\3\7\5\7\u0183\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u018c\n\7\3\7"+
		"\3\7\3\7\5\7\u0191\n\7\3\7\3\7\3\7\3\7\7\7\u0197\n\7\f\7\16\7\u019a\13"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01a2\n\7\3\7\3\7\3\7\3\7\7\7\u01a8\n\7"+
		"\f\7\16\7\u01ab\13\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u01b3\n\7\f\7\16\7\u01b6"+
		"\13\7\5\7\u01b8\n\7\3\b\3\b\3\b\3\b\3\b\5\b\u01bf\n\b\3\b\3\b\3\b\6\b"+
		"\u01c4\n\b\r\b\16\b\u01c5\3\b\3\b\5\b\u01ca\n\b\3\b\3\b\3\b\3\b\3\b\3"+
		"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\6\b\u01da\n\b\r\b\16\b\u01db\3\b\3"+
		"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3"+
		"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u020a\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3"+
		"\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u022f\n\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\6\t\u023e\n\t\r\t\16\t\u023f"+
		"\3\t\3\t\3\t\3\t\7\t\u0246\n\t\f\t\16\t\u0249\13\t\3\n\3\n\3\13\3\13\3"+
		"\13\5\13\u0250\n\13\3\13\3\13\3\13\3\f\6\f\u0256\n\f\r\f\16\f\u0257\3"+
		"\f\6\f\u025b\n\f\r\f\16\f\u025c\3\f\6\f\u0260\n\f\r\f\16\f\u0261\5\f\u0264"+
		"\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3"+
		"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5"+
		"\17\u0282\n\17\3\20\3\20\5\20\u0286\n\20\3\20\3\20\3\20\5\20\u028b\n\20"+
		"\3\20\3\20\5\20\u028f\n\20\3\20\3\20\3\20\3\20\5\20\u0295\n\20\3\21\3"+
		"\21\3\21\3\21\3\21\6\21\u029c\n\21\r\21\16\21\u029d\3\21\3\21\3\21\6\21"+
		"\u02a3\n\21\r\21\16\21\u02a4\3\21\3\21\5\21\u02a9\n\21\3\22\3\22\5\22"+
		"\u02ad\n\22\3\23\3\23\3\23\3\23\5\23\u02b3\n\23\3\23\3\23\3\23\3\23\5"+
		"\23\u02b9\n\23\3\23\3\23\6\23\u02bd\n\23\r\23\16\23\u02be\5\23\u02c1\n"+
		"\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u02cd\n\24"+
		"\3\24\3\24\3\24\3\24\5\24\u02d3\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\5\24\u02de\n\24\3\25\3\25\3\25\3\25\3\25\5\25\u02e5\n\25\3"+
		"\25\3\25\5\25\u02e9\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26"+
		"\5\26\u02f4\n\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u02fc\n\26\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\6\27\u0309\n\27\r\27"+
		"\16\27\u030a\3\27\3\27\3\27\6\27\u0310\n\27\r\27\16\27\u0311\3\27\3\27"+
		"\3\27\3\27\6\27\u0318\n\27\r\27\16\27\u0319\3\27\3\27\6\27\u031e\n\27"+
		"\r\27\16\27\u031f\3\27\3\27\3\27\3\27\3\27\6\27\u0327\n\27\r\27\16\27"+
		"\u0328\5\27\u032b\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3"+
		"\30\3\30\6\30\u0338\n\30\r\30\16\30\u0339\3\30\3\30\3\30\6\30\u033f\n"+
		"\30\r\30\16\30\u0340\3\30\3\30\3\30\3\30\3\30\6\30\u0348\n\30\r\30\16"+
		"\30\u0349\3\30\3\30\3\30\6\30\u034f\n\30\r\30\16\30\u0350\3\30\3\30\3"+
		"\30\3\30\6\30\u0357\n\30\r\30\16\30\u0358\5\30\u035b\n\30\3\30\3\30\6"+
		"\30\u035f\n\30\r\30\16\30\u0360\5\30\u0363\n\30\3\30\3\30\3\30\3\30\6"+
		"\30\u0369\n\30\r\30\16\30\u036a\5\30\u036d\n\30\3\30\3\30\6\30\u0371\n"+
		"\30\r\30\16\30\u0372\5\30\u0375\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\6\30\u037e\n\30\r\30\16\30\u037f\3\30\3\30\3\30\3\30\3\30\6\30\u0387"+
		"\n\30\r\30\16\30\u0388\3\30\3\30\3\30\3\30\3\30\3\30\6\30\u0391\n\30\r"+
		"\30\16\30\u0392\3\30\3\30\5\30\u0397\n\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\6\30\u039f\n\30\r\30\16\30\u03a0\3\30\3\30\3\30\6\30\u03a6\n\30\r\30"+
		"\16\30\u03a7\3\30\3\30\3\30\3\30\3\30\3\30\6\30\u03b0\n\30\r\30\16\30"+
		"\u03b1\3\30\3\30\3\30\3\30\3\30\3\30\6\30\u03ba\n\30\r\30\16\30\u03bb"+
		"\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\6\30\u03c6\n\30\r\30\16\30\u03c7"+
		"\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u03d0\n\30\3\31\3\31\3\31\3\31\3\31"+
		"\7\31\u03d7\n\31\f\31\16\31\u03da\13\31\3\32\3\32\7\32\u03de\n\32\f\32"+
		"\16\32\u03e1\13\32\3\32\3\32\7\32\u03e5\n\32\f\32\16\32\u03e8\13\32\3"+
		"\32\3\32\5\32\u03ec\n\32\3\32\6\32\u03ef\n\32\r\32\16\32\u03f0\3\32\3"+
		"\32\5\32\u03f5\n\32\3\32\6\32\u03f8\n\32\r\32\16\32\u03f9\3\32\3\32\5"+
		"\32\u03fe\n\32\3\32\6\32\u0401\n\32\r\32\16\32\u0402\3\32\3\32\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u040f\n\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\7\32\u0418\n\32\f\32\16\32\u041b\13\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\6\32\u0424\n\32\r\32\16\32\u0425\5\32\u0428\n\32"+
		"\3\32\3\32\3\32\3\32\6\32\u042e\n\32\r\32\16\32\u042f\5\32\u0432\n\32"+
		"\3\32\3\32\3\32\3\32\6\32\u0438\n\32\r\32\16\32\u0439\5\32\u043c\n\32"+
		"\3\32\3\32\3\32\3\32\5\32\u0442\n\32\3\32\3\32\3\32\3\32\7\32\u0448\n"+
		"\32\f\32\16\32\u044b\13\32\3\32\3\32\3\32\3\32\7\32\u0451\n\32\f\32\16"+
		"\32\u0454\13\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\7\32\u0462\n\32\f\32\16\32\u0465\13\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\7\32\u046d\n\32\f\32\16\32\u0470\13\32\7\32\u0472\n\32\f\32\16\32"+
		"\u0475\13\32\3\32\3\32\6\32\u0479\n\32\r\32\16\32\u047a\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\5\32\u0483\n\32\3\32\6\32\u0486\n\32\r\32\16\32\u0487"+
		"\3\32\3\32\3\32\3\32\7\32\u048e\n\32\f\32\16\32\u0491\13\32\3\32\3\32"+
		"\3\32\3\32\5\32\u0497\n\32\3\32\3\32\3\32\7\32\u049c\n\32\f\32\16\32\u049f"+
		"\13\32\3\32\3\32\3\32\3\32\5\32\u04a5\n\32\3\32\3\32\3\32\7\32\u04aa\n"+
		"\32\f\32\16\32\u04ad\13\32\7\32\u04af\n\32\f\32\16\32\u04b2\13\32\5\32"+
		"\u04b4\n\32\3\33\3\33\3\33\3\33\3\33\7\33\u04bb\n\33\f\33\16\33\u04be"+
		"\13\33\3\34\3\34\5\34\u04c2\n\34\3\34\3\34\3\34\5\34\u04c7\n\34\3\34\3"+
		"\34\3\34\3\34\5\34\u04cd\n\34\3\34\3\34\3\34\3\34\5\34\u04d3\n\34\3\34"+
		"\3\34\3\34\5\34\u04d8\n\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u04e0\n"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u04e8\n\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\5\34\u04f0\n\34\3\34\5\34\u04f3\n\34\3\34\3\34\5\34\u04f7\n"+
		"\34\3\34\5\34\u04fa\n\34\3\34\5\34\u04fd\n\34\3\34\7\34\u0500\n\34\f\34"+
		"\16\34\u0503\13\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\6"+
		"\34\u0539\n\34\r\34\16\34\u053a\3\34\3\34\3\34\3\34\3\34\5\34\u0542\n"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\3\34\7\34\u0561\n\34\f\34\16\34\u0564\13\34\3\34\3\34\3\34\3\34\5"+
		"\34\u056a\n\34\5\34\u056c\n\34\3\35\5\35\u056f\n\35\3\35\3\35\5\35\u0573"+
		"\n\35\3\35\5\35\u0576\n\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\7\36"+
		"\u0580\n\36\f\36\16\36\u0583\13\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\7\36\u0593\n\36\f\36\16\36\u0596\13"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u05af\n\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\6\36\u05ba\n\36\r\36\16\36\u05bb"+
		"\3\36\3\36\3\36\3\36\5\36\u05c2\n\36\3\36\3\36\3\36\3\36\5\36\u05c8\n"+
		"\36\3\36\3\36\3\36\3\36\5\36\u05ce\n\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\5\36\u05d6\n\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u05de\n\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\5\36\u05e6\n\36\3\36\3\36\3\36\3\36\7\36\u05ec"+
		"\n\36\f\36\16\36\u05ef\13\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\5\36\u0624\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\6\36\u064e\n\36\r\36\16\36\u064f\5\36\u0652\n\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\6\36\u065c\n\36\r\36\16\36\u065d\3\36\3"+
		"\36\3\36\5\36\u0663\n\36\3\36\3\36\3\36\3\36\5\36\u0669\n\36\5\36\u066b"+
		"\n\36\3\36\3\36\3\36\3\36\5\36\u0671\n\36\3\36\3\36\3\36\3\36\5\36\u0677"+
		"\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0682\n\36\3\36"+
		"\3\36\3\36\3\36\5\36\u0688\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\5\36\u0693\n\36\3\36\3\36\6\36\u0697\n\36\r\36\16\36\u0698\3\36"+
		"\3\36\3\36\3\36\5\36\u069f\n\36\3\36\3\36\6\36\u06a3\n\36\r\36\16\36\u06a4"+
		"\3\36\3\36\5\36\u06a9\n\36\3\36\3\36\6\36\u06ad\n\36\r\36\16\36\u06ae"+
		"\3\36\3\36\5\36\u06b3\n\36\3\36\3\36\6\36\u06b7\n\36\r\36\16\36\u06b8"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\6\36\u06d9\n\36\r\36\16\36\u06da\3\36\3\36\3\36\3\36\6\36\u06e1"+
		"\n\36\r\36\16\36\u06e2\3\36\3\36\3\36\3\36\3\36\3\36\6\36\u06eb\n\36\r"+
		"\36\16\36\u06ec\3\36\3\36\3\36\3\36\3\36\3\36\6\36\u06f5\n\36\r\36\16"+
		"\36\u06f6\3\36\3\36\3\36\3\36\3\36\5\36\u06fe\n\36\3\36\3\36\5\36\u0702"+
		"\n\36\3\36\3\36\3\36\3\36\3\36\5\36\u0709\n\36\3\36\3\36\5\36\u070d\n"+
		"\36\3\36\3\36\3\36\3\36\3\36\5\36\u0714\n\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\6\36\u071c\n\36\r\36\16\36\u071d\5\36\u0720\n\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\6\36\u072a\n\36\r\36\16\36\u072b\3\36\3\36\3"+
		"\36\3\36\3\36\5\36\u0733\n\36\3\36\3\36\3\36\3\36\6\36\u0739\n\36\r\36"+
		"\16\36\u073a\5\36\u073d\n\36\3\36\3\36\3\36\3\36\3\36\3\36\6\36\u0745"+
		"\n\36\r\36\16\36\u0746\3\36\3\36\3\36\3\36\6\36\u074d\n\36\r\36\16\36"+
		"\u074e\5\36\u0751\n\36\5\36\u0753\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0782\n\37"+
		"\3\37\3\37\3\37\3\37\3\37\5\37\u0789\n\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\7\37\u07c9\n\37\f\37\16\37\u07cc\13\37\3\37\3\37\3\37\5\37\u07d1\n\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u07d9\n\37\3\37\3\37\6\37\u07dd\n"+
		"\37\r\37\16\37\u07de\3\37\3\37\3\37\3\37\6\37\u07e5\n\37\r\37\16\37\u07e6"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\6\37\u07f2\n\37\r\37\16"+
		"\37\u07f3\3\37\3\37\3\37\3\37\3\37\3\37\6\37\u07fc\n\37\r\37\16\37\u07fd"+
		"\3\37\3\37\3\37\7\37\u0803\n\37\f\37\16\37\u0806\13\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u084a\n\37\3\37\3\37\3\37\5\37"+
		"\u084f\n\37\3 \3 \3 \3 \3 \3 \3 \6 \u0858\n \r \16 \u0859\3 \3 \3 \3 "+
		"\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 "+
		"\3 \3 \3 \3 \3 \3 \3 \6 \u087e\n \r \16 \u087f\3 \3 \3 \3 \3 \6 \u0887"+
		"\n \r \16 \u0888\3 \3 \3 \3 \3 \3 \6 \u0891\n \r \16 \u0892\3 \3 \3 \3"+
		" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3"+
		" \3 \3 \3 \3 \3 \3 \7 \u08b6\n \f \16 \u08b9\13 \3 \3 \3 \3 \3 \3 \3 "+
		"\3 \3 \3 \3 \3 \3 \3 \3 \5 \u08ca\n \3 \3 \3 \3 \6 \u08d0\n \r \16 \u08d1"+
		"\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \6 \u08de\n \r \16 \u08df\3 \3 \3 \3 \3"+
		" \5 \u08e7\n \3 \3 \3 \3 \6 \u08ed\n \r \16 \u08ee\3 \3 \3 \3 \3 \5 \u08f6"+
		"\n \3 \3 \3 \3 \5 \u08fc\n \3 \3 \3 \3 \5 \u0902\n \3 \3 \3 \3 \3 \3 "+
		"\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 "+
		"\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 "+
		"\3 \3 \3 \3 \6 \u093c\n \r \16 \u093d\3 \3 \3 \3 \3 \3 \3 \3 \6 \u0948"+
		"\n \r \16 \u0949\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \7 \u0957\n \f \16 \u095a"+
		"\13 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u0964\n \3!\3!\3!\3!\3!\3!\3!\5!\u096d"+
		"\n!\3!\5!\u0970\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u097d\n!\f!\16"+
		"!\u0980\13!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0990\n!\7!\u0992"+
		"\n!\f!\16!\u0995\13!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u09a0\n!\7!\u09a2\n"+
		"!\f!\16!\u09a5\13!\3!\3!\3!\3!\5!\u09ab\n!\3!\3!\3!\3!\5!\u09b1\n!\7!"+
		"\u09b3\n!\f!\16!\u09b6\13!\3!\3!\3!\3!\5!\u09bc\n!\3!\3!\3!\3!\5!\u09c2"+
		"\n!\7!\u09c4\n!\f!\16!\u09c7\13!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3"+
		"!\3!\3!\3!\3!\7!\u09da\n!\f!\16!\u09dd\13!\3!\3!\3!\3!\5!\u09e3\n!\3!"+
		"\3!\3!\3!\3!\3!\3!\3!\3!\7!\u09ee\n!\f!\16!\u09f1\13!\3!\3!\3!\3!\5!\u09f7"+
		"\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u0a02\n!\f!\16!\u0a05\13!\3!\3!\3!\3"+
		"!\5!\u0a0b\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u0a17\n!\f!\16!\u0a1a\13"+
		"!\3!\3!\3!\3!\5!\u0a20\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0a2c\n!\5"+
		"!\u0a2e\n!\3!\3!\3!\5!\u0a33\n!\3!\3!\3!\3!\3!\3!\3!\5!\u0a3c\n!\3!\3"+
		"!\3!\5!\u0a41\n!\3!\3!\3!\3!\5!\u0a47\n!\3\"\3\"\5\"\u0a4b\n\"\3\"\7\""+
		"\u0a4e\n\"\f\"\16\"\u0a51\13\"\3\"\5\"\u0a54\n\"\3\"\3\"\3\"\3\"\5\"\u0a5a"+
		"\n\"\5\"\u0a5c\n\"\3\"\5\"\u0a5f\n\"\3#\3#\3#\3$\5$\u0a65\n$\3$\6$\u0a68"+
		"\n$\r$\16$\u0a69\3%\3%\3%\5%\u0a6f\n%\3&\3&\5&\u0a73\n&\3\'\3\'\5\'\u0a77"+
		"\n\'\3(\3(\3(\3(\5(\u0a7d\n(\3(\3(\3(\6(\u0a82\n(\r(\16(\u0a83\7(\u0a86"+
		"\n(\f(\16(\u0a89\13(\3)\3)\5)\u0a8d\n)\3*\3*\5*\u0a91\n*\3*\3*\5*\u0a95"+
		"\n*\7*\u0a97\n*\f*\16*\u0a9a\13*\3*\3*\3*\3*\3*\7*\u0aa1\n*\f*\16*\u0aa4"+
		"\13*\3*\3*\3*\3*\3*\3*\7*\u0aac\n*\f*\16*\u0aaf\13*\3*\3*\5*\u0ab3\n*"+
		"\3+\3+\3+\6+\u0ab8\n+\r+\16+\u0ab9\3+\3+\3+\3+\3+\5+\u0ac1\n+\3,\3,\3"+
		",\3,\5,\u0ac7\n,\3-\6-\u0aca\n-\r-\16-\u0acb\3.\3.\3.\5.\u0ad1\n.\3/\3"+
		"/\3/\3/\5/\u0ad7\n/\3/\6/\u0ada\n/\r/\16/\u0adb\3/\3/\3/\3/\3/\5/\u0ae3"+
		"\n/\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u0aef\n\62"+
		"\f\62\16\62\u0af2\13\62\3\62\3\62\3\62\5\62\u0af7\n\62\3\62\3\62\3\62"+
		"\7\62\u0afc\n\62\f\62\16\62\u0aff\13\62\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\5\63\u0b08\n\63\3\63\7\63\u0b0b\n\63\f\63\16\63\u0b0e\13\63\3\63"+
		"\7\63\u0b11\n\63\f\63\16\63\u0b14\13\63\3\64\3\64\5\64\u0b18\n\64\3\65"+
		"\3\65\3\65\5\65\u0b1d\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\3\65\3\65\3\65\5\65\u0b2d\n\65\3\65\3\65\3\65\5\65\u0b32\n"+
		"\65\3\65\3\65\3\65\5\65\u0b37\n\65\3\65\3\65\3\65\5\65\u0b3c\n\65\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\5\66\u0b4e\n\66\3\67\3\67\6\67\u0b52\n\67\r\67\16\67\u0b53\3\67"+
		"\3\67\6\67\u0b58\n\67\r\67\16\67\u0b59\3\67\3\67\5\67\u0b5e\n\67\3\67"+
		"\3\67\3\67\7\67\u0b63\n\67\f\67\16\67\u0b66\13\67\3\67\3\67\3\67\3\67"+
		"\3\67\5\67\u0b6d\n\67\3\67\3\67\3\67\5\67\u0b72\n\67\3\67\3\67\3\67\7"+
		"\67\u0b77\n\67\f\67\16\67\u0b7a\13\67\3\67\3\67\3\67\3\67\5\67\u0b80\n"+
		"\67\3\67\3\67\3\67\5\67\u0b85\n\67\3\67\3\67\3\67\7\67\u0b8a\n\67\f\67"+
		"\16\67\u0b8d\13\67\3\67\3\67\3\67\3\67\5\67\u0b93\n\67\3\67\3\67\3\67"+
		"\5\67\u0b98\n\67\3\67\3\67\3\67\7\67\u0b9d\n\67\f\67\16\67\u0ba0\13\67"+
		"\3\67\3\67\3\67\3\67\3\67\3\67\3\67\6\67\u0ba9\n\67\r\67\16\67\u0baa\3"+
		"\67\3\67\3\67\3\67\3\67\3\67\3\67\6\67\u0bb4\n\67\r\67\16\67\u0bb5\3\67"+
		"\3\67\3\67\3\67\3\67\3\67\3\67\6\67\u0bbf\n\67\r\67\16\67\u0bc0\3\67\3"+
		"\67\3\67\3\67\3\67\3\67\5\67\u0bc9\n\67\3\67\3\67\3\67\3\67\3\67\7\67"+
		"\u0bd0\n\67\f\67\16\67\u0bd3\13\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67"+
		"\7\67\u0bdc\n\67\f\67\16\67\u0bdf\13\67\3\67\3\67\3\67\3\67\6\67\u0be5"+
		"\n\67\r\67\16\67\u0be6\5\67\u0be9\n\67\3\67\3\67\3\67\6\67\u0bee\n\67"+
		"\r\67\16\67\u0bef\5\67\u0bf2\n\67\3\67\3\67\3\67\6\67\u0bf7\n\67\r\67"+
		"\16\67\u0bf8\5\67\u0bfb\n\67\3\67\3\67\6\67\u0bff\n\67\r\67\16\67\u0c00"+
		"\5\67\u0c03\n\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u0c0d\n"+
		"\67\3\67\3\67\3\67\3\67\5\67\u0c13\n\67\3\67\3\67\3\67\3\67\3\67\3\67"+
		"\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67"+
		"\3\67\3\67\3\67\3\67\3\67\3\67\3\67\6\67\u0c30\n\67\r\67\16\67\u0c31\3"+
		"\67\5\67\u0c35\n\67\38\38\38\38\38\38\38\38\58\u0c3f\n8\39\39\39\59\u0c44"+
		"\n9\3:\3:\3:\3:\3:\3:\3:\3:\3:\5:\u0c4f\n:\3;\3;\6;\u0c53\n;\r;\16;\u0c54"+
		"\5;\u0c57\n;\3;\3;\3;\3<\3<\3<\7<\u0c5f\n<\f<\16<\u0c62\13<\3<\3<\3<\3"+
		"<\3<\3<\5<\u0c6a\n<\3<\3<\3<\3<\7<\u0c70\n<\f<\16<\u0c73\13<\3<\3<\3<"+
		"\3<\3<\3<\3<\5<\u0c7c\n<\3<\3<\3<\3<\3<\5<\u0c83\n<\3<\3<\3<\3<\3<\3<"+
		"\5<\u0c8b\n<\3<\3<\3<\3<\3<\5<\u0c92\n<\5<\u0c94\n<\3=\3=\3=\3=\3=\3="+
		"\3=\3=\3=\5=\u0c9f\n=\3=\3=\3=\5=\u0ca4\n=\3>\3>\3>\3>\3>\3>\5>\u0cac"+
		"\n>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u0cb7\n>\3?\3?\3?\3?\3@\3@\3@\3@\7@"+
		"\u0cc1\n@\f@\16@\u0cc4\13@\5@\u0cc6\n@\3A\5A\u0cc9\nA\3A\3A\3B\3B\3B\3"+
		"B\3B\5B\u0cd2\nB\3C\3C\3C\5C\u0cd7\nC\3D\5D\u0cda\nD\3D\3D\3D\3D\7D\u0ce0"+
		"\nD\fD\16D\u0ce3\13D\3E\3E\7E\u0ce7\nE\fE\16E\u0cea\13E\3E\3E\3E\3E\3"+
		"E\7E\u0cf1\nE\fE\16E\u0cf4\13E\3E\3E\3E\5E\u0cf9\nE\3F\3F\3G\3G\3G\3G"+
		"\3G\3G\3G\3G\3G\3G\5G\u0d07\nG\3G\3G\3G\3G\3G\3G\3G\5G\u0d10\nG\3G\3G"+
		"\3G\3G\3G\3G\3G\3G\6G\u0d1a\nG\rG\16G\u0d1b\3G\3G\3G\3G\3G\3G\3G\3G\3"+
		"G\3G\3G\3G\3G\3G\3G\5G\u0d2d\nG\3G\3G\5G\u0d31\nG\3G\3G\3G\3G\3G\3G\3"+
		"G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u0d47\nG\3G\3G\7G\u0d4b\n"+
		"G\fG\16G\u0d4e\13G\3G\3G\5G\u0d52\nG\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G"+
		"\u0d5e\nG\3G\3G\3G\5G\u0d63\nG\3G\3G\3G\3G\3G\3G\5G\u0d6b\nG\3G\3G\3G"+
		"\3G\3G\3G\3G\3G\7G\u0d75\nG\fG\16G\u0d78\13G\3G\3G\3G\3G\3G\5G\u0d7f\n"+
		"G\3G\3G\3G\3G\5G\u0d85\nG\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3"+
		"G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\6G\u0da4\nG\rG\16G\u0da5\3"+
		"G\3G\3G\3G\3G\3G\3G\3G\6G\u0db0\nG\rG\16G\u0db1\3G\3G\3G\3G\3G\3G\3G\3"+
		"G\3G\3G\7G\u0dbe\nG\fG\16G\u0dc1\13G\3H\3H\3H\6H\u0dc6\nH\rH\16H\u0dc7"+
		"\3H\5H\u0dcb\nH\3H\3H\3H\3H\3H\3H\7H\u0dd3\nH\fH\16H\u0dd6\13H\3I\3I\3"+
		"I\5I\u0ddb\nI\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u0dea\nJ\3J\3"+
		"J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3"+
		"J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\7J\u0e10\nJ\fJ\16J\u0e13\13J\3J\5J"+
		"\u0e16\nJ\3J\3J\3J\7J\u0e1b\nJ\fJ\16J\u0e1e\13J\3J\3J\3J\7J\u0e23\nJ\f"+
		"J\16J\u0e26\13J\5J\u0e28\nJ\3J\3J\3J\3J\5J\u0e2e\nJ\3J\3J\3J\3J\3J\3J"+
		"\7J\u0e36\nJ\fJ\16J\u0e39\13J\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3"+
		"K\3K\5K\u0e4a\nK\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3"+
		"L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3"+
		"L\3L\3L\5L\u0e77\nL\3M\3M\3N\3N\3N\3N\3N\3N\3N\5N\u0e82\nN\3O\3O\3O\5"+
		"O\u0e87\nO\3P\3P\3P\7P\u0e8c\nP\fP\16P\u0e8f\13P\5P\u0e91\nP\3Q\3Q\7Q"+
		"\u0e95\nQ\fQ\16Q\u0e98\13Q\3Q\3Q\3Q\3R\3R\3R\3R\7R\u0ea1\nR\fR\16R\u0ea4"+
		"\13R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0eb9"+
		"\nR\3S\3S\5S\u0ebd\nS\3T\3T\3T\3T\3T\7T\u0ec4\nT\fT\16T\u0ec7\13T\3U\3"+
		"U\3U\3V\3V\3V\5V\u0ecf\nV\3W\3W\3W\3W\7W\u0ed5\nW\fW\16W\u0ed8\13W\3W"+
		"\3W\3W\5W\u0edd\nW\3X\3X\3X\3X\7X\u0ee3\nX\fX\16X\u0ee6\13X\3X\3X\3X\5"+
		"X\u0eeb\nX\3Y\3Y\3Y\5Y\u0ef0\nY\3Y\3Y\5Y\u0ef4\nY\3Y\3Y\3Y\3Z\3Z\5Z\u0efb"+
		"\nZ\3Z\3Z\5Z\u0eff\nZ\3Z\3Z\3Z\3[\3[\3[\3[\3[\3\\\3\\\3\\\5\\\u0f0c\n"+
		"\\\3\\\3\\\3\\\7\\\u0f11\n\\\f\\\16\\\u0f14\13\\\5\\\u0f16\n\\\3]\3]\5"+
		"]\u0f1a\n]\3]\3]\3^\3^\3^\3_\3_\3_\7_\u0f24\n_\f_\16_\u0f27\13_\3_\3_"+
		"\3_\3`\3`\3`\7`\u0f2f\n`\f`\16`\u0f32\13`\3a\3a\3a\3a\7a\u0f38\na\fa\16"+
		"a\u0f3b\13a\3a\3a\3a\3a\7a\u0f41\na\fa\16a\u0f44\13a\3a\3a\3a\3a\3a\3"+
		"a\3a\7a\u0f4d\na\fa\16a\u0f50\13a\3a\3a\5a\u0f54\na\3a\3a\3a\3a\3a\3a"+
		"\3a\3a\3a\7a\u0f5f\na\fa\16a\u0f62\13a\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3"+
		"b\3b\3b\3b\3b\3b\3b\3b\3b\7b\u0f77\nb\fb\16b\u0f7a\13b\3b\3b\5b\u0f7e"+
		"\nb\3c\3c\3c\7c\u0f83\nc\fc\16c\u0f86\13c\3d\3d\3e\3e\3f\3f\3g\3g\3h\3"+
		"h\3i\3i\3j\3j\3k\3k\3l\3l\3m\3m\3n\3n\3o\3o\3p\3p\3p\5p\u0fa3\np\3p\3"+
		"p\5p\u0fa7\np\3p\3p\5p\u0fab\np\3p\3p\3p\3p\7p\u0fb1\np\fp\16p\u0fb4\13"+
		"p\5p\u0fb6\np\3p\3p\3p\3q\3q\3q\5q\u0fbe\nq\3r\3r\5r\u0fc2\nr\3r\3r\5"+
		"r\u0fc6\nr\3r\3r\3r\3r\3r\5r\u0fcd\nr\3r\3r\3r\5r\u0fd2\nr\3s\3s\3t\3"+
		"t\3t\3t\7t\u0fda\nt\ft\16t\u0fdd\13t\5t\u0fdf\nt\3t\3t\3u\3u\5u\u0fe5"+
		"\nu\3u\3u\3u\3v\3v\3w\3w\3w\5w\u0fef\nw\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w"+
		"\3w\3w\3w\3w\7w\u0fff\nw\fw\16w\u1002\13w\3x\3x\3x\3x\7x\u1008\nx\fx\16"+
		"x\u100b\13x\3x\3x\3x\3x\3x\3x\3x\3x\7x\u1015\nx\fx\16x\u1018\13x\3x\3"+
		"x\3x\3x\3x\3x\3x\7x\u1021\nx\fx\16x\u1024\13x\3x\3x\3x\3x\5x\u102a\nx"+
		"\3y\3y\7y\u102e\ny\fy\16y\u1031\13y\3z\3z\7z\u1035\nz\fz\16z\u1038\13"+
		"z\3z\3z\3z\7z\u103d\nz\fz\16z\u1040\13z\5z\u1042\nz\3{\3{\3{\3{\3{\3{"+
		"\3{\5{\u104b\n{\3{\5{\u104e\n{\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\7|"+
		"\u105c\n|\f|\16|\u105f\13|\5|\u1061\n|\3}\3}\3}\3}\3}\3}\3}\3}\5}\u106b"+
		"\n}\3~\3~\7~\u106f\n~\f~\16~\u1072\13~\3~\3~\3~\3\177\5\177\u1078\n\177"+
		"\3\177\3\177\3\177\5\177\u107d\n\177\3\177\3\177\5\177\u1081\n\177\3\177"+
		"\3\177\3\177\3\177\3\177\3\177\3\177\5\177\u108a\n\177\3\177\3\177\5\177"+
		"\u108e\n\177\3\177\3\177\3\177\3\177\5\177\u1094\n\177\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\7\u0080\u109a\n\u0080\f\u0080\16\u0080\u109d\13\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u10a6"+
		"\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\7\u0080\u10ae"+
		"\n\u0080\f\u0080\16\u0080\u10b1\13\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\5\u0080\u10ba\n\u0080\3\u0080\3\u0080\5\u0080"+
		"\u10be\n\u0080\3\u0081\3\u0081\5\u0081\u10c2\n\u0081\3\u0081\3\u0081\5"+
		"\u0081\u10c6\n\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u10cc\n\u0081"+
		"\3\u0082\3\u0082\5\u0082\u10d0\n\u0082\3\u0082\3\u0082\5\u0082\u10d4\n"+
		"\u0082\3\u0082\7\u0082\u10d7\n\u0082\f\u0082\16\u0082\u10da\13\u0082\3"+
		"\u0083\3\u0083\3\u0083\5\u0083\u10df\n\u0083\3\u0083\3\u0083\5\u0083\u10e3"+
		"\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084\7\u0084\u10e9\n\u0084\f\u0084"+
		"\16\u0084\u10ec\13\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\5\u0084\u10f5\n\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\7\u0084\u10fd\n\u0084\f\u0084\16\u0084\u1100\13\u0084\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u1109\n\u0084"+
		"\3\u0084\3\u0084\5\u0084\u110d\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\6\u0085\u1115\n\u0085\r\u0085\16\u0085\u1116\3\u0085"+
		"\3\u0085\5\u0085\u111b\n\u0085\3\u0086\3\u0086\3\u0086\5\u0086\u1120\n"+
		"\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u112e\n\u0087\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\5\u0089\u1137\n\u0089\3\u0089"+
		"\6\u0089\u113a\n\u0089\r\u0089\16\u0089\u113b\3\u0089\3\u0089\3\u008a"+
		"\5\u008a\u1141\n\u008a\3\u008a\3\u008a\5\u008a\u1145\n\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\5\u008a\u114b\n\u008a\3\u008b\3\u008b\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\5\u008b\u116d\n\u008b\3\u008b\3\u0137\f\20Nbd\u008c\u008e"+
		"\u0092\u00a6\u00c0\u00ec\u008c\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36"+
		" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\2\f\4\2\31\31\63\63\4\2\u013b\u013b\u0142\u0142\4\2QQ\u0150\u0150"+
		"\3\2\u0145\u0149\3\2\u0145\u014a\4\2\u0145\u0149\u014b\u014b\3\2\u013c"+
		"\u013d\4\2\u013b\u013b\u0142\u0143\3\2\u013e\u0141\3\2\u0136\u0138\2\u14cf"+
		"\2\u0117\3\2\2\2\4\u0122\3\2\2\2\6\u012e\3\2\2\2\b\u0132\3\2\2\2\n\u0135"+
		"\3\2\2\2\f\u01b7\3\2\2\2\16\u0209\3\2\2\2\20\u022e\3\2\2\2\22\u024a\3"+
		"\2\2\2\24\u024f\3\2\2\2\26\u0263\3\2\2\2\30\u0265\3\2\2\2\32\u026b\3\2"+
		"\2\2\34\u0281\3\2\2\2\36\u0294\3\2\2\2 \u02a8\3\2\2\2\"\u02ac\3\2\2\2"+
		"$\u02c0\3\2\2\2&\u02dd\3\2\2\2(\u02e8\3\2\2\2*\u02fb\3\2\2\2,\u032a\3"+
		"\2\2\2.\u03cf\3\2\2\2\60\u03d1\3\2\2\2\62\u04b3\3\2\2\2\64\u04b5\3\2\2"+
		"\2\66\u056b\3\2\2\28\u0575\3\2\2\2:\u0752\3\2\2\2<\u084e\3\2\2\2>\u0963"+
		"\3\2\2\2@\u0a46\3\2\2\2B\u0a5e\3\2\2\2D\u0a60\3\2\2\2F\u0a64\3\2\2\2H"+
		"\u0a6b\3\2\2\2J\u0a70\3\2\2\2L\u0a74\3\2\2\2N\u0a7c\3\2\2\2P\u0a8c\3\2"+
		"\2\2R\u0ab2\3\2\2\2T\u0ac0\3\2\2\2V\u0ac6\3\2\2\2X\u0ac9\3\2\2\2Z\u0ad0"+
		"\3\2\2\2\\\u0ae2\3\2\2\2^\u0ae4\3\2\2\2`\u0ae6\3\2\2\2b\u0af6\3\2\2\2"+
		"d\u0b00\3\2\2\2f\u0b15\3\2\2\2h\u0b3b\3\2\2\2j\u0b4d\3\2\2\2l\u0c34\3"+
		"\2\2\2n\u0c3e\3\2\2\2p\u0c43\3\2\2\2r\u0c4e\3\2\2\2t\u0c50\3\2\2\2v\u0c93"+
		"\3\2\2\2x\u0ca3\3\2\2\2z\u0cb6\3\2\2\2|\u0cb8\3\2\2\2~\u0cc5\3\2\2\2\u0080"+
		"\u0cc8\3\2\2\2\u0082\u0cd1\3\2\2\2\u0084\u0cd6\3\2\2\2\u0086\u0cd9\3\2"+
		"\2\2\u0088\u0cf8\3\2\2\2\u008a\u0cfa\3\2\2\2\u008c\u0d84\3\2\2\2\u008e"+
		"\u0dca\3\2\2\2\u0090\u0dda\3\2\2\2\u0092\u0e2d\3\2\2\2\u0094\u0e49\3\2"+
		"\2\2\u0096\u0e76\3\2\2\2\u0098\u0e78\3\2\2\2\u009a\u0e81\3\2\2\2\u009c"+
		"\u0e86\3\2\2\2\u009e\u0e90\3\2\2\2\u00a0\u0e92\3\2\2\2\u00a2\u0eb8\3\2"+
		"\2\2\u00a4\u0ebc\3\2\2\2\u00a6\u0ebe\3\2\2\2\u00a8\u0ec8\3\2\2\2\u00aa"+
		"\u0ece\3\2\2\2\u00ac\u0edc\3\2\2\2\u00ae\u0eea\3\2\2\2\u00b0\u0eec\3\2"+
		"\2\2\u00b2\u0ef8\3\2\2\2\u00b4\u0f03\3\2\2\2\u00b6\u0f08\3\2\2\2\u00b8"+
		"\u0f19\3\2\2\2\u00ba\u0f1d\3\2\2\2\u00bc\u0f20\3\2\2\2\u00be\u0f2b\3\2"+
		"\2\2\u00c0\u0f53\3\2\2\2\u00c2\u0f7d\3\2\2\2\u00c4\u0f7f\3\2\2\2\u00c6"+
		"\u0f87\3\2\2\2\u00c8\u0f89\3\2\2\2\u00ca\u0f8b\3\2\2\2\u00cc\u0f8d\3\2"+
		"\2\2\u00ce\u0f8f\3\2\2\2\u00d0\u0f91\3\2\2\2\u00d2\u0f93\3\2\2\2\u00d4"+
		"\u0f95\3\2\2\2\u00d6\u0f97\3\2\2\2\u00d8\u0f99\3\2\2\2\u00da\u0f9b\3\2"+
		"\2\2\u00dc\u0f9d\3\2\2\2\u00de\u0f9f\3\2\2\2\u00e0\u0fbd\3\2\2\2\u00e2"+
		"\u0fd1\3\2\2\2\u00e4\u0fd3\3\2\2\2\u00e6\u0fd5\3\2\2\2\u00e8\u0fe2\3\2"+
		"\2\2\u00ea\u0fe9\3\2\2\2\u00ec\u0fee\3\2\2\2\u00ee\u1029\3\2\2\2\u00f0"+
		"\u102b\3\2\2\2\u00f2\u1041\3\2\2\2\u00f4\u104d\3\2\2\2\u00f6\u1060\3\2"+
		"\2\2\u00f8\u106a\3\2\2\2\u00fa\u106c\3\2\2\2\u00fc\u1093\3\2\2\2\u00fe"+
		"\u10bd\3\2\2\2\u0100\u10bf\3\2\2\2\u0102\u10cd\3\2\2\2\u0104\u10db\3\2"+
		"\2\2\u0106\u110c\3\2\2\2\u0108\u111a\3\2\2\2\u010a\u111c\3\2\2\2\u010c"+
		"\u112d\3\2\2\2\u010e\u112f\3\2\2\2\u0110\u1136\3\2\2\2\u0112\u114a\3\2"+
		"\2\2\u0114\u116c\3\2\2\2\u0116\u0118\5\4\3\2\u0117\u0116\3\2\2\2\u0118"+
		"\u0119\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\3\3\2\2\2"+
		"\u011b\u0123\5\u00f4{\2\u011c\u011d\5\u0086D\2\u011d\u011e\7\3\2\2\u011e"+
		"\u0123\3\2\2\2\u011f\u0120\5\b\5\2\u0120\u0121\7\3\2\2\u0121\u0123\3\2"+
		"\2\2\u0122\u011b\3\2\2\2\u0122\u011c\3\2\2\2\u0122\u011f\3\2\2\2\u0123"+
		"\5\3\2\2\2\u0124\u012f\7\u0142\2\2\u0125\u012f\7\u013b\2\2\u0126\u012f"+
		"\7\u013e\2\2\u0127\u012f\7\4\2\2\u0128\u012f\7\u013c\2\2\u0129\u012f\7"+
		"\u0157\2\2\u012a\u012f\7\5\2\2\u012b\u012f\7\6\2\2\u012c\u012f\7\7\2\2"+
		"\u012d\u012f\7\b\2\2\u012e\u0124\3\2\2\2\u012e\u0125\3\2\2\2\u012e\u0126"+
		"\3\2\2\2\u012e\u0127\3\2\2\2\u012e\u0128\3\2\2\2\u012e\u0129\3\2\2\2\u012e"+
		"\u012a\3\2\2\2\u012e\u012b\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012d\3\2"+
		"\2\2\u012f\7\3\2\2\2\u0130\u0133\5\f\7\2\u0131\u0133\5\n\6\2\u0132\u0130"+
		"\3\2\2\2\u0132\u0131\3\2\2\2\u0133\t\3\2\2\2\u0134\u0136\13\2\2\2\u0135"+
		"\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0138\3\2\2\2\u0137\u0135\3\2"+
		"\2\2\u0138\13\3\2\2\2\u0139\u013a\7\t\2\2\u013a\u013c\7\u0158\2\2\u013b"+
		"\u0139\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013e\7\n"+
		"\2\2\u013e\u01b8\5\u00a6T\2\u013f\u0140\7\n\2\2\u0140\u0141\7\13\2\2\u0141"+
		"\u01b8\5\u00a6T\2\u0142\u0143\7\n\2\2\u0143\u0144\7\f\2\2\u0144\u01b8"+
		"\5\u00a6T\2\u0145\u0146\7\n\2\2\u0146\u0148\7\13\2\2\u0147\u0149\5\u00a6"+
		"T\2\u0148\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u0148\3\2\2\2\u014a"+
		"\u014b\3\2\2\2\u014b\u01b8\3\2\2\2\u014c\u014d\7\n\2\2\u014d\u014f\7\f"+
		"\2\2\u014e\u0150\5\u00a6T\2\u014f\u014e\3\2\2\2\u0150\u0151\3\2\2\2\u0151"+
		"\u014f\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u01b8\3\2\2\2\u0153\u0154\7\r"+
		"\2\2\u0154\u01b8\5\u0114\u008b\2\u0155\u0156\7\16\2\2\u0156\u01b8\5\u0114"+
		"\u008b\2\u0157\u0158\7\17\2\2\u0158\u015a\5\u0114\u008b\2\u0159\u015b"+
		"\5\u00f0y\2\u015a\u0159\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u01b8\3\2\2"+
		"\2\u015c\u015d\7\17\2\2\u015d\u015e\5\u0114\u008b\2\u015e\u015f\5\u00ec"+
		"w\2\u015f\u01b8\3\2\2\2\u0160\u0161\7\17\2\2\u0161\u0163\5\u0114\u008b"+
		"\2\u0162\u0164\5\u00f0y\2\u0163\u0162\3\2\2\2\u0163\u0164\3\2\2\2\u0164"+
		"\u0165\3\2\2\2\u0165\u0166\7\u0144\2\2\u0166\u0167\5\u00ecw\2\u0167\u01b8"+
		"\3\2\2\2\u0168\u0169\7\17\2\2\u0169\u016a\5\u0114\u008b\2\u016a\u016b"+
		"\7\u014c\2\2\u016b\u0170\5\u00ecw\2\u016c\u016d\7\u014c\2\2\u016d\u016f"+
		"\5\u00ecw\2\u016e\u016c\3\2\2\2\u016f\u0172\3\2\2\2\u0170\u016e\3\2\2"+
		"\2\u0170\u0171\3\2\2\2\u0171\u01b8\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0174"+
		"\7\17\2\2\u0174\u0175\7\20\2\2\u0175\u0176\7\f\2\2\u0176\u01b8\7\21\2"+
		"\2\u0177\u0178\7\17\2\2\u0178\u0179\7\20\2\2\u0179\u017a\7\13\2\2\u017a"+
		"\u01b8\7\21\2\2\u017b\u017c\7\17\2\2\u017c\u017e\5\u0114\u008b\2\u017d"+
		"\u017f\5\u00f0y\2\u017e\u017d\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0182"+
		"\3\2\2\2\u0180\u0181\7\u0144\2\2\u0181\u0183\5\u00ecw\2\u0182\u0180\3"+
		"\2\2\2\u0182\u0183\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0185\7\22\2\2\u0185"+
		"\u0186\5\u00f2z\2\u0186\u01b8\3\2\2\2\u0187\u0188\7\17\2\2\u0188\u0189"+
		"\7\23\2\2\u0189\u018b\5\u0114\u008b\2\u018a\u018c\5\u00f0y\2\u018b\u018a"+
		"\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u01b8\3\2\2\2\u018d\u018e\7\17\2\2"+
		"\u018e\u0190\5\u0114\u008b\2\u018f\u0191\5\u00f0y\2\u0190\u018f\3\2\2"+
		"\2\u0190\u0191\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0193\7\u014c\2\2\u0193"+
		"\u0198\5\u00ecw\2\u0194\u0195\7\u014c\2\2\u0195\u0197\5\u00ecw\2\u0196"+
		"\u0194\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0196\3\2\2\2\u0198\u0199\3\2"+
		"\2\2\u0199\u019b\3\2\2\2\u019a\u0198\3\2\2\2\u019b\u019c\7\22\2\2\u019c"+
		"\u019d\5\u00f2z\2\u019d\u01b8\3\2\2\2\u019e\u019f\7\17\2\2\u019f\u01a1"+
		"\5\u0114\u008b\2\u01a0\u01a2\5\u00f0y\2\u01a1\u01a0\3\2\2\2\u01a1\u01a2"+
		"\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\7\22\2\2\u01a4\u01a9\5\u00f2"+
		"z\2\u01a5\u01a6\7\24\2\2\u01a6\u01a8\5\u00f2z\2\u01a7\u01a5\3\2\2\2\u01a8"+
		"\u01ab\3\2\2\2\u01a9\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01b8\3\2"+
		"\2\2\u01ab\u01a9\3\2\2\2\u01ac\u01ad\7\25\2\2\u01ad\u01b8\5\u00ecw\2\u01ae"+
		"\u01af\7\25\2\2\u01af\u01b4\5\u00ecw\2\u01b0\u01b1\7\24\2\2\u01b1\u01b3"+
		"\5\u00ecw\2\u01b2\u01b0\3\2\2\2\u01b3\u01b6\3\2\2\2\u01b4\u01b2\3\2\2"+
		"\2\u01b4\u01b5\3\2\2\2\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b7\u013b"+
		"\3\2\2\2\u01b7\u013f\3\2\2\2\u01b7\u0142\3\2\2\2\u01b7\u0145\3\2\2\2\u01b7"+
		"\u014c\3\2\2\2\u01b7\u0153\3\2\2\2\u01b7\u0155\3\2\2\2\u01b7\u0157\3\2"+
		"\2\2\u01b7\u015c\3\2\2\2\u01b7\u0160\3\2\2\2\u01b7\u0168\3\2\2\2\u01b7"+
		"\u0173\3\2\2\2\u01b7\u0177\3\2\2\2\u01b7\u017b\3\2\2\2\u01b7\u0187\3\2"+
		"\2\2\u01b7\u018d\3\2\2\2\u01b7\u019e\3\2\2\2\u01b7\u01ac\3\2\2\2\u01b7"+
		"\u01ae\3\2\2\2\u01b8\r\3\2\2\2\u01b9\u020a\7\26\2\2\u01ba\u020a\7\27\2"+
		"\2\u01bb\u020a\7\30\2\2\u01bc\u01be\7\31\2\2\u01bd\u01bf\5\u008aF\2\u01be"+
		"\u01bd\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u020a\3\2\2\2\u01c0\u01c1\7\31"+
		"\2\2\u01c1\u01c3\7\32\2\2\u01c2\u01c4\5\u0114\u008b\2\u01c3\u01c2\3\2"+
		"\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c3\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6"+
		"\u01c9\3\2\2\2\u01c7\u01c8\7\33\2\2\u01c8\u01ca\5b\62\2\u01c9\u01c7\3"+
		"\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u020a\3\2\2\2\u01cb\u01cc\7\31\2\2\u01cc"+
		"\u01cd\7\32\2\2\u01cd\u020a\7\34\2\2\u01ce\u01cf\7\31\2\2\u01cf\u01d0"+
		"\7\32\2\2\u01d0\u020a\7\23\2\2\u01d1\u01d2\7\31\2\2\u01d2\u01d3\7\32\2"+
		"\2\u01d3\u020a\7\35\2\2\u01d4\u01d5\7\31\2\2\u01d5\u01d6\7\32\2\2\u01d6"+
		"\u01d7\7\u0142\2\2\u01d7\u01d9\7\36\2\2\u01d8\u01da\5\u0114\u008b\2\u01d9"+
		"\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01d9\3\2\2\2\u01db\u01dc\3\2"+
		"\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01de\7\37\2\2\u01de\u020a\3\2\2\2\u01df"+
		"\u01e0\7\31\2\2\u01e0\u01e1\7\32\2\2\u01e1\u020a\5\20\t\2\u01e2\u01e3"+
		"\7 \2\2\u01e3\u01e4\7\31\2\2\u01e4\u01e5\7!\2\2\u01e5\u020a\7\u0158\2"+
		"\2\u01e6\u01e7\7\"\2\2\u01e7\u01e8\7\31\2\2\u01e8\u020a\7!\2\2\u01e9\u020a"+
		"\7#\2\2\u01ea\u01eb\7#\2\2\u01eb\u020a\5\u0114\u008b\2\u01ec\u01ed\7#"+
		"\2\2\u01ed\u020a\7\34\2\2\u01ee\u01ef\7$\2\2\u01ef\u01f0\7\u015b\2\2\u01f0"+
		"\u01f1\7\22\2\2\u01f1\u020a\5\u008aF\2\u01f2\u01f3\7%\2\2\u01f3\u01f4"+
		"\7$\2\2\u01f4\u020a\7&\2\2\u01f5\u020a\7\'\2\2\u01f6\u01f7\7\'\2\2\u01f7"+
		"\u020a\7\u015b\2\2\u01f8\u020a\7(\2\2\u01f9\u020a\7)\2\2\u01fa\u01fb\7"+
		")\2\2\u01fb\u020a\7\u015b\2\2\u01fc\u020a\7*\2\2\u01fd\u020a\7+\2\2\u01fe"+
		"\u01ff\7,\2\2\u01ff\u0200\7-\2\2\u0200\u020a\7.\2\2\u0201\u0202\7\u015b"+
		"\2\2\u0202\u0203\7\u0144\2\2\u0203\u020a\7,\2\2\u0204\u020a\7/\2\2\u0205"+
		"\u0206\7\60\2\2\u0206\u020a\7\61\2\2\u0207\u0208\7\62\2\2\u0208\u020a"+
		"\t\2\2\2\u0209\u01b9\3\2\2\2\u0209\u01ba\3\2\2\2\u0209\u01bb\3\2\2\2\u0209"+
		"\u01bc\3\2\2\2\u0209\u01c0\3\2\2\2\u0209\u01cb\3\2\2\2\u0209\u01ce\3\2"+
		"\2\2\u0209\u01d1\3\2\2\2\u0209\u01d4\3\2\2\2\u0209\u01df\3\2\2\2\u0209"+
		"\u01e2\3\2\2\2\u0209\u01e6\3\2\2\2\u0209\u01e9\3\2\2\2\u0209\u01ea\3\2"+
		"\2\2\u0209\u01ec\3\2\2\2\u0209\u01ee\3\2\2\2\u0209\u01f2\3\2\2\2\u0209"+
		"\u01f5\3\2\2\2\u0209\u01f6\3\2\2\2\u0209\u01f8\3\2\2\2\u0209\u01f9\3\2"+
		"\2\2\u0209\u01fa\3\2\2\2\u0209\u01fc\3\2\2\2\u0209\u01fd\3\2\2\2\u0209"+
		"\u01fe\3\2\2\2\u0209\u0201\3\2\2\2\u0209\u0204\3\2\2\2\u0209\u0205\3\2"+
		"\2\2\u0209\u0207\3\2\2\2\u020a\17\3\2\2\2\u020b\u020c\b\t\1\2\u020c\u020d"+
		"\7\64\2\2\u020d\u020e\5\u0114\u008b\2\u020e\u020f\7\22\2\2\u020f\u0210"+
		"\5\22\n\2\u0210\u022f\3\2\2\2\u0211\u0212\7\64\2\2\u0212\u0213\7\u0153"+
		"\2\2\u0213\u0214\7\22\2\2\u0214\u0215\5\u0114\u008b\2\u0215\u0216\5\u0114"+
		"\u008b\2\u0216\u0217\5\u0114\u008b\2\u0217\u022f\3\2\2\2\u0218\u0219\7"+
		"\64\2\2\u0219\u021a\7\65\2\2\u021a\u021b\7\22\2\2\u021b\u021c\7\u0153"+
		"\2\2\u021c\u021d\7\u0142\2\2\u021d\u022f\5\u0114\u008b\2\u021e\u021f\7"+
		"\64\2\2\u021f\u0220\7\66\2\2\u0220\u0221\7\22\2\2\u0221\u0222\7\65\2\2"+
		"\u0222\u0223\t\3\2\2\u0223\u022f\7\u0153\2\2\u0224\u0225\7\64\2\2\u0225"+
		"\u0226\7\66\2\2\u0226\u0227\7\22\2\2\u0227\u0228\7\65\2\2\u0228\u0229"+
		"\7\u0142\2\2\u0229\u022a\7\36\2\2\u022a\u022b\5\u0114\u008b\2\u022b\u022c"+
		"\5\u0114\u008b\2\u022c\u022d\7\37\2\2\u022d\u022f\3\2\2\2\u022e\u020b"+
		"\3\2\2\2\u022e\u0211\3\2\2\2\u022e\u0218\3\2\2\2\u022e\u021e\3\2\2\2\u022e"+
		"\u0224\3\2\2\2\u022f\u0247\3\2\2\2\u0230\u0231\f\f\2\2\u0231\u0232\7\u013e"+
		"\2\2\u0232\u0246\5\20\t\r\u0233\u0234\f\13\2\2\u0234\u0235\7\u013b\2\2"+
		"\u0235\u0246\5\20\t\f\u0236\u0237\f\n\2\2\u0237\u0238\7\u0142\2\2\u0238"+
		"\u0246\5\20\t\13\u0239\u023a\f\t\2\2\u023a\u023b\7\u0142\2\2\u023b\u023d"+
		"\7\36\2\2\u023c\u023e\5\u0114\u008b\2\u023d\u023c\3\2\2\2\u023e\u023f"+
		"\3\2\2\2\u023f\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0241\3\2\2\2\u0241"+
		"\u0242\7\37\2\2\u0242\u0246\3\2\2\2\u0243\u0244\f\b\2\2\u0244\u0246\7"+
		"\u013e\2\2\u0245\u0230\3\2\2\2\u0245\u0233\3\2\2\2\u0245\u0236\3\2\2\2"+
		"\u0245\u0239\3\2\2\2\u0245\u0243\3\2\2\2\u0246\u0249\3\2\2\2\u0247\u0245"+
		"\3\2\2\2\u0247\u0248\3\2\2\2\u0248\21\3\2\2\2\u0249\u0247\3\2\2\2\u024a"+
		"\u024b\7\67\2\2\u024b\23\3\2\2\2\u024c\u024d\5\u0084C\2\u024d\u024e\7"+
		"\u0144\2\2\u024e\u0250\3\2\2\2\u024f\u024c\3\2\2\2\u024f\u0250\3\2\2\2"+
		"\u0250\u0251\3\2\2\2\u0251\u0252\5b\62\2\u0252\u0253\7\3\2\2\u0253\25"+
		"\3\2\2\2\u0254\u0256\5\30\r\2\u0255\u0254\3\2\2\2\u0256\u0257\3\2\2\2"+
		"\u0257\u0255\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0264\3\2\2\2\u0259\u025b"+
		"\5\32\16\2\u025a\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025a\3\2\2\2"+
		"\u025c\u025d\3\2\2\2\u025d\u0264\3\2\2\2\u025e\u0260\5\u0092J\2\u025f"+
		"\u025e\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u025f\3\2\2\2\u0261\u0262\3\2"+
		"\2\2\u0262\u0264\3\2\2\2\u0263\u0255\3\2\2\2\u0263\u025a\3\2\2\2\u0263"+
		"\u025f\3\2\2\2\u0264\27\3\2\2\2\u0265\u0266\7\36\2\2\u0266\u0267\7\u015b"+
		"\2\2\u0267\u0268\7\22\2\2\u0268\u0269\5\u008aF\2\u0269\u026a\7\37\2\2"+
		"\u026a\31\3\2\2\2\u026b\u026c\7\36\2\2\u026c\u026d\5\u0114\u008b\2\u026d"+
		"\u026e\7\22\2\2\u026e\u026f\5\u008aF\2\u026f\u0270\7\37\2\2\u0270\33\3"+
		"\2\2\2\u0271\u0282\5@!\2\u0272\u0282\5> \2\u0273\u0282\5<\37\2\u0274\u0282"+
		"\5:\36\2\u0275\u0282\5\66\34\2\u0276\u0282\5\62\32\2\u0277\u0282\5\60"+
		"\31\2\u0278\u0282\5.\30\2\u0279\u0282\5,\27\2\u027a\u0282\5*\26\2\u027b"+
		"\u0282\5(\25\2\u027c\u0282\5&\24\2\u027d\u0282\5$\23\2\u027e\u0282\5\""+
		"\22\2\u027f\u0282\5 \21\2\u0280\u0282\5\36\20\2\u0281\u0271\3\2\2\2\u0281"+
		"\u0272\3\2\2\2\u0281\u0273\3\2\2\2\u0281\u0274\3\2\2\2\u0281\u0275\3\2"+
		"\2\2\u0281\u0276\3\2\2\2\u0281\u0277\3\2\2\2\u0281\u0278\3\2\2\2\u0281"+
		"\u0279\3\2\2\2\u0281\u027a\3\2\2\2\u0281\u027b\3\2\2\2\u0281\u027c\3\2"+
		"\2\2\u0281\u027d\3\2\2\2\u0281\u027e\3\2\2\2\u0281\u027f\3\2\2\2\u0281"+
		"\u0280\3\2\2\2\u0282\35\3\2\2\2\u0283\u0285\78\2\2\u0284\u0286\7\u0142"+
		"\2\2\u0285\u0284\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0287\3\2\2\2\u0287"+
		"\u0295\7\u015b\2\2\u0288\u028a\79\2\2\u0289\u028b\7\u0142\2\2\u028a\u0289"+
		"\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u028e\7\u015b\2"+
		"\2\u028d\u028f\7\u0142\2\2\u028e\u028d\3\2\2\2\u028e\u028f\3\2\2\2\u028f"+
		"\u0290\3\2\2\2\u0290\u0295\7\u015b\2\2\u0291\u0295\7:\2\2\u0292\u0295"+
		"\7;\2\2\u0293\u0295\7<\2\2\u0294\u0283\3\2\2\2\u0294\u0288\3\2\2\2\u0294"+
		"\u0291\3\2\2\2\u0294\u0292\3\2\2\2\u0294\u0293\3\2\2\2\u0295\37\3\2\2"+
		"\2\u0296\u02a9\7=\2\2\u0297\u02a9\7>\2\2\u0298\u02a9\7?\2\2\u0299\u029b"+
		"\7@\2\2\u029a\u029c\5\u0092J\2\u029b\u029a\3\2\2\2\u029c\u029d\3\2\2\2"+
		"\u029d\u029b\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u02a9\3\2\2\2\u029f\u02a9"+
		"\7A\2\2\u02a0\u02a2\7B\2\2\u02a1\u02a3\5\u0092J\2\u02a2\u02a1\3\2\2\2"+
		"\u02a3\u02a4\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a9"+
		"\3\2\2\2\u02a6\u02a9\7C\2\2\u02a7\u02a9\7D\2\2\u02a8\u0296\3\2\2\2\u02a8"+
		"\u0297\3\2\2\2\u02a8\u0298\3\2\2\2\u02a8\u0299\3\2\2\2\u02a8\u029f\3\2"+
		"\2\2\u02a8\u02a0\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a7\3\2\2\2\u02a9"+
		"!\3\2\2\2\u02aa\u02ad\7E\2\2\u02ab\u02ad\7F\2\2\u02ac\u02aa\3\2\2\2\u02ac"+
		"\u02ab\3\2\2\2\u02ad#\3\2\2\2\u02ae\u02af\7G\2\2\u02af\u02b0\7H\2\2\u02b0"+
		"\u02b2\5\u0114\u008b\2\u02b1\u02b3\5\u00a6T\2\u02b2\u02b1\3\2\2\2\u02b2"+
		"\u02b3\3\2\2\2\u02b3\u02c1\3\2\2\2\u02b4\u02b5\7G\2\2\u02b5\u02b6\7H\2"+
		"\2\u02b6\u02b8\7\u015b\2\2\u02b7\u02b9\5\u00a6T\2\u02b8\u02b7\3\2\2\2"+
		"\u02b8\u02b9\3\2\2\2\u02b9\u02c1\3\2\2\2\u02ba\u02bc\7I\2\2\u02bb\u02bd"+
		"\5\u0114\u008b\2\u02bc\u02bb\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02bc\3"+
		"\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1\3\2\2\2\u02c0\u02ae\3\2\2\2\u02c0"+
		"\u02b4\3\2\2\2\u02c0\u02ba\3\2\2\2\u02c1%\3\2\2\2\u02c2\u02c3\7J\2\2\u02c3"+
		"\u02de\7K\2\2\u02c4\u02c5\7L\2\2\u02c5\u02c6\5\u0094K\2\u02c6\u02c7\5"+
		"\u0094K\2\u02c7\u02de\3\2\2\2\u02c8\u02c9\7M\2\2\u02c9\u02cc\5\u008aF"+
		"\2\u02ca\u02cb\7\33\2\2\u02cb\u02cd\5\26\f\2\u02cc\u02ca\3\2\2\2\u02cc"+
		"\u02cd\3\2\2\2\u02cd\u02de\3\2\2\2\u02ce\u02cf\7N\2\2\u02cf\u02d2\5\u008a"+
		"F\2\u02d0\u02d1\7\33\2\2\u02d1\u02d3\5\26\f\2\u02d2\u02d0\3\2\2\2\u02d2"+
		"\u02d3\3\2\2\2\u02d3\u02de\3\2\2\2\u02d4\u02d5\7M\2\2\u02d5\u02de\7\u015b"+
		"\2\2\u02d6\u02d7\7N\2\2\u02d7\u02de\7\u015b\2\2\u02d8\u02de\7M\2\2\u02d9"+
		"\u02da\7O\2\2\u02da\u02db\7P\2\2\u02db\u02dc\7Q\2\2\u02dc\u02de\5\u0114"+
		"\u008b\2\u02dd\u02c2\3\2\2\2\u02dd\u02c4\3\2\2\2\u02dd\u02c8\3\2\2\2\u02dd"+
		"\u02ce\3\2\2\2\u02dd\u02d4\3\2\2\2\u02dd\u02d6\3\2\2\2\u02dd\u02d8\3\2"+
		"\2\2\u02dd\u02d9\3\2\2\2\u02de\'\3\2\2\2\u02df\u02e9\7R\2\2\u02e0\u02e9"+
		"\7S\2\2\u02e1\u02e4\7T\2\2\u02e2\u02e3\7U\2\2\u02e3\u02e5\5\u0114\u008b"+
		"\2\u02e4\u02e2\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e9\3\2\2\2\u02e6\u02e7"+
		"\7V\2\2\u02e7\u02e9\5\u008aF\2\u02e8\u02df\3\2\2\2\u02e8\u02e0\3\2\2\2"+
		"\u02e8\u02e1\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e9)\3\2\2\2\u02ea\u02eb\7"+
		"W\2\2\u02eb\u02ec\5\u0094K\2\u02ec\u02ed\5\u0094K\2\u02ed\u02fc\3\2\2"+
		"\2\u02ee\u02ef\7X\2\2\u02ef\u02f0\5\u0094K\2\u02f0\u02f3\5\u0094K\2\u02f1"+
		"\u02f2\7\33\2\2\u02f2\u02f4\5\u0114\u008b\2\u02f3\u02f1\3\2\2\2\u02f3"+
		"\u02f4\3\2\2\2\u02f4\u02fc\3\2\2\2\u02f5\u02f6\7Y\2\2\u02f6\u02fc\5\u008a"+
		"F\2\u02f7\u02f8\7Z\2\2\u02f8\u02fc\5\u008aF\2\u02f9\u02fa\7[\2\2\u02fa"+
		"\u02fc\5\u008aF\2\u02fb\u02ea\3\2\2\2\u02fb\u02ee\3\2\2\2\u02fb\u02f5"+
		"\3\2\2\2\u02fb\u02f7\3\2\2\2\u02fb\u02f9\3\2\2\2\u02fc+\3\2\2\2\u02fd"+
		"\u032b\7\\\2\2\u02fe\u032b\7]\2\2\u02ff\u0300\7^\2\2\u0300\u032b\5b\62"+
		"\2\u0301\u032b\7^\2\2\u0302\u032b\7_\2\2\u0303\u032b\7`\2\2\u0304\u032b"+
		"\7a\2\2\u0305\u0306\7a\2\2\u0306\u0308\7\32\2\2\u0307\u0309\5\u00a6T\2"+
		"\u0308\u0307\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u0308\3\2\2\2\u030a\u030b"+
		"\3\2\2\2\u030b\u032b\3\2\2\2\u030c\u030d\7a\2\2\u030d\u030f\7\33\2\2\u030e"+
		"\u0310\5\u0114\u008b\2\u030f\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u030f"+
		"\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u032b\3\2\2\2\u0313\u0314\7a\2\2\u0314"+
		"\u0315\7b\2\2\u0315\u0317\7\32\2\2\u0316\u0318\5\u00a6T\2\u0317\u0316"+
		"\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u0317\3\2\2\2\u0319\u031a\3\2\2\2\u031a"+
		"\u031b\3\2\2\2\u031b\u031d\7\33\2\2\u031c\u031e\5\u0114\u008b\2\u031d"+
		"\u031c\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u031d\3\2\2\2\u031f\u0320\3\2"+
		"\2\2\u0320\u032b\3\2\2\2\u0321\u032b\7c\2\2\u0322\u032b\7d\2\2\u0323\u0324"+
		"\7c\2\2\u0324\u0326\7\33\2\2\u0325\u0327\5\u0094K\2\u0326\u0325\3\2\2"+
		"\2\u0327\u0328\3\2\2\2\u0328\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032b"+
		"\3\2\2\2\u032a\u02fd\3\2\2\2\u032a\u02fe\3\2\2\2\u032a\u02ff\3\2\2\2\u032a"+
		"\u0301\3\2\2\2\u032a\u0302\3\2\2\2\u032a\u0303\3\2\2\2\u032a\u0304\3\2"+
		"\2\2\u032a\u0305\3\2\2\2\u032a\u030c\3\2\2\2\u032a\u0313\3\2\2\2\u032a"+
		"\u0321\3\2\2\2\u032a\u0322\3\2\2\2\u032a\u0323\3\2\2\2\u032b-\3\2\2\2"+
		"\u032c\u03d0\7e\2\2\u032d\u03d0\7f\2\2\u032e\u032f\7e\2\2\u032f\u03d0"+
		"\7\u015b\2\2\u0330\u0331\7f\2\2\u0331\u03d0\7\u015b\2\2\u0332\u0333\7"+
		"e\2\2\u0333\u03d0\7g\2\2\u0334\u0335\7e\2\2\u0335\u0337\7\33\2\2\u0336"+
		"\u0338\5\u0114\u008b\2\u0337\u0336\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u0337"+
		"\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u03d0\3\2\2\2\u033b\u033c\7f\2\2\u033c"+
		"\u033e\7\33\2\2\u033d\u033f\5\u0114\u008b\2\u033e\u033d\3\2\2\2\u033f"+
		"\u0340\3\2\2\2\u0340\u033e\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u03d0\3\2"+
		"\2\2\u0342\u0343\7f\2\2\u0343\u03d0\7g\2\2\u0344\u0345\7e\2\2\u0345\u0347"+
		"\7\32\2\2\u0346\u0348\5`\61\2\u0347\u0346\3\2\2\2\u0348\u0349\3\2\2\2"+
		"\u0349\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u03d0\3\2\2\2\u034b\u034c"+
		"\7f\2\2\u034c\u034e\7\32\2\2\u034d\u034f\5`\61\2\u034e\u034d\3\2\2\2\u034f"+
		"\u0350\3\2\2\2\u0350\u034e\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u03d0\3\2"+
		"\2\2\u0352\u0353\7e\2\2\u0353\u035a\7\u015b\2\2\u0354\u0356\7\32\2\2\u0355"+
		"\u0357\5`\61\2\u0356\u0355\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0356\3\2"+
		"\2\2\u0358\u0359\3\2\2\2\u0359\u035b\3\2\2\2\u035a\u0354\3\2\2\2\u035a"+
		"\u035b\3\2\2\2\u035b\u0362\3\2\2\2\u035c\u035e\7\33\2\2\u035d\u035f\5"+
		"\u0114\u008b\2\u035e\u035d\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u035e\3\2"+
		"\2\2\u0360\u0361\3\2\2\2\u0361\u0363\3\2\2\2\u0362\u035c\3\2\2\2\u0362"+
		"\u0363\3\2\2\2\u0363\u03d0\3\2\2\2\u0364\u0365\7h\2\2\u0365\u036c\7\u015b"+
		"\2\2\u0366\u0368\7\32\2\2\u0367\u0369\5`\61\2\u0368\u0367\3\2\2\2\u0369"+
		"\u036a\3\2\2\2\u036a\u0368\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036d\3\2"+
		"\2\2\u036c\u0366\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u0374\3\2\2\2\u036e"+
		"\u0370\7\33\2\2\u036f\u0371\5\u0114\u008b\2\u0370\u036f\3\2\2\2\u0371"+
		"\u0372\3\2\2\2\u0372\u0370\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0375\3\2"+
		"\2\2\u0374\u036e\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u03d0\3\2\2\2\u0376"+
		"\u03d0\7h\2\2\u0377\u0378\7i\2\2\u0378\u03d0\7e\2\2\u0379\u03d0\7j\2\2"+
		"\u037a\u037b\7j\2\2\u037b\u037d\7\33\2\2\u037c\u037e\5\u0114\u008b\2\u037d"+
		"\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u037d\3\2\2\2\u037f\u0380\3\2"+
		"\2\2\u0380\u03d0\3\2\2\2\u0381\u0382\7j\2\2\u0382\u03d0\7g\2\2\u0383\u0384"+
		"\7j\2\2\u0384\u0386\7\32\2\2\u0385\u0387\5`\61\2\u0386\u0385\3\2\2\2\u0387"+
		"\u0388\3\2\2\2\u0388\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u03d0\3\2"+
		"\2\2\u038a\u038b\7i\2\2\u038b\u03d0\7j\2\2\u038c\u03d0\7k\2\2\u038d\u038e"+
		"\7l\2\2\u038e\u0390\7\33\2\2\u038f\u0391\5\u0114\u008b\2\u0390\u038f\3"+
		"\2\2\2\u0391\u0392\3\2\2\2\u0392\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393"+
		"\u0396\3\2\2\2\u0394\u0395\7U\2\2\u0395\u0397\7m\2\2\u0396\u0394\3\2\2"+
		"\2\u0396\u0397\3\2\2\2\u0397\u03d0\3\2\2\2\u0398\u0399\7l\2\2\u0399\u039a"+
		"\7\33\2\2\u039a\u03d0\7\u013e\2\2\u039b\u039c\7n\2\2\u039c\u039e\7\33"+
		"\2\2\u039d\u039f\5\u0114\u008b\2\u039e\u039d\3\2\2\2\u039f\u03a0\3\2\2"+
		"\2\u03a0\u039e\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03d0\3\2\2\2\u03a2\u03a3"+
		"\7n\2\2\u03a3\u03a5\7\33\2\2\u03a4\u03a6\5\u0114\u008b\2\u03a5\u03a4\3"+
		"\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8"+
		"\u03a9\3\2\2\2\u03a9\u03aa\7\32\2\2\u03aa\u03ab\5b\62\2\u03ab\u03d0\3"+
		"\2\2\2\u03ac\u03ad\7n\2\2\u03ad\u03af\7\33\2\2\u03ae\u03b0\5\u0114\u008b"+
		"\2\u03af\u03ae\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03af\3\2\2\2\u03b1\u03b2"+
		"\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\7U\2\2\u03b4\u03b5\5\u00a6T\2"+
		"\u03b5\u03d0\3\2\2\2\u03b6\u03b7\7n\2\2\u03b7\u03b9\7\33\2\2\u03b8\u03ba"+
		"\5\u0114\u008b\2\u03b9\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03b9\3"+
		"\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03be\7U\2\2\u03be"+
		"\u03bf\5\u00a6T\2\u03bf\u03c0\7\32\2\2\u03c0\u03c1\5b\62\2\u03c1\u03d0"+
		"\3\2\2\2\u03c2\u03c3\7n\2\2\u03c3\u03c5\7\33\2\2\u03c4\u03c6\5\u0114\u008b"+
		"\2\u03c5\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c7\u03c8"+
		"\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03ca\7U\2\2\u03ca\u03cb\7m\2\2\u03cb"+
		"\u03d0\3\2\2\2\u03cc\u03d0\7o\2\2\u03cd\u03ce\7p\2\2\u03ce\u03d0\5b\62"+
		"\2\u03cf\u032c\3\2\2\2\u03cf\u032d\3\2\2\2\u03cf\u032e\3\2\2\2\u03cf\u0330"+
		"\3\2\2\2\u03cf\u0332\3\2\2\2\u03cf\u0334\3\2\2\2\u03cf\u033b\3\2\2\2\u03cf"+
		"\u0342\3\2\2\2\u03cf\u0344\3\2\2\2\u03cf\u034b\3\2\2\2\u03cf\u0352\3\2"+
		"\2\2\u03cf\u0364\3\2\2\2\u03cf\u0376\3\2\2\2\u03cf\u0377\3\2\2\2\u03cf"+
		"\u0379\3\2\2\2\u03cf\u037a\3\2\2\2\u03cf\u0381\3\2\2\2\u03cf\u0383\3\2"+
		"\2\2\u03cf\u038a\3\2\2\2\u03cf\u038c\3\2\2\2\u03cf\u038d\3\2\2\2\u03cf"+
		"\u0398\3\2\2\2\u03cf\u039b\3\2\2\2\u03cf\u03a2\3\2\2\2\u03cf\u03ac\3\2"+
		"\2\2\u03cf\u03b6\3\2\2\2\u03cf\u03c2\3\2\2\2\u03cf\u03cc\3\2\2\2\u03cf"+
		"\u03cd\3\2\2\2\u03d0/\3\2\2\2\u03d1\u03d2\7q\2\2\u03d2\u03d3\7U\2\2\u03d3"+
		"\u03d8\5\u0114\u008b\2\u03d4\u03d5\7r\2\2\u03d5\u03d7\5\u0114\u008b\2"+
		"\u03d6\u03d4\3\2\2\2\u03d7\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d8\u03d9"+
		"\3\2\2\2\u03d9\61\3\2\2\2\u03da\u03d8\3\2\2\2\u03db\u03df\7s\2\2\u03dc"+
		"\u03de\5\\/\2\u03dd\u03dc\3\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03dd\3\2"+
		"\2\2\u03df\u03e0\3\2\2\2\u03e0\u04b4\3\2\2\2\u03e1\u03df\3\2\2\2\u03e2"+
		"\u03e6\7t\2\2\u03e3\u03e5\5\\/\2\u03e4\u03e3\3\2\2\2\u03e5\u03e8\3\2\2"+
		"\2\u03e6\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u04b4\3\2\2\2\u03e8\u03e6"+
		"\3\2\2\2\u03e9\u03eb\7u\2\2\u03ea\u03ec\7\u0142\2\2\u03eb\u03ea\3\2\2"+
		"\2\u03eb\u03ec\3\2\2\2\u03ec\u03ee\3\2\2\2\u03ed\u03ef\5\u00a6T\2\u03ee"+
		"\u03ed\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f0\u03f1\3\2"+
		"\2\2\u03f1\u04b4\3\2\2\2\u03f2\u03f4\7s\2\2\u03f3\u03f5\7\u0142\2\2\u03f4"+
		"\u03f3\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f7\3\2\2\2\u03f6\u03f8\5\u00a6"+
		"T\2\u03f7\u03f6\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03f7\3\2\2\2\u03f9"+
		"\u03fa\3\2\2\2\u03fa\u04b4\3\2\2\2\u03fb\u03fd\7t\2\2\u03fc\u03fe\7\u0142"+
		"\2\2\u03fd\u03fc\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u0400\3\2\2\2\u03ff"+
		"\u0401\5\u00a6T\2\u0400\u03ff\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0400"+
		"\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u04b4\3\2\2\2\u0404\u04b4\7v\2\2\u0405"+
		"\u04b4\7w\2\2\u0406\u04b4\7x\2\2\u0407\u0408\7x\2\2\u0408\u0409\7U\2\2"+
		"\u0409\u04b4\5\u0114\u008b\2\u040a\u04b4\7y\2\2\u040b\u04b4\7z\2\2\u040c"+
		"\u040e\7z\2\2\u040d\u040f\7\u0142\2\2\u040e\u040d\3\2\2\2\u040e\u040f"+
		"\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u04b4\5\u00a6T\2\u0411\u04b4\7{\2\2"+
		"\u0412\u0413\7{\2\2\u0413\u0414\7U\2\2\u0414\u0419\5\u0114\u008b\2\u0415"+
		"\u0416\7r\2\2\u0416\u0418\5\u0114\u008b\2\u0417\u0415\3\2\2\2\u0418\u041b"+
		"\3\2\2\2\u0419\u0417\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u04b4\3\2\2\2\u041b"+
		"\u0419\3\2\2\2\u041c\u041d\7{\2\2\u041d\u041e\7U\2\2\u041e\u04b4\7\u013e"+
		"\2\2\u041f\u0420\7{\2\2\u0420\u0427\5^\60\2\u0421\u0423\7|\2\2\u0422\u0424"+
		"\7\u015b\2\2\u0423\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0423\3\2\2"+
		"\2\u0425\u0426\3\2\2\2\u0426\u0428\3\2\2\2\u0427\u0421\3\2\2\2\u0427\u0428"+
		"\3\2\2\2\u0428\u04b4\3\2\2\2\u0429\u042a\7{\2\2\u042a\u0431\5\u00a6T\2"+
		"\u042b\u042d\7|\2\2\u042c\u042e\7\u015b\2\2\u042d\u042c\3\2\2\2\u042e"+
		"\u042f\3\2\2\2\u042f\u042d\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0432\3\2"+
		"\2\2\u0431\u042b\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u04b4\3\2\2\2\u0433"+
		"\u0434\7{\2\2\u0434\u043b\7\u0158\2\2\u0435\u0437\7|\2\2\u0436\u0438\7"+
		"\u015b\2\2\u0437\u0436\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u0437\3\2\2\2"+
		"\u0439\u043a\3\2\2\2\u043a\u043c\3\2\2\2\u043b\u0435\3\2\2\2\u043b\u043c"+
		"\3\2\2\2\u043c\u04b4\3\2\2\2\u043d\u043e\7}\2\2\u043e\u0441\5\u00a6T\2"+
		"\u043f\u0440\7U\2\2\u0440\u0442\5\u0114\u008b\2\u0441\u043f\3\2\2\2\u0441"+
		"\u0442\3\2\2\2\u0442\u04b4\3\2\2\2\u0443\u0444\7}\2\2\u0444\u0449\5\u00a6"+
		"T\2\u0445\u0446\7r\2\2\u0446\u0448\5\u00a6T\2\u0447\u0445\3\2\2\2\u0448"+
		"\u044b\3\2\2\2\u0449\u0447\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u04b4\3\2"+
		"\2\2\u044b\u0449\3\2\2\2\u044c\u044d\7}\2\2\u044d\u0452\5\64\33\2\u044e"+
		"\u044f\7r\2\2\u044f\u0451\5\64\33\2\u0450\u044e\3\2\2\2\u0451\u0454\3"+
		"\2\2\2\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u04b4\3\2\2\2\u0454"+
		"\u0452\3\2\2\2\u0455\u0456\7}\2\2\u0456\u04b4\7\u0158\2\2\u0457\u0458"+
		"\7}\2\2\u0458\u0459\7\u0158\2\2\u0459\u045a\7~\2\2\u045a\u04b4\5\u0114"+
		"\u008b\2\u045b\u045c\7}\2\2\u045c\u045d\7\u0158\2\2\u045d\u045e\7|\2\2"+
		"\u045e\u0463\7\u015b\2\2\u045f\u0460\7r\2\2\u0460\u0462\7\u015b\2\2\u0461"+
		"\u045f\3\2\2\2\u0462\u0465\3\2\2\2\u0463\u0461\3\2\2\2\u0463\u0464\3\2"+
		"\2\2\u0464\u0473\3\2\2\2\u0465\u0463\3\2\2\2\u0466\u0467\7r\2\2\u0467"+
		"\u0468\7\u0158\2\2\u0468\u0469\7|\2\2\u0469\u046e\7\u015b\2\2\u046a\u046b"+
		"\7r\2\2\u046b\u046d\7\u015b\2\2\u046c\u046a\3\2\2\2\u046d\u0470\3\2\2"+
		"\2\u046e\u046c\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0472\3\2\2\2\u0470\u046e"+
		"\3\2\2\2\u0471\u0466\3\2\2\2\u0472\u0475\3\2\2\2\u0473\u0471\3\2\2\2\u0473"+
		"\u0474\3\2\2\2\u0474\u04b4\3\2\2\2\u0475\u0473\3\2\2\2\u0476\u0478\7\177"+
		"\2\2\u0477\u0479\5\u008aF\2\u0478\u0477\3\2\2\2\u0479\u047a\3\2\2\2\u047a"+
		"\u0478\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u04b4\3\2\2\2\u047c\u047d\7\u0080"+
		"\2\2\u047d\u04b4\5\u008aF\2\u047e\u047f\7\u0080\2\2\u047f\u0480\5\u008a"+
		"F\2\u0480\u0482\7|\2\2\u0481\u0483\7\u0142\2\2\u0482\u0481\3\2\2\2\u0482"+
		"\u0483\3\2\2\2\u0483\u0485\3\2\2\2\u0484\u0486\7\u015b\2\2\u0485\u0484"+
		"\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0485\3\2\2\2\u0487\u0488\3\2\2\2\u0488"+
		"\u04b4\3\2\2\2\u0489\u048a\7\u0080\2\2\u048a\u048f\5\u008aF\2\u048b\u048c"+
		"\7r\2\2\u048c\u048e\5\u008aF\2\u048d\u048b\3\2\2\2\u048e\u0491\3\2\2\2"+
		"\u048f\u048d\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u04b4\3\2\2\2\u0491\u048f"+
		"\3\2\2\2\u0492\u0493\7\u0080\2\2\u0493\u0494\5\u008aF\2\u0494\u0496\7"+
		"|\2\2\u0495\u0497\7\u0142\2\2\u0496\u0495\3\2\2\2\u0496\u0497\3\2\2\2"+
		"\u0497\u0498\3\2\2\2\u0498\u049d\7\u015b\2\2\u0499\u049a\7r\2\2\u049a"+
		"\u049c\7\u015b\2\2\u049b\u0499\3\2\2\2\u049c\u049f\3\2\2\2\u049d\u049b"+
		"\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04b0\3\2\2\2\u049f\u049d\3\2\2\2\u04a0"+
		"\u04a1\7r\2\2\u04a1\u04a2\5\u008aF\2\u04a2\u04a4\7|\2\2\u04a3\u04a5\7"+
		"\u0142\2\2\u04a4\u04a3\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a6\3\2\2\2"+
		"\u04a6\u04ab\7\u015b\2\2\u04a7\u04a8\7r\2\2\u04a8\u04aa\7\u015b\2\2\u04a9"+
		"\u04a7\3\2\2\2\u04aa\u04ad\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ab\u04ac\3\2"+
		"\2\2\u04ac\u04af\3\2\2\2\u04ad\u04ab\3\2\2\2\u04ae\u04a0\3\2\2\2\u04af"+
		"\u04b2\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b4\3\2"+
		"\2\2\u04b2\u04b0\3\2\2\2\u04b3\u03db\3\2\2\2\u04b3\u03e2\3\2\2\2\u04b3"+
		"\u03e9\3\2\2\2\u04b3\u03f2\3\2\2\2\u04b3\u03fb\3\2\2\2\u04b3\u0404\3\2"+
		"\2\2\u04b3\u0405\3\2\2\2\u04b3\u0406\3\2\2\2\u04b3\u0407\3\2\2\2\u04b3"+
		"\u040a\3\2\2\2\u04b3\u040b\3\2\2\2\u04b3\u040c\3\2\2\2\u04b3\u0411\3\2"+
		"\2\2\u04b3\u0412\3\2\2\2\u04b3\u041c\3\2\2\2\u04b3\u041f\3\2\2\2\u04b3"+
		"\u0429\3\2\2\2\u04b3\u0433\3\2\2\2\u04b3\u043d\3\2\2\2\u04b3\u0443\3\2"+
		"\2\2\u04b3\u044c\3\2\2\2\u04b3\u0455\3\2\2\2\u04b3\u0457\3\2\2\2\u04b3"+
		"\u045b\3\2\2\2\u04b3\u0476\3\2\2\2\u04b3\u047c\3\2\2\2\u04b3\u047e\3\2"+
		"\2\2\u04b3\u0489\3\2\2\2\u04b3\u0492\3\2\2\2\u04b4\63\3\2\2\2\u04b5\u04b6"+
		"\5\u00a6T\2\u04b6\u04b7\7|\2\2\u04b7\u04bc\7\u015b\2\2\u04b8\u04b9\7r"+
		"\2\2\u04b9\u04bb\7\u015b\2\2\u04ba\u04b8\3\2\2\2\u04bb\u04be\3\2\2\2\u04bc"+
		"\u04ba\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\65\3\2\2\2\u04be\u04bc\3\2\2"+
		"\2\u04bf\u04c1\7P\2\2\u04c0\u04c2\58\35\2\u04c1\u04c0\3\2\2\2\u04c1\u04c2"+
		"\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u056c\5\u008aF\2\u04c4\u04c6\7\u0081"+
		"\2\2\u04c5\u04c7\58\35\2\u04c6\u04c5\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7"+
		"\u04c8\3\2\2\2\u04c8\u056c\5\u008aF\2\u04c9\u04ca\7P\2\2\u04ca\u04cc\7"+
		"\u0150\2\2\u04cb\u04cd\58\35\2\u04cc\u04cb\3\2\2\2\u04cc\u04cd\3\2\2\2"+
		"\u04cd\u04ce\3\2\2\2\u04ce\u056c\5\u008aF\2\u04cf\u04d0\7P\2\2\u04d0\u04d2"+
		"\7Q\2\2\u04d1\u04d3\58\35\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3"+
		"\u04d4\3\2\2\2\u04d4\u056c\5\u008aF\2\u04d5\u04d7\7P\2\2\u04d6\u04d8\5"+
		"8\35\2\u04d7\u04d6\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9"+
		"\u04da\5\u008aF\2\u04da\u04db\7U\2\2\u04db\u04dc\7m\2\2\u04dc\u056c\3"+
		"\2\2\2\u04dd\u04df\7P\2\2\u04de\u04e0\58\35\2\u04df\u04de\3\2\2\2\u04df"+
		"\u04e0\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2\5\u008aF\2\u04e2\u04e3"+
		"\7|\2\2\u04e3\u04e4\5F$\2\u04e4\u056c\3\2\2\2\u04e5\u04e7\7P\2\2\u04e6"+
		"\u04e8\58\35\2\u04e7\u04e6\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04e9\3\2"+
		"\2\2\u04e9\u04ea\5\u008aF\2\u04ea\u04eb\7\u0082\2\2\u04eb\u04ec\5b\62"+
		"\2\u04ec\u056c\3\2\2\2\u04ed\u04ef\7P\2\2\u04ee\u04f0\58\35\2\u04ef\u04ee"+
		"\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f2\3\2\2\2\u04f1\u04f3\t\4\2\2\u04f2"+
		"\u04f1\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u0501\5\u0094"+
		"K\2\u04f5\u04f7\7r\2\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f9"+
		"\3\2\2\2\u04f8\u04fa\58\35\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa"+
		"\u04fc\3\2\2\2\u04fb\u04fd\t\4\2\2\u04fc\u04fb\3\2\2\2\u04fc\u04fd\3\2"+
		"\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0500\5\u0094K\2\u04ff\u04f6\3\2\2\2\u0500"+
		"\u0503\3\2\2\2\u0501\u04ff\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u056c\3\2"+
		"\2\2\u0503\u0501\3\2\2\2\u0504\u0505\7\u0083\2\2\u0505\u0506\5\u008aF"+
		"\2\u0506\u0507\7\33\2\2\u0507\u0508\5\u008aF\2\u0508\u0509\7\u0082\2\2"+
		"\u0509\u050a\7b\2\2\u050a\u056c\3\2\2\2\u050b\u050c\7\u0083\2\2\u050c"+
		"\u050d\5\u008aF\2\u050d\u050e\7\33\2\2\u050e\u050f\5\u008aF\2\u050f\u0510"+
		"\7U\2\2\u0510\u0511\7m\2\2\u0511\u056c\3\2\2\2\u0512\u0513\7\u0083\2\2"+
		"\u0513\u0514\5\u008aF\2\u0514\u0515\7\33\2\2\u0515\u0516\5\u008aF\2\u0516"+
		"\u056c\3\2\2\2\u0517\u0518\7\u0083\2\2\u0518\u0519\7\u0150\2\2\u0519\u056c"+
		"\5\u008aF\2\u051a\u051b\7\u0083\2\2\u051b\u051c\7Q\2\2\u051c\u056c\5\u008a"+
		"F\2\u051d\u051e\7\u0083\2\2\u051e\u051f\5\u008aF\2\u051f\u0520\7\33\2"+
		"\2\u0520\u0521\5\u008aF\2\u0521\u0522\7U\2\2\u0522\u0523\7m\2\2\u0523"+
		"\u0524\7\u0082\2\2\u0524\u0525\7b\2\2\u0525\u056c\3\2\2\2\u0526\u0527"+
		"\7\u0083\2\2\u0527\u0528\5\u008aF\2\u0528\u0529\7U\2\2\u0529\u052a\7m"+
		"\2\2\u052a\u052b\7\u0083\2\2\u052b\u052c\7\u0150\2\2\u052c\u052d\5\u008a"+
		"F\2\u052d\u052e\7U\2\2\u052e\u052f\7m\2\2\u052f\u056c\3\2\2\2\u0530\u0531"+
		"\7\u0083\2\2\u0531\u0532\7Q\2\2\u0532\u0533\5\u008aF\2\u0533\u0534\7U"+
		"\2\2\u0534\u0535\7m\2\2\u0535\u056c\3\2\2\2\u0536\u0538\7\u0084\2\2\u0537"+
		"\u0539\5\u0114\u008b\2\u0538\u0537\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u0538"+
		"\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u056c\3\2\2\2\u053c\u056c\7\u0084\2"+
		"\2\u053d\u053e\7\u0085\2\2\u053e\u0541\5\u008aF\2\u053f\u0540\7\u0082"+
		"\2\2\u0540\u0542\5b\62\2\u0541\u053f\3\2\2\2\u0541\u0542\3\2\2\2\u0542"+
		"\u056c\3\2\2\2\u0543\u0544\7\u0086\2\2\u0544\u0545\5\u008aF\2\u0545\u0546"+
		"\7\u0086\2\2\u0546\u0547\5\u008aF\2\u0547\u0548\7\u0082\2\2\u0548\u0549"+
		"\7b\2\2\u0549\u056c\3\2\2\2\u054a\u054b\7\u0087\2\2\u054b\u054c\5\u008a"+
		"F\2\u054c\u054d\7\33\2\2\u054d\u054e\5\u008aF\2\u054e\u054f\7U\2\2\u054f"+
		"\u0550\5\u0114\u008b\2\u0550\u056c\3\2\2\2\u0551\u0552\7\u0087\2\2\u0552"+
		"\u0553\5\u008aF\2\u0553\u0554\7\33\2\2\u0554\u0555\5\u008aF\2\u0555\u056c"+
		"\3\2\2\2\u0556\u0557\7\u0087\2\2\u0557\u0558\5\u008aF\2\u0558\u0559\7"+
		"U\2\2\u0559\u055a\5\u0114\u008b\2\u055a\u056c\3\2\2\2\u055b\u055c\7\u0087"+
		"\2\2\u055c\u055d\5\u008aF\2\u055d\u055e\7|\2\2\u055e\u0562\7\u015b\2\2"+
		"\u055f\u0561\7\u015b\2\2\u0560\u055f\3\2\2\2\u0561\u0564\3\2\2\2\u0562"+
		"\u0560\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0565\3\2\2\2\u0564\u0562\3\2"+
		"\2\2\u0565\u0566\7\33\2\2\u0566\u0569\5\u008aF\2\u0567\u0568\7U\2\2\u0568"+
		"\u056a\5\u0114\u008b\2\u0569\u0567\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056c"+
		"\3\2\2\2\u056b\u04bf\3\2\2\2\u056b\u04c4\3\2\2\2\u056b\u04c9\3\2\2\2\u056b"+
		"\u04cf\3\2\2\2\u056b\u04d5\3\2\2\2\u056b\u04dd\3\2\2\2\u056b\u04e5\3\2"+
		"\2\2\u056b\u04ed\3\2\2\2\u056b\u0504\3\2\2\2\u056b\u050b\3\2\2\2\u056b"+
		"\u0512\3\2\2\2\u056b\u0517\3\2\2\2\u056b\u051a\3\2\2\2\u056b\u051d\3\2"+
		"\2\2\u056b\u0526\3\2\2\2\u056b\u0530\3\2\2\2\u056b\u0536\3\2\2\2\u056b"+
		"\u053c\3\2\2\2\u056b\u053d\3\2\2\2\u056b\u0543\3\2\2\2\u056b\u054a\3\2"+
		"\2\2\u056b\u0551\3\2\2\2\u056b\u0556\3\2\2\2\u056b\u055b\3\2\2\2\u056c"+
		"\67\3\2\2\2\u056d\u056f\7\u015b\2\2\u056e\u056d\3\2\2\2\u056e\u056f\3"+
		"\2\2\2\u056f\u0570\3\2\2\2\u0570\u0576\7\u0088\2\2\u0571\u0573\7\u015b"+
		"\2\2\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0574\3\2\2\2\u0574"+
		"\u0576\7\u0089\2\2\u0575\u056e\3\2\2\2\u0575\u0572\3\2\2\2\u05769\3\2"+
		"\2\2\u0577\u0578\7\u008a\2\2\u0578\u0753\5\u008aF\2\u0579\u057a\7\u008b"+
		"\2\2\u057a\u0753\5\u008aF\2\u057b\u057c\7\u008a\2\2\u057c\u0581\5\u008a"+
		"F\2\u057d\u057e\7r\2\2\u057e\u0580\5\u008aF\2\u057f\u057d\3\2\2\2\u0580"+
		"\u0583\3\2\2\2\u0581\u057f\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0753\3\2"+
		"\2\2\u0583\u0581\3\2\2\2\u0584\u0585\7\u008a\2\2\u0585\u0586\5\u008aF"+
		"\2\u0586\u0587\7\u008c\2\2\u0587\u0588\5R*\2\u0588\u0753\3\2\2\2\u0589"+
		"\u058a\7\u008a\2\2\u058a\u058b\5\u008aF\2\u058b\u058c\7\u008c\2\2\u058c"+
		"\u0594\5R*\2\u058d\u058e\7r\2\2\u058e\u058f\5\u008aF\2\u058f\u0590\7\u008c"+
		"\2\2\u0590\u0591\5R*\2\u0591\u0593\3\2\2\2\u0592\u058d\3\2\2\2\u0593\u0596"+
		"\3\2\2\2\u0594\u0592\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0753\3\2\2\2\u0596"+
		"\u0594\3\2\2\2\u0597\u0598\7\u008a\2\2\u0598\u0599\5\u008aF\2\u0599\u059a"+
		"\7\u008d\2\2\u059a\u059b\5V,\2\u059b\u0753\3\2\2\2\u059c\u059d\7\u008a"+
		"\2\2\u059d\u059e\5\u008aF\2\u059e\u059f\7\33\2\2\u059f\u05a0\5\26\f\2"+
		"\u05a0\u0753\3\2\2\2\u05a1\u05a2\7\u008a\2\2\u05a2\u05a3\5\u008aF\2\u05a3"+
		"\u05a4\7\33\2\2\u05a4\u05a5\5\26\f\2\u05a5\u05a6\7\u008c\2\2\u05a6\u05a7"+
		"\5R*\2\u05a7\u0753\3\2\2\2\u05a8\u05a9\7\u008a\2\2\u05a9\u05aa\5\u008a"+
		"F\2\u05aa\u05ab\7\32\2\2\u05ab\u05ae\5\u008aF\2\u05ac\u05ad\7\33\2\2\u05ad"+
		"\u05af\5\26\f\2\u05ae\u05ac\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u0753\3"+
		"\2\2\2\u05b0\u05b1\7\u008a\2\2\u05b1\u05b2\5\u008aF\2\u05b2\u05b3\7U\2"+
		"\2\u05b3\u05b4\5B\"\2\u05b4\u0753\3\2\2\2\u05b5\u05b6\7\u008a\2\2\u05b6"+
		"\u05b7\5\u008aF\2\u05b7\u05b9\7|\2\2\u05b8\u05ba\7\u015b\2\2\u05b9\u05b8"+
		"\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc"+
		"\u0753\3\2\2\2\u05bd\u05be\7\u008e\2\2\u05be\u05c1\5\u008aF\2\u05bf\u05c0"+
		"\7\33\2\2\u05c0\u05c2\5\26\f\2\u05c1\u05bf\3\2\2\2\u05c1\u05c2\3\2\2\2"+
		"\u05c2\u0753\3\2\2\2\u05c3\u05c4\7\u008f\2\2\u05c4\u05c7\5\u008aF\2\u05c5"+
		"\u05c6\7\33\2\2\u05c6\u05c8\5\26\f\2\u05c7\u05c5\3\2\2\2\u05c7\u05c8\3"+
		"\2\2\2\u05c8\u0753\3\2\2\2\u05c9\u05ca\7\u0090\2\2\u05ca\u05cd\7\u008a"+
		"\2\2\u05cb\u05ce\5\u0114\u008b\2\u05cc\u05ce\7\u015b\2\2\u05cd\u05cb\3"+
		"\2\2\2\u05cd\u05cc\3\2\2\2\u05ce\u0753\3\2\2\2\u05cf\u05d0\7\u0091\2\2"+
		"\u05d0\u0753\5\u008aF\2\u05d1\u05d2\7\u0092\2\2\u05d2\u05d5\5\u008aF\2"+
		"\u05d3\u05d4\7\33\2\2\u05d4\u05d6\5\26\f\2\u05d5\u05d3\3\2\2\2\u05d5\u05d6"+
		"\3\2\2\2\u05d6\u0753\3\2\2\2\u05d7\u05d8\7\u0092\2\2\u05d8\u05d9\5\u008a"+
		"F\2\u05d9\u05da\7\u008c\2\2\u05da\u05dd\5R*\2\u05db\u05dc\7\32\2\2\u05dc"+
		"\u05de\5\u008aF\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u0753"+
		"\3\2\2\2\u05df\u05e0\7\u0092\2\2\u05e0\u05e1\5\u008aF\2\u05e1\u05e2\7"+
		"\32\2\2\u05e2\u05e5\5\u008aF\2\u05e3\u05e4\7\33\2\2\u05e4\u05e6\5\26\f"+
		"\2\u05e5\u05e3\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u0753\3\2\2\2\u05e7\u05e8"+
		"\7\u0092\2\2\u05e8\u05ed\5\u008aF\2\u05e9\u05ea\7r\2\2\u05ea\u05ec\5\u008a"+
		"F\2\u05eb\u05e9\3\2\2\2\u05ec\u05ef\3\2\2\2\u05ed\u05eb\3\2\2\2\u05ed"+
		"\u05ee\3\2\2\2\u05ee\u05f0\3\2\2\2\u05ef\u05ed\3\2\2\2\u05f0\u05f1\7\32"+
		"\2\2\u05f1\u05f2\5\u00a6T\2\u05f2\u0753\3\2\2\2\u05f3\u05f4\7\u0092\2"+
		"\2\u05f4\u05f5\5\u008aF\2\u05f5\u05f6\7U\2\2\u05f6\u05f7\5B\"\2\u05f7"+
		"\u0753\3\2\2\2\u05f8\u05f9\7\u0093\2\2\u05f9\u0753\5\u008aF\2\u05fa\u05fb"+
		"\7\u0092\2\2\u05fb\u05fc\5\u008aF\2\u05fc\u05fd\7\33\2\2\u05fd\u05fe\5"+
		"\26\f\2\u05fe\u05ff\7\u008c\2\2\u05ff\u0600\5R*\2\u0600\u0601\7\32\2\2"+
		"\u0601\u0602\5\u008aF\2\u0602\u0603\7\33\2\2\u0603\u0604\5\26\f\2\u0604"+
		"\u0605\7U\2\2\u0605\u0606\5B\"\2\u0606\u0753\3\2\2\2\u0607\u0608\7\u0093"+
		"\2\2\u0608\u0609\5\u008aF\2\u0609\u060a\7\33\2\2\u060a\u060b\5\26\f\2"+
		"\u060b\u060c\7\u008c\2\2\u060c\u060d\5R*\2\u060d\u060e\7\32\2\2\u060e"+
		"\u060f\5\u008aF\2\u060f\u0610\7\33\2\2\u0610\u0611\5\26\f\2\u0611\u0612"+
		"\7U\2\2\u0612\u0613\5B\"\2\u0613\u0753\3\2\2\2\u0614\u0615\7\u0094\2\2"+
		"\u0615\u0753\5\u008aF\2\u0616\u0617\7\u0095\2\2\u0617\u0753\5\u008aF\2"+
		"\u0618\u0619\7\u0094\2\2\u0619\u061a\5\u008aF\2\u061a\u061b\7\33\2\2\u061b"+
		"\u061c\5\26\f\2\u061c\u0753\3\2\2\2\u061d\u061e\7\u0094\2\2\u061e\u061f"+
		"\5\u008aF\2\u061f\u0620\7\32\2\2\u0620\u0623\5\u008aF\2\u0621\u0622\7"+
		"\33\2\2\u0622\u0624\5\26\f\2\u0623\u0621\3\2\2\2\u0623\u0624\3\2\2\2\u0624"+
		"\u0753\3\2\2\2\u0625\u0626\7\u0094\2\2\u0626\u0627\5\u008aF\2\u0627\u0628"+
		"\7\33\2\2\u0628\u0629\5\26\f\2\u0629\u062a\7\32\2\2\u062a\u062b\5\u008a"+
		"F\2\u062b\u062c\7\33\2\2\u062c\u062d\5\26\f\2\u062d\u0753\3\2\2\2\u062e"+
		"\u062f\7\u0095\2\2\u062f\u0630\5\u008aF\2\u0630\u0631\7\33\2\2\u0631\u0632"+
		"\5\26\f\2\u0632\u0633\7\32\2\2\u0633\u0634\5\u008aF\2\u0634\u0635\7\33"+
		"\2\2\u0635\u0636\5\26\f\2\u0636\u0753\3\2\2\2\u0637\u0638\7\u0096\2\2"+
		"\u0638\u0753\5\u008aF\2\u0639\u063a\7\u0090\2\2\u063a\u063b\7\u0092\2"+
		"\2\u063b\u0753\5\u0114\u008b\2\u063c\u063d\7\u0090\2\2\u063d\u063e\7\u0092"+
		"\2\2\u063e\u0753\7\u015b\2\2\u063f\u0640\7\u0097\2\2\u0640\u0641\7\u0092"+
		"\2\2\u0641\u0642\5\u0114\u008b\2\u0642\u0643\5\u0114\u008b\2\u0643\u0753"+
		"\3\2\2\2\u0644\u0645\7\u0097\2\2\u0645\u0646\7\u0092\2\2\u0646\u0647\7"+
		"\u015b\2\2\u0647\u0753\7\u015b\2\2\u0648\u0649\7O\2\2\u0649\u064a\7\u0092"+
		"\2\2\u064a\u0651\5\u0114\u008b\2\u064b\u064d\7\u0098\2\2\u064c\u064e\5"+
		"\u0114\u008b\2\u064d\u064c\3\2\2\2\u064e\u064f\3\2\2\2\u064f\u064d\3\2"+
		"\2\2\u064f\u0650\3\2\2\2\u0650\u0652\3\2\2\2\u0651\u064b\3\2\2\2\u0651"+
		"\u0652\3\2\2\2\u0652\u0753\3\2\2\2\u0653\u0654\7O\2\2\u0654\u0655\7\u0099"+
		"\2\2\u0655\u0753\5\u0114\u008b\2\u0656\u0657\7G\2\2\u0657\u0658\7\u0092"+
		"\2\2\u0658\u0659\7\36\2\2\u0659\u065b\5\u00a6T\2\u065a\u065c\5\u0094K"+
		"\2\u065b\u065a\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u065b\3\2\2\2\u065d\u065e"+
		"\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u066a\7\37\2\2\u0660\u0661\7\u008c"+
		"\2\2\u0661\u0663\5R*\2\u0662\u0660\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u0664"+
		"\3\2\2\2\u0664\u0665\7\32\2\2\u0665\u0668\5\u008aF\2\u0666\u0667\7\33"+
		"\2\2\u0667\u0669\5\26\f\2\u0668\u0666\3\2\2\2\u0668\u0669\3\2\2\2\u0669"+
		"\u066b\3\2\2\2\u066a\u0662\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u0753\3\2"+
		"\2\2\u066c\u066d\7\u009a\2\2\u066d\u0670\5\u008aF\2\u066e\u066f\7\33\2"+
		"\2\u066f\u0671\5\26\f\2\u0670\u066e\3\2\2\2\u0670\u0671\3\2\2\2\u0671"+
		"\u0753\3\2\2\2\u0672\u0673\7\u009b\2\2\u0673\u0676\5\u008aF\2\u0674\u0675"+
		"\7\33\2\2\u0675\u0677\5\26\f\2\u0676\u0674\3\2\2\2\u0676\u0677\3\2\2\2"+
		"\u0677\u0753\3\2\2\2\u0678\u0679\7\u009a\2\2\u0679\u0753\7\u015b\2\2\u067a"+
		"\u067b\7\u009b\2\2\u067b\u0753\7\u015b\2\2\u067c\u0753\7\u009a\2\2\u067d"+
		"\u067e\7\u009c\2\2\u067e\u0681\5\u008aF\2\u067f\u0680\7\33\2\2\u0680\u0682"+
		"\5\26\f\2\u0681\u067f\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0753\3\2\2\2"+
		"\u0683\u0684\7\u009d\2\2\u0684\u0687\5\u008aF\2\u0685\u0686\7\33\2\2\u0686"+
		"\u0688\5\26\f\2\u0687\u0685\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u0753\3"+
		"\2\2\2\u0689\u068a\7\u009d\2\2\u068a\u0753\7\u015b\2\2\u068b\u068c\7\u009c"+
		"\2\2\u068c\u0753\7\u015b\2\2\u068d\u0753\7\u009c\2\2\u068e\u068f\7\u009c"+
		"\2\2\u068f\u0692\5\u008aF\2\u0690\u0691\7\33\2\2\u0691\u0693\5\26\f\2"+
		"\u0692\u0690\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0696"+
		"\7\u008c\2\2\u0695\u0697\5N(\2\u0696\u0695\3\2\2\2\u0697\u0698\3\2\2\2"+
		"\u0698\u0696\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u0753\3\2\2\2\u069a\u069b"+
		"\7\u009d\2\2\u069b\u069e\5\u008aF\2\u069c\u069d\7\33\2\2\u069d\u069f\5"+
		"\26\f\2\u069e\u069c\3\2\2\2\u069e\u069f\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0"+
		"\u06a2\7\u008c\2\2\u06a1\u06a3\5N(\2\u06a2\u06a1\3\2\2\2\u06a3\u06a4\3"+
		"\2\2\2\u06a4\u06a2\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u0753\3\2\2\2\u06a6"+
		"\u06a8\7\u009c\2\2\u06a7\u06a9\7\u015b\2\2\u06a8\u06a7\3\2\2\2\u06a8\u06a9"+
		"\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ac\7\u008c\2\2\u06ab\u06ad\5N(\2"+
		"\u06ac\u06ab\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06ac\3\2\2\2\u06ae\u06af"+
		"\3\2\2\2\u06af\u0753\3\2\2\2\u06b0\u06b2\7\u009d\2\2\u06b1\u06b3\7\u015b"+
		"\2\2\u06b2\u06b1\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4"+
		"\u06b6\7\u008c\2\2\u06b5\u06b7\5N(\2\u06b6\u06b5\3\2\2\2\u06b7\u06b8\3"+
		"\2\2\2\u06b8\u06b6\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u0753\3\2\2\2\u06ba"+
		"\u06bb\7H\2\2\u06bb\u0753\5\u0114\u008b\2\u06bc\u06bd\7H\2\2\u06bd\u0753"+
		"\7\u015b\2\2\u06be\u06bf\7\u009e\2\2\u06bf\u0753\5\u0114\u008b\2\u06c0"+
		"\u06c1\7\u009e\2\2\u06c1\u0753\7\u015b\2\2\u06c2\u06c3\7H\2\2\u06c3\u06c4"+
		"\5\u0114\u008b\2\u06c4\u06c5\7\u008c\2\2\u06c5\u06c6\5N(\2\u06c6\u0753"+
		"\3\2\2\2\u06c7\u06c8\7H\2\2\u06c8\u06c9\7\u015b\2\2\u06c9\u06ca\7\u008c"+
		"\2\2\u06ca\u0753\5N(\2\u06cb\u06cc\7\u009e\2\2\u06cc\u06cd\5\u0114\u008b"+
		"\2\u06cd\u06ce\7\u008c\2\2\u06ce\u06cf\5N(\2\u06cf\u0753\3\2\2\2\u06d0"+
		"\u06d1\7\u009e\2\2\u06d1\u06d2\7\u015b\2\2\u06d2\u06d3\7\u008c\2\2\u06d3"+
		"\u0753\5N(\2\u06d4\u06d5\7\u009e\2\2\u06d5\u06d6\5\u0114\u008b\2\u06d6"+
		"\u06d8\7U\2\2\u06d7\u06d9\5\u0114\u008b\2\u06d8\u06d7\3\2\2\2\u06d9\u06da"+
		"\3\2\2\2\u06da\u06d8\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u0753\3\2\2\2\u06dc"+
		"\u06dd\7H\2\2\u06dd\u06de\5\u0114\u008b\2\u06de\u06e0\7U\2\2\u06df\u06e1"+
		"\5\u0114\u008b\2\u06e0\u06df\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2\u06e0\3"+
		"\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u0753\3\2\2\2\u06e4\u06e5\7H\2\2\u06e5"+
		"\u06e6\5\u0114\u008b\2\u06e6\u06e7\7\u008c\2\2\u06e7\u06e8\5N(\2\u06e8"+
		"\u06ea\7U\2\2\u06e9\u06eb\5\u0114\u008b\2\u06ea\u06e9\3\2\2\2\u06eb\u06ec"+
		"\3\2\2\2\u06ec\u06ea\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u0753\3\2\2\2\u06ee"+
		"\u06ef\7\u009e\2\2\u06ef\u06f0\5\u0114\u008b\2\u06f0\u06f1\7\u008c\2\2"+
		"\u06f1\u06f2\5N(\2\u06f2\u06f4\7U\2\2\u06f3\u06f5\5\u0114\u008b\2\u06f4"+
		"\u06f3\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f4\3\2\2\2\u06f6\u06f7\3\2"+
		"\2\2\u06f7\u0753\3\2\2\2\u06f8\u06f9\7O\2\2\u06f9\u06fa\7H\2\2\u06fa\u06fd"+
		"\5\u0114\u008b\2\u06fb\u06fc\7\u008c\2\2\u06fc\u06fe\5N(\2\u06fd\u06fb"+
		"\3\2\2\2\u06fd\u06fe\3\2\2\2\u06fe\u0701\3\2\2\2\u06ff\u0700\7\33\2\2"+
		"\u0700\u0702\5\u008aF\2\u0701\u06ff\3\2\2";
	private static final String _serializedATNSegment1 =
		"\2\u0701\u0702\3\2\2\2\u0702\u0753\3\2\2\2\u0703\u0704\7O\2\2\u0704\u0705"+
		"\7\u009e\2\2\u0705\u0708\5\u0114\u008b\2\u0706\u0707\7\u008c\2\2\u0707"+
		"\u0709\5N(\2\u0708\u0706\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u070c\3\2\2"+
		"\2\u070a\u070b\7\33\2\2\u070b\u070d\5\u008aF\2\u070c\u070a\3\2\2\2\u070c"+
		"\u070d\3\2\2\2\u070d\u0753\3\2\2\2\u070e\u070f\7\u0090\2\2\u070f\u0710"+
		"\7H\2\2\u0710\u0713\5\u0114\u008b\2\u0711\u0712\7\u008c\2\2\u0712\u0714"+
		"\5N(\2\u0713\u0711\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0753\3\2\2\2\u0715"+
		"\u0716\7H\2\2\u0716\u0717\5\u0114\u008b\2\u0717\u0718\7\32\2\2\u0718\u071f"+
		"\5\u0114\u008b\2\u0719\u071b\7U\2\2\u071a\u071c\5\u0114\u008b\2\u071b"+
		"\u071a\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u071b\3\2\2\2\u071d\u071e\3\2"+
		"\2\2\u071e\u0720\3\2\2\2\u071f\u0719\3\2\2\2\u071f\u0720\3\2\2\2\u0720"+
		"\u0753\3\2\2\2\u0721\u0753\7\u009f\2\2\u0722\u0723\7\u00a0\2\2\u0723\u0724"+
		"\5\u0114\u008b\2\u0724\u073c\7\u015b\2\2\u0725\u0738\7\33\2\2\u0726\u0727"+
		"\7\36\2\2\u0727\u0729\5\u0114\u008b\2\u0728\u072a\5\u00a2R\2\u0729\u0728"+
		"\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u0729\3\2\2\2\u072b\u072c\3\2\2\2\u072c"+
		"\u0732\3\2\2\2\u072d\u072e\7,\2\2\u072e\u072f\7\u00a1\2\2\u072f\u0730"+
		"\5\u0114\u008b\2\u0730\u0731\7.\2\2\u0731\u0733\3\2\2\2\u0732\u072d\3"+
		"\2\2\2\u0732\u0733\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0735\7\u0144\2\2"+
		"\u0735\u0736\5\u008aF\2\u0736\u0737\7\37\2\2\u0737\u0739\3\2\2\2\u0738"+
		"\u0726\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u0738\3\2\2\2\u073a\u073b\3\2"+
		"\2\2\u073b\u073d\3\2\2\2\u073c\u0725\3\2\2\2\u073c\u073d\3\2\2\2\u073d"+
		"\u0753\3\2\2\2\u073e\u073f\7\u00a2\2\2\u073f\u0750\5\u0114\u008b\2\u0740"+
		"\u074c\7\33\2\2\u0741\u0742\7\36\2\2\u0742\u0744\5\u0114\u008b\2\u0743"+
		"\u0745\5\u00a2R\2\u0744\u0743\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0744"+
		"\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u0749\7\u0144\2"+
		"\2\u0749\u074a\5\u008aF\2\u074a\u074b\7\37\2\2\u074b\u074d\3\2\2\2\u074c"+
		"\u0741\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u074c\3\2\2\2\u074e\u074f\3\2"+
		"\2\2\u074f\u0751\3\2\2\2\u0750\u0740\3\2\2\2\u0750\u0751\3\2\2\2\u0751"+
		"\u0753\3\2\2\2\u0752\u0577\3\2\2\2\u0752\u0579\3\2\2\2\u0752\u057b\3\2"+
		"\2\2\u0752\u0584\3\2\2\2\u0752\u0589\3\2\2\2\u0752\u0597\3\2\2\2\u0752"+
		"\u059c\3\2\2\2\u0752\u05a1\3\2\2\2\u0752\u05a8\3\2\2\2\u0752\u05b0\3\2"+
		"\2\2\u0752\u05b5\3\2\2\2\u0752\u05bd\3\2\2\2\u0752\u05c3\3\2\2\2\u0752"+
		"\u05c9\3\2\2\2\u0752\u05cf\3\2\2\2\u0752\u05d1\3\2\2\2\u0752\u05d7\3\2"+
		"\2\2\u0752\u05df\3\2\2\2\u0752\u05e7\3\2\2\2\u0752\u05f3\3\2\2\2\u0752"+
		"\u05f8\3\2\2\2\u0752\u05fa\3\2\2\2\u0752\u0607\3\2\2\2\u0752\u0614\3\2"+
		"\2\2\u0752\u0616\3\2\2\2\u0752\u0618\3\2\2\2\u0752\u061d\3\2\2\2\u0752"+
		"\u0625\3\2\2\2\u0752\u062e\3\2\2\2\u0752\u0637\3\2\2\2\u0752\u0639\3\2"+
		"\2\2\u0752\u063c\3\2\2\2\u0752\u063f\3\2\2\2\u0752\u0644\3\2\2\2\u0752"+
		"\u0648\3\2\2\2\u0752\u0653\3\2\2\2\u0752\u0656\3\2\2\2\u0752\u066c\3\2"+
		"\2\2\u0752\u0672\3\2\2\2\u0752\u0678\3\2\2\2\u0752\u067a\3\2\2\2\u0752"+
		"\u067c\3\2\2\2\u0752\u067d\3\2\2\2\u0752\u0683\3\2\2\2\u0752\u0689\3\2"+
		"\2\2\u0752\u068b\3\2\2\2\u0752\u068d\3\2\2\2\u0752\u068e\3\2\2\2\u0752"+
		"\u069a\3\2\2\2\u0752\u06a6\3\2\2\2\u0752\u06b0\3\2\2\2\u0752\u06ba\3\2"+
		"\2\2\u0752\u06bc\3\2\2\2\u0752\u06be\3\2\2\2\u0752\u06c0\3\2\2\2\u0752"+
		"\u06c2\3\2\2\2\u0752\u06c7\3\2\2\2\u0752\u06cb\3\2\2\2\u0752\u06d0\3\2"+
		"\2\2\u0752\u06d4\3\2\2\2\u0752\u06dc\3\2\2\2\u0752\u06e4\3\2\2\2\u0752"+
		"\u06ee\3\2\2\2\u0752\u06f8\3\2\2\2\u0752\u0703\3\2\2\2\u0752\u070e\3\2"+
		"\2\2\u0752\u0715\3\2\2\2\u0752\u0721\3\2\2\2\u0752\u0722\3\2\2\2\u0752"+
		"\u073e\3\2\2\2\u0753;\3\2\2\2\u0754\u0755\7\u00a3\2\2\u0755\u0756\7\36"+
		"\2\2\u0756\u0757\5\u0114\u008b\2\u0757\u0758\7\u0144\2\2\u0758\u0759\5"+
		"\u008aF\2\u0759\u075a\7\37\2\2\u075a\u084f\3\2\2\2\u075b\u075c\7\u00a3"+
		"\2\2\u075c\u084f\5\u008aF\2\u075d\u075e\7\u00a3\2\2\u075e\u075f\5\u008a"+
		"F\2\u075f\u0760\7\u0082\2\2\u0760\u0761\5b\62\2\u0761\u084f\3\2\2\2\u0762"+
		"\u0763\7\u00a3\2\2\u0763\u0764\5\u008aF\2\u0764\u0765\7\u008c\2\2\u0765"+
		"\u0766\5N(\2\u0766\u084f\3\2\2\2\u0767\u0768\7\u00a3\2\2\u0768\u0769\5"+
		"\u008aF\2\u0769\u076a\7\u008c\2\2\u076a\u076b\5N(\2\u076b\u076c\7\u0082"+
		"\2\2\u076c\u076d\5b\62\2\u076d\u084f\3\2\2\2\u076e\u076f\7\u00a4\2\2\u076f"+
		"\u0770\5\u008aF\2\u0770\u0771\7\u008c\2\2\u0771\u0772\5N(\2\u0772\u0773"+
		"\7\u0082\2\2\u0773\u0774\5b\62\2\u0774\u084f\3\2\2\2\u0775\u0776\7\u00a3"+
		"\2\2\u0776\u0777\7\36\2\2\u0777\u0778\5\u0114\u008b\2\u0778\u0779\7\22"+
		"\2\2\u0779\u077a\5\u008aF\2\u077a\u077b\7\37\2\2\u077b\u084f\3\2\2\2\u077c"+
		"\u077d\7\u00a5\2\2\u077d\u077e\7\u00a6\2\2\u077e\u0781\5\u008aF\2\u077f"+
		"\u0780\7\u008c\2\2\u0780\u0782\5N(\2\u0781\u077f\3\2\2\2\u0781\u0782\3"+
		"\2\2\2\u0782\u084f\3\2\2\2\u0783\u0784\7\u00a7\2\2\u0784\u0785\7\u00a6"+
		"\2\2\u0785\u0788\5\u008aF\2\u0786\u0787\7\u008c\2\2\u0787\u0789\5N(\2"+
		"\u0788\u0786\3\2\2\2\u0788\u0789\3\2\2\2\u0789\u084f\3\2\2\2\u078a\u078b"+
		"\7\u00a8\2\2\u078b\u078c\7\36\2\2\u078c\u078d\5\u0114\u008b\2\u078d\u078e"+
		"\7\u0144\2\2\u078e\u078f\5\u008aF\2\u078f\u0790\7\37\2\2\u0790\u084f\3"+
		"\2\2\2\u0791\u0792\7\u00a8\2\2\u0792\u084f\5\u008aF\2\u0793\u0794\7\u00a8"+
		"\2\2\u0794\u0795\5\u008aF\2\u0795\u0796\7\u008c\2\2\u0796\u0797\5N(\2"+
		"\u0797\u084f\3\2\2\2\u0798\u0799\7\u00a8\2\2\u0799\u079a\7\36\2\2\u079a"+
		"\u079b\5\u0114\u008b\2\u079b\u079c\7\u0144\2\2\u079c\u079d\5\u008aF\2"+
		"\u079d\u079e\7\37\2\2\u079e\u079f\7\u0082\2\2\u079f\u07a0\5b\62\2\u07a0"+
		"\u084f\3\2\2\2\u07a1\u07a2\7\u00a9\2\2\u07a2\u07a3\7\36\2\2\u07a3\u07a4"+
		"\5\u0114\u008b\2\u07a4\u07a5\7\u0144\2\2\u07a5\u07a6\5\u008aF\2\u07a6"+
		"\u07a7\7\37\2\2\u07a7\u07a8\7\u0082\2\2\u07a8\u07a9\5b\62\2\u07a9\u084f"+
		"\3\2\2\2\u07aa\u07ab\7\u00a8\2\2\u07ab\u07ac\5\u008aF\2\u07ac\u07ad\7"+
		"\u0082\2\2\u07ad\u07ae\5b\62\2\u07ae\u084f\3\2\2\2\u07af\u07b0\7\u00a9"+
		"\2\2\u07b0\u07b1\5\u008aF\2\u07b1\u07b2\7\u0082\2\2\u07b2\u07b3\5b\62"+
		"\2\u07b3\u084f\3\2\2\2\u07b4\u07b5\7\u00a8\2\2\u07b5\u07b6\5\u008aF\2"+
		"\u07b6\u07b7\7\u008c\2\2\u07b7\u07b8\5N(\2\u07b8\u07b9\7\u0082\2\2\u07b9"+
		"\u07ba\5b\62\2\u07ba\u084f\3\2\2\2\u07bb\u07bc\7\u00a9\2\2\u07bc\u07bd"+
		"\5\u008aF\2\u07bd\u07be\7\u008c\2\2\u07be\u07bf\5N(\2\u07bf\u07c0\7\u0082"+
		"\2\2\u07c0\u07c1\5b\62\2\u07c1\u084f\3\2\2\2\u07c2\u07c3\7\u00aa\2\2\u07c3"+
		"\u084f\5\u008aF\2\u07c4\u07c5\7\u00ab\2\2\u07c5\u07c6\7\36\2\2\u07c6\u07ca"+
		"\5\u0114\u008b\2\u07c7\u07c9\5\u0094K\2\u07c8\u07c7\3\2\2\2\u07c9\u07cc"+
		"\3\2\2\2\u07ca\u07c8\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cd\3\2\2\2\u07cc"+
		"\u07ca\3\2\2\2\u07cd\u07d0\7\37\2\2\u07ce\u07cf\7\u008c\2\2\u07cf\u07d1"+
		"\5N(\2\u07d0\u07ce\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u084f\3\2\2\2\u07d2"+
		"\u07d3\7\u00ab\2\2\u07d3\u07d4\5\u0114\u008b\2\u07d4\u07d5\7\33\2\2\u07d5"+
		"\u07d8\5\26\f\2\u07d6\u07d7\7\u008c\2\2\u07d7\u07d9\5N(\2\u07d8\u07d6"+
		"\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u084f\3\2\2\2\u07da\u07dc\7\u00ac\2"+
		"\2\u07db\u07dd\5\u0094K\2\u07dc\u07db\3\2\2\2\u07dd\u07de\3\2\2\2\u07de"+
		"\u07dc\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u084f\3\2\2\2\u07e0\u07e1\7\u00ac"+
		"\2\2\u07e1\u07e2\5\u008aF\2\u07e2\u07e4\7|\2\2\u07e3\u07e5\7\u015b\2\2"+
		"\u07e4\u07e3\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e4\3\2\2\2\u07e6\u07e7"+
		"\3\2\2\2\u07e7\u084f\3\2\2\2\u07e8\u07e9\7\u00ac\2\2\u07e9\u07ea\5\u008a"+
		"F\2\u07ea\u07eb\7\u008c\2\2\u07eb\u07ec\5\u0114\u008b\2\u07ec\u084f\3"+
		"\2\2\2\u07ed\u07ee\7\u00ac\2\2\u07ee\u07ef\5\u008aF\2\u07ef\u07f1\7|\2"+
		"\2\u07f0\u07f2\7\u015b\2\2\u07f1\u07f0\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3"+
		"\u07f1\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f6\7\u008c"+
		"\2\2\u07f6\u0804\5\u0114\u008b\2\u07f7\u07f8\7r\2\2\u07f8\u07f9\5\u008a"+
		"F\2\u07f9\u07fb\7|\2\2\u07fa\u07fc\7\u015b\2\2\u07fb\u07fa\3\2\2\2\u07fc"+
		"\u07fd\3\2\2\2\u07fd\u07fb\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u07ff\3\2"+
		"\2\2\u07ff\u0800\7\u008c\2\2\u0800\u0801\5\u0114\u008b\2\u0801\u0803\3"+
		"\2\2\2\u0802\u07f7\3\2\2\2\u0803\u0806\3\2\2\2\u0804\u0802\3\2\2\2\u0804"+
		"\u0805\3\2\2\2\u0805\u084f\3\2\2\2\u0806\u0804\3\2\2\2\u0807\u0808\7\u00ac"+
		"\2\2\u0808\u0809\7O\2\2\u0809\u084f\5\u008aF\2\u080a\u080b\7\u00ad\2\2"+
		"\u080b\u080c\7\36\2\2\u080c\u080d\5\u0114\u008b\2\u080d\u080e\7\u0144"+
		"\2\2\u080e\u080f\5\u008aF\2\u080f\u0810\7\37\2\2\u0810\u084f\3\2\2\2\u0811"+
		"\u0812\7\u00ae\2\2\u0812\u0813\7\36\2\2\u0813\u0814\7\u0159\2\2\u0814"+
		"\u0815\7\22\2\2\u0815\u0816\5\u008aF\2\u0816\u0817\7\37\2\2\u0817\u084f"+
		"\3\2\2\2\u0818\u0819\7\u00ae\2\2\u0819\u081a\7\36\2\2\u081a\u081b\7\u015b"+
		"\2\2\u081b\u081c\7\22\2\2\u081c\u081d\5\u008aF\2\u081d\u081e\7\37\2\2"+
		"\u081e\u084f\3\2\2\2\u081f\u0820\7\u00ae\2\2\u0820\u0821\7\36\2\2\u0821"+
		"\u0822\7\u015b\2\2\u0822\u0823\7\22\2\2\u0823\u0824\5\u008aF\2\u0824\u0825"+
		"\7\37\2\2\u0825\u0826\7U\2\2\u0826\u0827\5\u0114\u008b\2\u0827\u084f\3"+
		"\2\2\2\u0828\u0829\7\u00ae\2\2\u0829\u082a\7\36\2\2\u082a\u082b\7\u015b"+
		"\2\2\u082b\u082c\7\22\2\2\u082c\u082d\5\u008aF\2\u082d\u082e\7\37\2\2"+
		"\u082e\u082f\7U\2\2\u082f\u0830\7\36\2\2\u0830\u0831\7\u00af\2\2\u0831"+
		"\u0832\7\u00b0\2\2\u0832\u0833\5\u0114\u008b\2\u0833\u0834\7\37\2\2\u0834"+
		"\u084f\3\2\2\2\u0835\u0836\7\u00ae\2\2\u0836\u0837\7\36\2\2\u0837\u0838"+
		"\7\u015b\2\2\u0838\u0839\7\22\2\2\u0839\u083a\5\u008aF\2\u083a\u083b\7"+
		"\37\2\2\u083b\u083c\7U\2\2\u083c\u083d\7\36\2\2\u083d\u083e\7\23\2\2\u083e"+
		"\u083f\7\u00b0\2\2\u083f\u0840\5\u0114\u008b\2\u0840\u0841\7\37\2\2\u0841"+
		"\u084f\3\2\2\2\u0842\u084f\7\u00ae\2\2\u0843\u084f\7\u00b1\2\2\u0844\u084f"+
		"\7\u00b2\2\2\u0845\u0846\7\u00b3\2\2\u0846\u084f\5\u008aF\2\u0847\u0849"+
		"\7\u00b4\2\2\u0848\u084a\5\u0114\u008b\2\u0849\u0848\3\2\2\2\u0849\u084a"+
		"\3\2\2\2\u084a\u084f\3\2\2\2\u084b\u084c\7\u00b5\2\2\u084c\u084f\5\u0114"+
		"\u008b\2\u084d\u084f\7\u00b6\2\2\u084e\u0754\3\2\2\2\u084e\u075b\3\2\2"+
		"\2\u084e\u075d\3\2\2\2\u084e\u0762\3\2\2\2\u084e\u0767\3\2\2\2\u084e\u076e"+
		"\3\2\2\2\u084e\u0775\3\2\2\2\u084e\u077c\3\2\2\2\u084e\u0783\3\2\2\2\u084e"+
		"\u078a\3\2\2\2\u084e\u0791\3\2\2\2\u084e\u0793\3\2\2\2\u084e\u0798\3\2"+
		"\2\2\u084e\u07a1\3\2\2\2\u084e\u07aa\3\2\2\2\u084e\u07af\3\2\2\2\u084e"+
		"\u07b4\3\2\2\2\u084e\u07bb\3\2\2\2\u084e\u07c2\3\2\2\2\u084e\u07c4\3\2"+
		"\2\2\u084e\u07d2\3\2\2\2\u084e\u07da\3\2\2\2\u084e\u07e0\3\2\2\2\u084e"+
		"\u07e8\3\2\2\2\u084e\u07ed\3\2\2\2\u084e\u0807\3\2\2\2\u084e\u080a\3\2"+
		"\2\2\u084e\u0811\3\2\2\2\u084e\u0818\3\2\2\2\u084e\u081f\3\2\2\2\u084e"+
		"\u0828\3\2\2\2\u084e\u0835\3\2\2\2\u084e\u0842\3\2\2\2\u084e\u0843\3\2"+
		"\2\2\u084e\u0844\3\2\2\2\u084e\u0845\3\2\2\2\u084e\u0847\3\2\2\2\u084e"+
		"\u084b\3\2\2\2\u084e\u084d\3\2\2\2\u084f=\3\2\2\2\u0850\u0964\7\u00b7"+
		"\2\2\u0851\u0964\7\u00b8\2\2\u0852\u0853\7\u00b8\2\2\u0853\u0854\7\u00b9"+
		"\2\2\u0854\u0964\5\u0114\u008b\2\u0855\u0857\7\u00b8\2\2\u0856\u0858\5"+
		"\u0114\u008b\2\u0857\u0856\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u0857\3\2"+
		"\2\2\u0859\u085a\3\2\2\2\u085a\u0964\3\2\2\2\u085b\u085c\7\u00b8\2\2\u085c"+
		"\u085d\7\u00ba\2\2\u085d\u0964\5\u0114\u008b\2\u085e\u085f\7\u00b8\2\2"+
		"\u085f\u0860\7\u00ba\2\2\u0860\u0964\7\u015b\2\2\u0861\u0862\7\u00b7\2"+
		"\2\u0862\u0863\7\u00bb\2\2\u0863\u0964\5\u0114\u008b\2\u0864\u0865\7\u00b7"+
		"\2\2\u0865\u0866\7\u00bc\2\2\u0866\u0964\5\u0114\u008b\2\u0867\u0868\7"+
		"\u00b7\2\2\u0868\u0869\7|\2\2\u0869\u0964\7\u00bd\2\2\u086a\u086b\7\u00b7"+
		"\2\2\u086b\u086c\7|\2\2\u086c\u0964\7\u00be\2\2\u086d\u086e\7\u00b7\2"+
		"\2\u086e\u086f\5\u0114\u008b\2\u086f\u0870\7\u00bb\2\2\u0870\u0871\5\u0114"+
		"\u008b\2\u0871\u0964\3\2\2\2\u0872\u0873\7\u00b7\2\2\u0873\u0874\5\u0114"+
		"\u008b\2\u0874\u0875\7\u00bc\2\2\u0875\u0876\5\u0114\u008b\2\u0876\u0964"+
		"\3\2\2\2\u0877\u0878\7\u00b7\2\2\u0878\u0964\5\u0114\u008b\2\u0879\u087a"+
		"\7\u00b8\2\2\u087a\u0964\5X-\2\u087b\u087d\7\u00bf\2\2\u087c\u087e\5\u0114"+
		"\u008b\2\u087d\u087c\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u087d\3\2\2\2\u087f"+
		"\u0880\3\2\2\2\u0880\u0964\3\2\2\2\u0881\u0882\7\u00c0\2\2\u0882\u0964"+
		"\5\u0114\u008b\2\u0883\u0884\7\u00bf\2\2\u0884\u0886\7\u0142\2\2\u0885"+
		"\u0887\5\u0114\u008b\2\u0886\u0885\3\2\2\2\u0887\u0888\3\2\2\2\u0888\u0886"+
		"\3\2\2\2\u0888\u0889\3\2\2\2\u0889\u0964\3\2\2\2\u088a\u0964\7\u00bf\2"+
		"\2\u088b\u088c\7\u00bf\2\2\u088c\u088d\7O\2\2\u088d\u0964\5\u0114\u008b"+
		"\2\u088e\u0890\7\u00c1\2\2\u088f\u0891\5\u0114\u008b\2\u0890\u088f\3\2"+
		"\2\2\u0891\u0892\3\2\2\2\u0892\u0890\3\2\2\2\u0892\u0893\3\2\2\2\u0893"+
		"\u0964\3\2\2\2\u0894\u0895\7\u00c1\2\2\u0895\u0896\7O\2\2\u0896\u0897"+
		"\7\u00b9\2\2\u0897\u0964\5\u0114\u008b\2\u0898\u0899\7\u00c2\2\2\u0899"+
		"\u089a\5\u0114\u008b\2\u089a\u089b\7\u00bb\2\2\u089b\u089c\5\u0114\u008b"+
		"\2\u089c\u0964\3\2\2\2\u089d\u089e\7\u00c2\2\2\u089e\u089f\5\u0114\u008b"+
		"\2\u089f\u08a0\7\u00bc\2\2\u08a0\u08a1\5\u0114\u008b\2\u08a1\u0964\3\2"+
		"\2\2\u08a2\u08a3\7\u00c2\2\2\u08a3\u08a4\5\u0114\u008b\2\u08a4\u08a5\7"+
		"|\2\2\u08a5\u08a6\7\u00bd\2\2\u08a6\u0964\3\2\2\2\u08a7\u08a8\7\u00c2"+
		"\2\2\u08a8\u08a9\5\u0114\u008b\2\u08a9\u08aa\7|\2\2\u08aa\u08ab\7\u00be"+
		"\2\2\u08ab\u0964\3\2\2\2\u08ac\u08ad\7\u00c3\2\2\u08ad\u08ae\5\u0114\u008b"+
		"\2\u08ae\u08af\7\u00c4\2\2\u08af\u08b7\5\u0114\u008b\2\u08b0\u08b1\7r"+
		"\2\2\u08b1\u08b2\5\u0114\u008b\2\u08b2\u08b3\7\u00c4\2\2\u08b3\u08b4\5"+
		"\u0114\u008b\2\u08b4\u08b6\3\2\2\2\u08b5\u08b0\3\2\2\2\u08b6\u08b9\3\2"+
		"\2\2\u08b7\u08b5\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u0964\3\2\2\2\u08b9"+
		"\u08b7\3\2\2\2\u08ba\u08bb\7\u00c5\2\2\u08bb\u08bc\7\36\2\2\u08bc\u08bd"+
		"\5\u0114\u008b\2\u08bd\u08be\7\22\2\2\u08be\u08bf\5\u008aF\2\u08bf\u08c0"+
		"\7\37\2\2\u08c0\u0964\3\2\2\2\u08c1\u08c2\7\u00c5\2\2\u08c2\u08c3\7\36"+
		"\2\2\u08c3\u08c4\5\u0114\u008b\2\u08c4\u08c5\7\22\2\2\u08c5\u08c6\5\u008a"+
		"F\2\u08c6\u08c7\7\37\2\2\u08c7\u08c9\7U\2\2\u08c8\u08ca\5B\"\2\u08c9\u08c8"+
		"\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u0964\3\2\2\2\u08cb\u08cc\7\u00c5\2"+
		"\2\u08cc\u08cd\7\36\2\2\u08cd\u08cf\5\u0114\u008b\2\u08ce\u08d0\5\u00a2"+
		"R\2\u08cf\u08ce\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08cf\3\2\2\2\u08d1"+
		"\u08d2\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d4\7\22\2\2\u08d4\u08d5\5"+
		"\u008aF\2\u08d5\u08d6\7\37\2\2\u08d6\u0964\3\2\2\2\u08d7\u08d8\7\u00c5"+
		"\2\2\u08d8\u0964\5\u008aF\2\u08d9\u08da\7\u00c5\2\2\u08da\u08db\7\36\2"+
		"\2\u08db\u08dd\5\u0114\u008b\2\u08dc\u08de\5\u00a2R\2\u08dd\u08dc\3\2"+
		"\2\2\u08de\u08df\3\2\2\2\u08df\u08dd\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0"+
		"\u08e1\3\2\2\2\u08e1\u08e2\7\22\2\2\u08e2\u08e3\5\u008aF\2\u08e3\u08e4"+
		"\7\37\2\2\u08e4\u08e6\7U\2\2\u08e5\u08e7\5B\"\2\u08e6\u08e5\3\2\2\2\u08e6"+
		"\u08e7\3\2\2\2\u08e7\u0964\3\2\2\2\u08e8\u08e9\7\u00c6\2\2\u08e9\u08ea"+
		"\7\36\2\2\u08ea\u08ec\5\u0114\u008b\2\u08eb\u08ed\5\u00a2R\2\u08ec\u08eb"+
		"\3\2\2\2\u08ed\u08ee\3\2\2\2\u08ee\u08ec\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef"+
		"\u08f0\3\2\2\2\u08f0\u08f1\7\22\2\2\u08f1\u08f2\5\u008aF\2\u08f2\u08f3"+
		"\7\37\2\2\u08f3\u08f5\7U\2\2\u08f4\u08f6\5B\"\2\u08f5\u08f4\3\2\2\2\u08f5"+
		"\u08f6\3\2\2\2\u08f6\u0964\3\2\2\2\u08f7\u08f8\7\u00c5\2\2\u08f8\u08f9"+
		"\5\u008aF\2\u08f9\u08fb\7U\2\2\u08fa\u08fc\5B\"\2\u08fb\u08fa\3\2\2\2"+
		"\u08fb\u08fc\3\2\2\2\u08fc\u0964\3\2\2\2\u08fd\u08fe\7\u00c6\2\2\u08fe"+
		"\u08ff\5\u008aF\2\u08ff\u0901\7U\2\2\u0900\u0902\5B\"\2\u0901\u0900\3"+
		"\2\2\2\u0901\u0902\3\2\2\2\u0902\u0964\3\2\2\2\u0903\u0904\7\u00c7\2\2"+
		"\u0904\u0905\5\u008aF\2\u0905\u0906\7\u008c\2\2\u0906\u0907\5\u0114\u008b"+
		"\2\u0907\u0964\3\2\2\2\u0908\u0909\7\u00c8\2\2\u0909\u090a\5\u008aF\2"+
		"\u090a\u090b\7\u008c\2\2\u090b\u090c\5\u0114\u008b\2\u090c\u0964\3\2\2"+
		"\2\u090d\u090e\7\u00c7\2\2\u090e\u090f\5\u008aF\2\u090f\u0910\7\u008c"+
		"\2\2\u0910\u0911\5\u0114\u008b\2\u0911\u0912\7\u00c9\2\2\u0912\u0913\5"+
		"\u0114\u008b\2\u0913\u0964\3\2\2\2\u0914\u0915\7\u00c8\2\2\u0915\u0916"+
		"\5\u008aF\2\u0916\u0917\7\u008c\2\2\u0917\u0918\5\u0114\u008b\2\u0918"+
		"\u0919\7\u00c9\2\2\u0919\u091a\5\u0114\u008b\2\u091a\u0964\3\2\2\2\u091b"+
		"\u091c\7\u00c7\2\2\u091c\u091d\5\u008aF\2\u091d\u091e\7\u008c\2\2\u091e"+
		"\u091f\5\u0114\u008b\2\u091f\u0920\7U\2\2\u0920\u0921\5B\"\2\u0921\u0964"+
		"\3\2\2\2\u0922\u0923\7\u00c8\2\2\u0923\u0924\5\u008aF\2\u0924\u0925\7"+
		"\u008c\2\2\u0925\u0926\5\u0114\u008b\2\u0926\u0927\7U\2\2\u0927\u0928"+
		"\5B\"\2\u0928\u0964\3\2\2\2\u0929\u092a\7\u00a5\2\2\u092a\u092b\7\36\2"+
		"\2\u092b\u092c\5\u0114\u008b\2\u092c\u092d\7\22\2\2\u092d\u092e\5\u008a"+
		"F\2\u092e\u092f\7\37\2\2\u092f\u0964\3\2\2\2\u0930\u0931\7\u00a7\2\2\u0931"+
		"\u0932\7\36\2\2\u0932\u0933\5\u0114\u008b\2\u0933\u0934\7\22\2\2\u0934"+
		"\u0935\5\u008aF\2\u0935\u0936\7\37\2\2\u0936\u0964\3\2\2\2\u0937\u0938"+
		"\7\u00a5\2\2\u0938\u0939\7\36\2\2\u0939\u093b\5\u0114\u008b\2\u093a\u093c"+
		"\5\u00a2R\2\u093b\u093a\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093b\3\2\2"+
		"\2\u093d\u093e\3\2\2\2\u093e\u093f\3\2\2\2\u093f\u0940\7\22\2\2\u0940"+
		"\u0941\5\u008aF\2\u0941\u0942\7\37\2\2\u0942\u0964\3\2\2\2\u0943\u0944"+
		"\7\u00a7\2\2\u0944\u0945\7\36\2\2\u0945\u0947\5\u0114\u008b\2\u0946\u0948"+
		"\5\u00a2R\2\u0947\u0946\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u0947\3\2\2"+
		"\2\u0949\u094a\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u094c\7\22\2\2\u094c"+
		"\u094d\5\u008aF\2\u094d\u094e\7\37\2\2\u094e\u0964\3\2\2\2\u094f\u0950"+
		"\7\u00a5\2\2\u0950\u0964\5\u008aF\2\u0951\u0952\7\u00a7\2\2\u0952\u0964"+
		"\5\u008aF\2\u0953\u0954\7\u00ca\2\2\u0954\u0958\7\20\2\2\u0955\u0957\5"+
		"\u00a6T\2\u0956\u0955\3\2\2\2\u0957\u095a\3\2\2\2\u0958\u0956\3\2\2\2"+
		"\u0958\u0959\3\2\2\2\u0959\u095b\3\2\2\2\u095a\u0958\3\2\2\2\u095b\u095c"+
		"\7\21\2\2\u095c\u0964\5\u008aF\2\u095d\u095e\7\u00ca\2\2\u095e\u095f\7"+
		"\u00cb\2\2\u095f\u0964\5\u008aF\2\u0960\u0961\7\u00ca\2\2\u0961\u0962"+
		"\7\u00cc\2\2\u0962\u0964\5\u008aF\2\u0963\u0850\3\2\2\2\u0963\u0851\3"+
		"\2\2\2\u0963\u0852\3\2\2\2\u0963\u0855\3\2\2\2\u0963\u085b\3\2\2\2\u0963"+
		"\u085e\3\2\2\2\u0963\u0861\3\2\2\2\u0963\u0864\3\2\2\2\u0963\u0867\3\2"+
		"\2\2\u0963\u086a\3\2\2\2\u0963\u086d\3\2\2\2\u0963\u0872\3\2\2\2\u0963"+
		"\u0877\3\2\2\2\u0963\u0879\3\2\2\2\u0963\u087b\3\2\2\2\u0963\u0881\3\2"+
		"\2\2\u0963\u0883\3\2\2\2\u0963\u088a\3\2\2\2\u0963\u088b\3\2\2\2\u0963"+
		"\u088e\3\2\2\2\u0963\u0894\3\2\2\2\u0963\u0898\3\2\2\2\u0963\u089d\3\2"+
		"\2\2\u0963\u08a2\3\2\2\2\u0963\u08a7\3\2\2\2\u0963\u08ac\3\2\2\2\u0963"+
		"\u08ba\3\2\2\2\u0963\u08c1\3\2\2\2\u0963\u08cb\3\2\2\2\u0963\u08d7\3\2"+
		"\2\2\u0963\u08d9\3\2\2\2\u0963\u08e8\3\2\2\2\u0963\u08f7\3\2\2\2\u0963"+
		"\u08fd\3\2\2\2\u0963\u0903\3\2\2\2\u0963\u0908\3\2\2\2\u0963\u090d\3\2"+
		"\2\2\u0963\u0914\3\2\2\2\u0963\u091b\3\2\2\2\u0963\u0922\3\2\2\2\u0963"+
		"\u0929\3\2\2\2\u0963\u0930\3\2\2\2\u0963\u0937\3\2\2\2\u0963\u0943\3\2"+
		"\2\2\u0963\u094f\3\2\2\2\u0963\u0951\3\2\2\2\u0963\u0953\3\2\2\2\u0963"+
		"\u095d\3\2\2\2\u0963\u0960\3\2\2\2\u0964?\3\2\2\2\u0965\u0966\7\u00cd"+
		"\2\2\u0966\u0a47\5\u008aF\2\u0967\u0968\7\u00ce\2\2\u0968\u0a47\5\u008a"+
		"F\2\u0969\u0a47\7\u00cf\2\2\u096a\u0a47\7\u00d0\2\2\u096b\u096d\7\u0090"+
		"\2\2\u096c\u096b\3\2\2\2\u096c\u096d\3\2\2\2\u096d\u096f\3\2\2\2\u096e"+
		"\u0970\7\u00d1\2\2\u096f\u096e\3\2\2\2\u096f\u0970\3\2\2\2\u0970\u0971"+
		"\3\2\2\2\u0971\u0972\7\u00d2\2\2\u0972\u0a47\5\u0094K\2\u0973\u0974\7"+
		"\u00d3\2\2\u0974\u0975\5\u008aF\2\u0975\u0976\7\33\2\2\u0976\u0977\5\26"+
		"\f\2\u0977\u0a47\3\2\2\2\u0978\u0979\7\u00d3\2\2\u0979\u097e\5\u008aF"+
		"\2\u097a\u097b\7r\2\2\u097b\u097d\5\u008aF\2\u097c\u097a\3\2\2\2\u097d"+
		"\u0980\3\2\2\2\u097e\u097c\3\2\2\2\u097e\u097f\3\2\2\2\u097f\u0a47\3\2"+
		"\2\2\u0980\u097e\3\2\2\2\u0981\u0982\7\u00d4\2\2\u0982\u0a47\5\u008aF"+
		"\2\u0983\u0984\7\u0090\2\2\u0984\u0985\7\u00d3\2\2\u0985\u0a47\5\u008a"+
		"F\2\u0986\u0987\7\u0090\2\2\u0987\u0988\7\u00d3\2\2\u0988\u0989\5\u008a"+
		"F\2\u0989\u098a\7\33\2\2\u098a\u0993\5\26\f\2\u098b\u098c\7r\2\2\u098c"+
		"\u098f\5\u008aF\2\u098d\u098e\7\33\2\2\u098e\u0990\5\26\f\2\u098f\u098d"+
		"\3\2\2\2\u098f\u0990\3\2\2\2\u0990\u0992\3\2\2\2\u0991\u098b\3\2\2\2\u0992"+
		"\u0995\3\2\2\2\u0993\u0991\3\2\2\2\u0993\u0994\3\2\2\2\u0994\u0a47\3\2"+
		"\2\2\u0995\u0993\3\2\2\2\u0996\u0997\7\u0090\2\2\u0997\u0998\7\u00d4\2"+
		"\2\u0998\u0999\5\u008aF\2\u0999\u099a\7\33\2\2\u099a\u09a3\5\26\f\2\u099b"+
		"\u099c\7r\2\2\u099c\u099f\5\u008aF\2\u099d\u099e\7\33\2\2\u099e\u09a0"+
		"\5\26\f\2\u099f\u099d\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0\u09a2\3\2\2\2"+
		"\u09a1\u099b\3\2\2\2\u09a2\u09a5\3\2\2\2\u09a3\u09a1\3\2\2\2\u09a3\u09a4"+
		"\3\2\2\2\u09a4\u0a47\3\2\2\2\u09a5\u09a3\3\2\2\2\u09a6\u09a7\7\u00d3\2"+
		"\2\u09a7\u09aa\5\u008aF\2\u09a8\u09a9\7\33\2\2\u09a9\u09ab\5\26\f\2\u09aa"+
		"\u09a8\3\2\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09b4\3\2\2\2\u09ac\u09ad\7r"+
		"\2\2\u09ad\u09b0\5\u008aF\2\u09ae\u09af\7\33\2\2\u09af\u09b1\5\26\f\2"+
		"\u09b0\u09ae\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1\u09b3\3\2\2\2\u09b2\u09ac"+
		"\3\2\2\2\u09b3\u09b6\3\2\2\2\u09b4\u09b2\3\2\2\2\u09b4\u09b5\3\2\2\2\u09b5"+
		"\u0a47\3\2\2\2\u09b6\u09b4\3\2\2\2\u09b7\u09b8\7\u00d4\2\2\u09b8\u09bb"+
		"\5\u008aF\2\u09b9\u09ba\7\33\2\2\u09ba\u09bc\5\26\f\2\u09bb\u09b9\3\2"+
		"\2\2\u09bb\u09bc\3\2\2\2\u09bc\u09c5\3\2\2\2\u09bd\u09be\7r\2\2\u09be"+
		"\u09c1\5\u008aF\2\u09bf\u09c0\7\33\2\2\u09c0\u09c2\5\26\f\2\u09c1\u09bf"+
		"\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c4\3\2\2\2\u09c3\u09bd\3\2\2\2\u09c4"+
		"\u09c7\3\2\2\2\u09c5\u09c3\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u0a47\3\2"+
		"\2\2\u09c7\u09c5\3\2\2\2\u09c8\u09c9\7\u00d5\2\2\u09c9\u0a47\5\u008aF"+
		"\2\u09ca\u09cb\7\u00d3\2\2\u09cb\u09cc\5\u008aF\2\u09cc\u09cd\7U\2\2\u09cd"+
		"\u09ce\5\u0114\u008b\2\u09ce\u0a47\3\2\2\2\u09cf\u09d0\7\u0090\2\2\u09d0"+
		"\u09d1\7\u00d3\2\2\u09d1\u09d2\5\u008aF\2\u09d2\u09d3\7\33\2\2\u09d3\u09db"+
		"\5\26\f\2\u09d4\u09d5\7r\2\2\u09d5\u09d6\5\u008aF\2\u09d6\u09d7\7\33\2"+
		"\2\u09d7\u09d8\5\26\f\2\u09d8\u09da\3\2\2\2\u09d9\u09d4\3\2\2\2\u09da"+
		"\u09dd\3\2\2\2\u09db\u09d9\3\2\2\2\u09db\u09dc\3\2\2\2\u09dc\u09de\3\2"+
		"\2\2\u09dd\u09db\3\2\2\2\u09de\u09df\7U\2\2\u09df\u09e2\5\u0114\u008b"+
		"\2\u09e0\u09e1\7\u008c\2\2\u09e1\u09e3\5N(\2\u09e2\u09e0\3\2\2\2\u09e2"+
		"\u09e3\3\2\2\2\u09e3\u0a47\3\2\2\2\u09e4\u09e5\7\u00d3\2\2\u09e5\u09e6"+
		"\5\u008aF\2\u09e6\u09e7\7\33\2\2\u09e7\u09ef\5\26\f\2\u09e8\u09e9\7r\2"+
		"\2\u09e9\u09ea\5\u008aF\2\u09ea\u09eb\7\33\2\2\u09eb\u09ec\5\26\f\2\u09ec"+
		"\u09ee\3\2\2\2\u09ed\u09e8\3\2\2\2\u09ee\u09f1\3\2\2\2\u09ef\u09ed\3\2"+
		"\2\2\u09ef\u09f0\3\2\2\2\u09f0\u09f2\3\2\2\2\u09f1\u09ef\3\2\2\2\u09f2"+
		"\u09f3\7U\2\2\u09f3\u09f6\5\u0114\u008b\2\u09f4\u09f5\7\u008c\2\2\u09f5"+
		"\u09f7\5N(\2\u09f6\u09f4\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u0a47\3\2\2"+
		"\2\u09f8\u09f9\7\u00d4\2\2\u09f9\u09fa\5\u008aF\2\u09fa\u09fb\7\33\2\2"+
		"\u09fb\u0a03\5\26\f\2\u09fc\u09fd\7r\2\2\u09fd\u09fe\5\u008aF\2\u09fe"+
		"\u09ff\7\33\2\2\u09ff\u0a00\5\26\f\2\u0a00\u0a02\3\2\2\2\u0a01\u09fc\3"+
		"\2\2\2\u0a02\u0a05\3\2\2\2\u0a03\u0a01\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04"+
		"\u0a06\3\2\2\2\u0a05\u0a03\3\2\2\2\u0a06\u0a07\7U\2\2\u0a07\u0a0a\5\u0114"+
		"\u008b\2\u0a08\u0a09\7\u008c\2\2\u0a09\u0a0b\5N(\2\u0a0a\u0a08\3\2\2\2"+
		"\u0a0a\u0a0b\3\2\2\2\u0a0b\u0a47\3\2\2\2\u0a0c\u0a0d\7\u0090\2\2\u0a0d"+
		"\u0a0e\7\u00d4\2\2\u0a0e\u0a0f\5\u008aF\2\u0a0f\u0a10\7\33\2\2\u0a10\u0a18"+
		"\5\26\f\2\u0a11\u0a12\7r\2\2\u0a12\u0a13\5\u008aF\2\u0a13\u0a14\7\33\2"+
		"\2\u0a14\u0a15\5\26\f\2\u0a15\u0a17\3\2\2\2\u0a16\u0a11\3\2\2\2\u0a17"+
		"\u0a1a\3\2\2\2\u0a18\u0a16\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a1b\3\2"+
		"\2\2\u0a1a\u0a18\3\2\2\2\u0a1b\u0a1c\7U\2\2\u0a1c\u0a1f\5\u0114\u008b"+
		"\2\u0a1d\u0a1e\7\u008c\2\2\u0a1e\u0a20\5N(\2\u0a1f\u0a1d\3\2\2\2\u0a1f"+
		"\u0a20\3\2\2\2\u0a20\u0a47\3\2\2\2\u0a21\u0a22\7\u0090\2\2\u0a22\u0a23"+
		"\7\u00d3\2\2\u0a23\u0a24\5\u008aF\2\u0a24\u0a25\7U\2\2\u0a25\u0a26\5\u0114"+
		"\u008b\2\u0a26\u0a47\3\2\2\2\u0a27\u0a2d\7\u00d6\2\2\u0a28\u0a2b\7\u015b"+
		"\2\2\u0a29\u0a2a\7\33\2\2\u0a2a\u0a2c\5\26\f\2\u0a2b\u0a29\3\2\2\2\u0a2b"+
		"\u0a2c\3\2\2\2\u0a2c\u0a2e\3\2\2\2\u0a2d\u0a28\3\2\2\2\u0a2d\u0a2e\3\2"+
		"\2\2\u0a2e\u0a47\3\2\2\2\u0a2f\u0a32\7\u00d7\2\2\u0a30\u0a31\7\33\2\2"+
		"\u0a31\u0a33\5\26\f\2\u0a32\u0a30\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a47"+
		"\3\2\2\2\u0a34\u0a35\7\u00d8\2\2\u0a35\u0a47\5\u008aF\2\u0a36\u0a37\7"+
		"\u00d8\2\2\u0a37\u0a47\5\26\f\2\u0a38\u0a3b\7\u00d9\2\2\u0a39\u0a3a\7"+
		"\33\2\2\u0a3a\u0a3c\5\26\f\2\u0a3b\u0a39\3\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c"+
		"\u0a47\3\2\2\2\u0a3d\u0a40\7\u00da\2\2\u0a3e\u0a3f\7\33\2\2\u0a3f\u0a41"+
		"\5\26\f\2\u0a40\u0a3e\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a47\3\2\2\2"+
		"\u0a42\u0a47\7\u00db\2\2\u0a43\u0a47\7\u00dc\2\2\u0a44\u0a47\7\u00dd\2"+
		"\2\u0a45\u0a47\7\u00de\2\2\u0a46\u0965\3\2\2\2\u0a46\u0967\3\2\2\2\u0a46"+
		"\u0969\3\2\2\2\u0a46\u096a\3\2\2\2\u0a46\u096c\3\2\2\2\u0a46\u0973\3\2"+
		"\2\2\u0a46\u0978\3\2\2\2\u0a46\u0981\3\2\2\2\u0a46\u0983\3\2\2\2\u0a46"+
		"\u0986\3\2\2\2\u0a46\u0996\3\2\2\2\u0a46\u09a6\3\2\2\2\u0a46\u09b7\3\2"+
		"\2\2\u0a46\u09c8\3\2\2\2\u0a46\u09ca\3\2\2\2\u0a46\u09cf\3\2\2\2\u0a46"+
		"\u09e4\3\2\2\2\u0a46\u09f8\3\2\2\2\u0a46\u0a0c\3\2\2\2\u0a46\u0a21\3\2"+
		"\2\2\u0a46\u0a27\3\2\2\2\u0a46\u0a2f\3\2\2\2\u0a46\u0a34\3\2\2\2\u0a46"+
		"\u0a36\3\2\2\2\u0a46\u0a38\3\2\2\2\u0a46\u0a3d\3\2\2\2\u0a46\u0a42\3\2"+
		"\2\2\u0a46\u0a43\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a46\u0a45\3\2\2\2\u0a47"+
		"A\3\2\2\2\u0a48\u0a4a\5\u0114\u008b\2\u0a49\u0a4b\5D#\2\u0a4a\u0a49\3"+
		"\2\2\2\u0a4a\u0a4b\3\2\2\2\u0a4b\u0a4f\3\2\2\2\u0a4c\u0a4e\5H%\2\u0a4d"+
		"\u0a4c\3\2\2\2\u0a4e\u0a51\3\2\2\2\u0a4f\u0a4d\3\2\2\2\u0a4f\u0a50\3\2"+
		"\2\2\u0a50\u0a53\3\2\2\2\u0a51\u0a4f\3\2\2\2\u0a52\u0a54\5J&\2\u0a53\u0a52"+
		"\3\2\2\2\u0a53\u0a54\3\2\2\2\u0a54\u0a5f\3\2\2\2\u0a55\u0a56\7\u013e\2"+
		"\2\u0a56\u0a5b\7\u00df\2\2\u0a57\u0a59\7\u013e\2\2\u0a58\u0a5a\5D#\2\u0a59"+
		"\u0a58\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a\u0a5c\3\2\2\2\u0a5b\u0a57\3\2"+
		"\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a5f\3\2\2\2\u0a5d\u0a5f\7\u013e\2\2\u0a5e"+
		"\u0a48\3\2\2\2\u0a5e\u0a55\3\2\2\2\u0a5e\u0a5d\3\2\2\2\u0a5fC\3\2\2\2"+
		"\u0a60\u0a61\7|\2\2\u0a61\u0a62\5F$\2\u0a62E\3\2\2\2\u0a63\u0a65\7\u0142"+
		"\2\2\u0a64\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a67\3\2\2\2\u0a66"+
		"\u0a68\7\u015b\2\2\u0a67\u0a66\3\2\2\2\u0a68\u0a69\3\2\2\2\u0a69\u0a67"+
		"\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6aG\3\2\2\2\u0a6b\u0a6c\7r\2\2\u0a6c\u0a6e"+
		"\5\u0114\u008b\2\u0a6d\u0a6f\5D#\2\u0a6e\u0a6d\3\2\2\2\u0a6e\u0a6f\3\2"+
		"\2\2\u0a6fI\3\2\2\2\u0a70\u0a72\7\u00df\2\2\u0a71\u0a73\5L\'\2\u0a72\u0a71"+
		"\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73K\3\2\2\2\u0a74\u0a76\7\u013e\2\2\u0a75"+
		"\u0a77\5D#\2\u0a76\u0a75\3\2\2\2\u0a76\u0a77\3\2\2\2\u0a77M\3\2\2\2\u0a78"+
		"\u0a79\b(\1\2\u0a79\u0a7d\5V,\2\u0a7a\u0a7d\5P)\2\u0a7b\u0a7d\7\u00e0"+
		"\2\2\u0a7c\u0a78\3\2\2\2\u0a7c\u0a7a\3\2\2\2\u0a7c\u0a7b\3\2\2\2\u0a7d"+
		"\u0a87\3\2\2\2\u0a7e\u0a7f\f\4\2\2\u0a7f\u0a81\7~\2\2\u0a80\u0a82\5\u0094"+
		"K\2\u0a81\u0a80\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0a81\3\2\2\2\u0a83"+
		"\u0a84\3\2\2\2\u0a84\u0a86\3\2\2\2\u0a85\u0a7e\3\2\2\2\u0a86\u0a89\3\2"+
		"\2\2\u0a87\u0a85\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88O\3\2\2\2\u0a89\u0a87"+
		"\3\2\2\2\u0a8a\u0a8d\5R*\2\u0a8b\u0a8d\5T+\2\u0a8c\u0a8a\3\2\2\2\u0a8c"+
		"\u0a8b\3\2\2\2\u0a8dQ\3\2\2\2\u0a8e\u0a90\7\20\2\2\u0a8f\u0a91\5X-\2\u0a90"+
		"\u0a8f\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a98\3\2\2\2\u0a92\u0a94\7-"+
		"\2\2\u0a93\u0a95\5X-\2\u0a94\u0a93\3\2\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0a97"+
		"\3\2\2\2\u0a96\u0a92\3\2\2\2\u0a97\u0a9a\3\2\2\2\u0a98\u0a96\3\2\2\2\u0a98"+
		"\u0a99\3\2\2\2\u0a99\u0a9b\3\2\2\2\u0a9a\u0a98\3\2\2\2\u0a9b\u0ab3\7\21"+
		"\2\2\u0a9c\u0a9d\7\36\2\2\u0a9d\u0aa2\5N(\2\u0a9e\u0a9f\7r\2\2\u0a9f\u0aa1"+
		"\5N(\2\u0aa0\u0a9e\3\2\2\2\u0aa1\u0aa4\3\2\2\2\u0aa2\u0aa0\3\2\2\2\u0aa2"+
		"\u0aa3\3\2\2\2\u0aa3\u0aa5\3\2\2\2\u0aa4\u0aa2\3\2\2\2\u0aa5\u0aa6\7\37"+
		"\2\2\u0aa6\u0ab3\3\2\2\2\u0aa7\u0aa8\7\36\2\2\u0aa8\u0aad\5N(\2\u0aa9"+
		"\u0aaa\7\u00e1\2\2\u0aaa\u0aac\5N(\2\u0aab\u0aa9\3\2\2\2\u0aac\u0aaf\3"+
		"\2\2\2\u0aad\u0aab\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0ab0\3\2\2\2\u0aaf"+
		"\u0aad\3\2\2\2\u0ab0\u0ab1\7\37\2\2\u0ab1\u0ab3\3\2\2\2\u0ab2\u0a8e\3"+
		"\2\2\2\u0ab2\u0a9c\3\2\2\2\u0ab2\u0aa7\3\2\2\2\u0ab3S\3\2\2\2\u0ab4\u0ab5"+
		"\7\20\2\2\u0ab5\u0ab7\7\u0149\2\2\u0ab6\u0ab8\5V,\2\u0ab7\u0ab6\3\2\2"+
		"\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0ab7\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba\u0abb"+
		"\3\2\2\2\u0abb\u0abc\7\21\2\2\u0abc\u0ac1\3\2\2\2\u0abd\u0abe\7\u0150"+
		"\2\2\u0abe\u0abf\7\u00e2\2\2\u0abf\u0ac1\7Q\2\2\u0ac0\u0ab4\3\2\2\2\u0ac0"+
		"\u0abd\3\2\2\2\u0ac1U\3\2\2\2\u0ac2\u0ac7\5\u0114\u008b\2\u0ac3\u0ac4"+
		"\7\u0088\2\2\u0ac4\u0ac7\5\u0114\u008b\2\u0ac5\u0ac7\7\u0088\2\2\u0ac6"+
		"\u0ac2\3\2\2\2\u0ac6\u0ac3\3\2\2\2\u0ac6\u0ac5\3\2\2\2\u0ac7W\3\2\2\2"+
		"\u0ac8\u0aca\5Z.\2\u0ac9\u0ac8\3\2\2\2\u0aca\u0acb\3\2\2\2\u0acb\u0ac9"+
		"\3\2\2\2\u0acb\u0acc\3\2\2\2\u0accY\3\2\2\2\u0acd\u0ad1\5N(\2\u0ace\u0ad1"+
		"\7\u013e\2\2\u0acf\u0ad1\7\u0157\2\2\u0ad0\u0acd\3\2\2\2\u0ad0\u0ace\3"+
		"\2\2\2\u0ad0\u0acf\3\2\2\2\u0ad1[\3\2\2\2\u0ad2\u0ae3\7\u00e3\2\2\u0ad3"+
		"\u0ae3\7\u00e4\2\2\u0ad4\u0ad6\7\u00e4\2\2\u0ad5\u0ad7\7\u0142\2\2\u0ad6"+
		"\u0ad5\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u0ad9\3\2\2\2\u0ad8\u0ada\5\u00a6"+
		"T\2\u0ad9\u0ad8\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0ad9\3\2\2\2\u0adb"+
		"\u0adc\3\2\2\2\u0adc\u0ae3\3\2\2\2\u0add\u0ae3\7\u00e5\2\2\u0ade\u0ae3"+
		"\7\u00a0\2\2\u0adf\u0ae3\7\u00a2\2\2\u0ae0\u0ae3\7\u00e6\2\2\u0ae1\u0ae3"+
		"\7\u00e7\2\2\u0ae2\u0ad2\3\2\2\2\u0ae2\u0ad3\3\2\2\2\u0ae2\u0ad4\3\2\2"+
		"\2\u0ae2\u0add\3\2\2\2\u0ae2\u0ade\3\2\2\2\u0ae2\u0adf\3\2\2\2\u0ae2\u0ae0"+
		"\3\2\2\2\u0ae2\u0ae1\3\2\2\2\u0ae3]\3\2\2\2\u0ae4\u0ae5\5\u008aF\2\u0ae5"+
		"_\3\2\2\2\u0ae6\u0ae7\5\u008aF\2\u0ae7a\3\2\2\2\u0ae8\u0ae9\b\62\1\2\u0ae9"+
		"\u0aea\7\20\2\2\u0aea\u0aeb\7\u0146\2\2\u0aeb\u0af0\5b\62\2\u0aec\u0aed"+
		"\7-\2\2\u0aed\u0aef\5b\62\2\u0aee\u0aec\3\2\2\2\u0aef\u0af2\3\2\2\2\u0af0"+
		"\u0aee\3\2\2\2\u0af0\u0af1\3\2\2\2\u0af1\u0af3\3\2\2\2\u0af2\u0af0\3\2"+
		"\2\2\u0af3\u0af4\7\21\2\2\u0af4\u0af7\3\2\2\2\u0af5\u0af7\5d\63\2\u0af6"+
		"\u0ae8\3\2\2\2\u0af6\u0af5\3\2\2\2\u0af7\u0afd\3\2\2\2\u0af8\u0af9\f\5"+
		"\2\2\u0af9\u0afa\7\u00e8\2\2\u0afa\u0afc\5b\62\5\u0afb\u0af8\3\2\2\2\u0afc"+
		"\u0aff\3\2\2\2\u0afd\u0afb\3\2\2\2\u0afd\u0afe\3\2\2\2\u0afec\3\2\2\2"+
		"\u0aff\u0afd\3\2\2\2\u0b00\u0b01\b\63\1\2\u0b01\u0b02\5h\65\2\u0b02\u0b12"+
		"\3\2\2\2\u0b03\u0b04\f\4\2\2\u0b04\u0b05\7\u00e8\2\2\u0b05\u0b07\7\20"+
		"\2\2\u0b06\u0b08\5b\62\2\u0b07\u0b06\3\2\2\2\u0b07\u0b08\3\2\2\2\u0b08"+
		"\u0b0c\3\2\2\2\u0b09\u0b0b\5f\64\2\u0b0a\u0b09\3\2\2\2\u0b0b\u0b0e\3\2"+
		"\2\2\u0b0c\u0b0a\3\2\2\2\u0b0c\u0b0d\3\2\2\2\u0b0d\u0b0f\3\2\2\2\u0b0e"+
		"\u0b0c\3\2\2\2\u0b0f\u0b11\7\21\2\2\u0b10\u0b03\3\2\2\2\u0b11\u0b14\3"+
		"\2\2\2\u0b12\u0b10\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13e\3\2\2\2\u0b14\u0b12"+
		"\3\2\2\2\u0b15\u0b17\7-\2\2\u0b16\u0b18\5b\62\2\u0b17\u0b16\3\2\2\2\u0b17"+
		"\u0b18\3\2\2\2\u0b18g\3\2\2\2\u0b19\u0b1c\7\u00e9\2\2\u0b1a\u0b1d\7\u015b"+
		"\2\2\u0b1b\u0b1d\5\u0114\u008b\2\u0b1c\u0b1a\3\2\2\2\u0b1c\u0b1b\3\2\2"+
		"\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b3c\5h\65\2\u0b1f\u0b20\7\u00ea\2\2\u0b20"+
		"\u0b3c\5h\65\2\u0b21\u0b22\7\u00eb\2\2\u0b22\u0b3c\5h\65\2\u0b23\u0b24"+
		"\7\u00ec\2\2\u0b24\u0b3c\5h\65\2\u0b25\u0b26\7\u00ed\2\2\u0b26\u0b3c\5"+
		"h\65\2\u0b27\u0b28\7\u00ee\2\2\u0b28\u0b3c\5h\65\2\u0b29\u0b2c\7\u00ef"+
		"\2\2\u0b2a\u0b2d\7\u015b\2\2\u0b2b\u0b2d\5\u0114\u008b\2\u0b2c\u0b2a\3"+
		"\2\2\2\u0b2c\u0b2b\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b3c\5h\65\2\u0b2f"+
		"\u0b31\7\u00f0\2\2\u0b30\u0b32\7\u0158\2\2\u0b31\u0b30\3\2\2\2\u0b31\u0b32"+
		"\3\2\2\2\u0b32\u0b33\3\2\2\2\u0b33\u0b3c\5h\65\2\u0b34\u0b36\7\u00f1\2"+
		"\2\u0b35\u0b37\5~@\2\u0b36\u0b35\3\2\2\2\u0b36\u0b37\3\2\2\2\u0b37\u0b38"+
		"\3\2\2\2\u0b38\u0b39\7\u0144\2\2\u0b39\u0b3c\5h\65\2\u0b3a\u0b3c\5j\66"+
		"\2\u0b3b\u0b19\3\2\2\2\u0b3b\u0b1f\3\2\2\2\u0b3b\u0b21\3\2\2\2\u0b3b\u0b23"+
		"\3\2\2\2\u0b3b\u0b25\3\2\2\2\u0b3b\u0b27\3\2\2\2\u0b3b\u0b29\3\2\2\2\u0b3b"+
		"\u0b2f\3\2\2\2\u0b3b\u0b34\3\2\2\2\u0b3b\u0b3a\3\2\2\2\u0b3ci\3\2\2\2"+
		"\u0b3d\u0b3e\5l\67\2\u0b3e\u0b3f\7\u0143\2\2\u0b3f\u0b40\5h\65\2\u0b40"+
		"\u0b4e\3\2\2\2\u0b41\u0b42\5l\67\2\u0b42\u0b43\7\u013b\2\2\u0b43\u0b44"+
		"\5h\65\2\u0b44\u0b4e\3\2\2\2\u0b45\u0b46\7\u00f2\2\2\u0b46\u0b47\5l\67"+
		"\2\u0b47\u0b48\7\u00f3\2\2\u0b48\u0b49\5l\67\2\u0b49\u0b4a\7\u00f4\2\2"+
		"\u0b4a\u0b4b\5l\67\2\u0b4b\u0b4e\3\2\2\2\u0b4c\u0b4e\5l\67\2\u0b4d\u0b3d"+
		"\3\2\2\2\u0b4d\u0b41\3\2\2\2\u0b4d\u0b45\3\2\2\2\u0b4d\u0b4c\3\2\2\2\u0b4e"+
		"k\3\2\2\2\u0b4f\u0b51\7\u00f5\2\2\u0b50\u0b52\5\u00a4S\2\u0b51\u0b50\3"+
		"\2\2\2\u0b52\u0b53\3\2\2\2\u0b53\u0b51\3\2\2\2\u0b53\u0b54\3\2\2\2\u0b54"+
		"\u0b55\3\2\2\2\u0b55\u0b57\7\u00f6\2\2\u0b56\u0b58\5l\67\2\u0b57\u0b56"+
		"\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b57\3\2\2\2\u0b59\u0b5a\3\2\2\2\u0b5a"+
		"\u0c35\3\2\2\2\u0b5b\u0b5d\7\u00f7\2\2\u0b5c\u0b5e\7\u0155\2\2\u0b5d\u0b5c"+
		"\3\2\2\2\u0b5d\u0b5e\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b64\5t;\2\u0b60"+
		"\u0b61\7\33\2\2\u0b61\u0b63\5t;\2\u0b62\u0b60\3\2\2\2\u0b63\u0b66\3\2"+
		"\2\2\u0b64\u0b62\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0b67\3\2\2\2\u0b66"+
		"\u0b64\3\2\2\2\u0b67\u0b68\7U\2\2\u0b68\u0b69\5b\62\2\u0b69\u0c35\3\2"+
		"\2\2\u0b6a\u0b6c\7\u00e5\2\2\u0b6b\u0b6d\7\u0156\2\2\u0b6c\u0b6b\3\2\2"+
		"\2\u0b6c\u0b6d\3\2\2\2\u0b6d\u0b6e\3\2\2\2\u0b6e\u0b6f\7\u00f8\2\2\u0b6f"+
		"\u0b71\7\33\2\2\u0b70\u0b72\7-\2\2\u0b71\u0b70\3\2\2\2\u0b71\u0b72\3\2"+
		"\2\2\u0b72\u0b73\3\2\2\2\u0b73\u0b78\5v<\2\u0b74\u0b75\7-\2\2\u0b75\u0b77"+
		"\5v<\2\u0b76\u0b74\3\2\2\2\u0b77\u0b7a\3\2\2\2\u0b78\u0b76\3\2\2\2\u0b78"+
		"\u0b79\3\2\2\2\u0b79\u0b7b\3\2\2\2\u0b7a\u0b78\3\2\2\2\u0b7b\u0b7c\7\u00f9"+
		"\2\2\u0b7c\u0c35\3\2\2\2\u0b7d\u0b7f\7\u00fa\2\2\u0b7e\u0b80\7\u0156\2"+
		"\2\u0b7f\u0b7e\3\2\2\2\u0b7f\u0b80\3\2\2\2\u0b80\u0b81\3\2\2\2\u0b81\u0b82"+
		"\7\u00f8\2\2\u0b82\u0b84\7\33\2\2\u0b83\u0b85\7-\2\2\u0b84\u0b83\3\2\2"+
		"\2\u0b84\u0b85\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86\u0b8b\5v<\2\u0b87\u0b88"+
		"\7-\2\2\u0b88\u0b8a\5v<\2\u0b89\u0b87\3\2\2\2\u0b8a\u0b8d\3\2\2\2\u0b8b"+
		"\u0b89\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c\u0b8e\3\2\2\2\u0b8d\u0b8b\3\2"+
		"\2\2\u0b8e\u0b8f\7\u00f9\2\2\u0b8f\u0c35\3\2\2\2\u0b90\u0b92\7\u00fb\2"+
		"\2\u0b91\u0b93\7\u0156\2\2\u0b92\u0b91\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93"+
		"\u0b94\3\2\2\2\u0b94\u0b95\7\u00f8\2\2\u0b95\u0b97\7\33\2\2\u0b96\u0b98"+
		"\7-\2\2\u0b97\u0b96\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99"+
		"\u0b9e\5v<\2\u0b9a\u0b9b\7-\2\2\u0b9b\u0b9d\5v<\2\u0b9c\u0b9a\3\2\2\2"+
		"\u0b9d\u0ba0\3\2\2\2\u0b9e\u0b9c\3\2\2\2\u0b9e\u0b9f\3\2\2\2\u0b9f\u0ba1"+
		"\3\2\2\2\u0ba0\u0b9e\3\2\2\2\u0ba1\u0ba2\7\u00f9\2\2\u0ba2\u0c35\3\2\2"+
		"\2\u0ba3\u0ba4\7\u00e5\2\2\u0ba4\u0ba5\5b\62\2\u0ba5\u0ba8\7\33\2\2\u0ba6"+
		"\u0ba7\7-\2\2\u0ba7\u0ba9\5z>\2\u0ba8\u0ba6\3\2\2\2\u0ba9\u0baa\3\2\2"+
		"\2\u0baa\u0ba8\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u0bad"+
		"\7\u00f9\2\2\u0bad\u0c35\3\2\2\2\u0bae\u0baf\7\u00fa\2\2\u0baf\u0bb0\5"+
		"b\62\2\u0bb0\u0bb3\7\33\2\2\u0bb1\u0bb2\7-\2\2\u0bb2\u0bb4\5z>\2\u0bb3"+
		"\u0bb1\3\2\2\2\u0bb4\u0bb5\3\2\2\2\u0bb5\u0bb3\3\2\2\2\u0bb5\u0bb6\3\2"+
		"\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7\u0bb8\7\u00f9\2\2\u0bb8\u0c35\3\2\2\2\u0bb9"+
		"\u0bba\7\u00fb\2\2\u0bba\u0bbb\5b\62\2\u0bbb\u0bbe\7\33\2\2\u0bbc\u0bbd"+
		"\7-\2\2\u0bbd\u0bbf\5z>\2\u0bbe\u0bbc\3\2\2\2\u0bbf\u0bc0\3\2\2\2\u0bc0"+
		"\u0bbe\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bc3\7\u00f9"+
		"\2\2\u0bc3\u0c35\3\2\2\2\u0bc4\u0bc5\7\u00fc\2\2\u0bc5\u0bc8\5n8\2\u0bc6"+
		"\u0bc7\7\32\2\2\u0bc7\u0bc9\5\u0114\u008b\2\u0bc8\u0bc6\3\2\2\2\u0bc8"+
		"\u0bc9\3\2\2\2\u0bc9\u0c35\3\2\2\2\u0bca\u0bcb\7\u00fd\2\2\u0bcb\u0bcc"+
		"\7\20\2\2\u0bcc\u0bd1\5b\62\2\u0bcd\u0bce\7-\2\2\u0bce\u0bd0\5b\62\2\u0bcf"+
		"\u0bcd\3\2\2\2\u0bd0\u0bd3\3\2\2\2\u0bd1\u0bcf\3\2\2\2\u0bd1\u0bd2\3\2"+
		"\2\2\u0bd2\u0bd4\3\2\2\2\u0bd3\u0bd1\3\2\2\2\u0bd4\u0bd5\7\21\2\2\u0bd5"+
		"\u0c35\3\2\2\2\u0bd6\u0bd7\7\u00fe\2\2\u0bd7\u0bd8\7\20\2\2\u0bd8\u0bdd"+
		"\5b\62\2\u0bd9\u0bda\7-\2\2\u0bda\u0bdc\5b\62\2\u0bdb\u0bd9\3\2\2\2\u0bdc"+
		"\u0bdf\3\2\2\2\u0bdd\u0bdb\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde\u0be0\3\2"+
		"\2\2\u0bdf\u0bdd\3\2\2\2\u0be0\u0be1\7\21\2\2\u0be1\u0c35\3\2\2\2\u0be2"+
		"\u0be8\7\u00ff\2\2\u0be3\u0be5\5p9\2\u0be4\u0be3\3\2\2\2\u0be5\u0be6\3"+
		"\2\2\2\u0be6\u0be4\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u0be9\3\2\2\2\u0be8"+
		"\u0be4\3\2\2\2\u0be8\u0be9\3\2\2\2\u0be9\u0c35\3\2\2\2\u0bea\u0beb\7\u0100"+
		"\2\2\u0beb\u0bf1\5\u0114\u008b\2\u0bec\u0bee\5p9\2\u0bed\u0bec\3\2\2\2"+
		"\u0bee\u0bef\3\2\2\2\u0bef\u0bed\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bf2"+
		"\3\2\2\2\u0bf1\u0bed\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2\u0c35\3\2\2\2\u0bf3"+
		"\u0bf4\7\u0100\2\2\u0bf4\u0bfa\7\u015b\2\2\u0bf5\u0bf7\5p9\2\u0bf6\u0bf5"+
		"\3\2\2\2\u0bf7\u0bf8\3\2\2\2\u0bf8\u0bf6\3\2\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9"+
		"\u0bfb\3\2\2\2\u0bfa\u0bf6\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0c35\3\2"+
		"\2\2\u0bfc\u0c02\7\u0100\2\2\u0bfd\u0bff\5p9\2\u0bfe\u0bfd\3\2\2\2\u0bff"+
		"\u0c00\3\2\2\2\u0c00\u0bfe\3\2\2\2\u0c00\u0c01\3\2\2\2\u0c01\u0c03\3\2"+
		"\2\2\u0c02\u0bfe\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03\u0c35\3\2\2\2\u0c04"+
		"\u0c05\7\u0101\2\2\u0c05\u0c35\7\u0158\2\2\u0c06\u0c07\7\u0101\2\2\u0c07"+
		"\u0c35\5\u00a6T\2\u0c08\u0c35\7\u0101\2\2\u0c09\u0c0a\7\u0102\2\2\u0c0a"+
		"\u0c0c\5\u0114\u008b\2\u0c0b\u0c0d\5\u008aF\2\u0c0c\u0c0b\3\2\2\2\u0c0c"+
		"\u0c0d\3\2\2\2\u0c0d\u0c35\3\2\2\2\u0c0e\u0c0f\7\u0102\2\2\u0c0f\u0c10"+
		"\5\u0114\u008b\2\u0c10\u0c12\7\20\2\2\u0c11\u0c13\5\u008aF\2\u0c12\u0c11"+
		"\3\2\2\2\u0c12\u0c13\3\2\2\2\u0c13\u0c14\3\2\2\2\u0c14\u0c15\7\21\2\2"+
		"\u0c15\u0c35\3\2\2\2\u0c16\u0c17\7\u0103\2\2\u0c17\u0c18\7\u0104\2\2\u0c18"+
		"\u0c19\7U\2\2\u0c19\u0c35\5\u008aF\2\u0c1a\u0c1b\7\u0105\2\2\u0c1b\u0c1c"+
		"\7\u00b0\2\2\u0c1c\u0c35\5\u008aF\2\u0c1d\u0c1e\7\u0106\2\2\u0c1e\u0c1f"+
		"\7\u0144\2\2\u0c1f\u0c35\5\u008aF\2\u0c20\u0c21\7\u0107\2\2\u0c21\u0c22"+
		"\7\u0144\2\2\u0c22\u0c35\5\u008aF\2\u0c23\u0c24\7\u0108\2\2\u0c24\u0c35"+
		"\5\u008aF\2\u0c25\u0c35\7\u0109\2\2\u0c26\u0c27\7\u010a\2\2\u0c27\u0c35"+
		"\5|?\2\u0c28\u0c29\7\u010b\2\2\u0c29\u0c35\5h\65\2\u0c2a\u0c2b\7\u010c"+
		"\2\2\u0c2b\u0c35\5h\65\2\u0c2c\u0c35\5\34\17\2\u0c2d\u0c2f\5\u00a6T\2"+
		"\u0c2e\u0c30\5r:\2\u0c2f\u0c2e\3\2\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0c2f"+
		"\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0c35\3\2\2\2\u0c33\u0c35\5n8\2\u0c34"+
		"\u0b4f\3\2\2\2\u0c34\u0b5b\3\2\2\2\u0c34\u0b6a\3\2\2\2\u0c34\u0b7d\3\2"+
		"\2\2\u0c34\u0b90\3\2\2\2\u0c34\u0ba3\3\2\2\2\u0c34\u0bae\3\2\2\2\u0c34"+
		"\u0bb9\3\2\2\2\u0c34\u0bc4\3\2\2\2\u0c34\u0bca\3\2\2\2\u0c34\u0bd6\3\2"+
		"\2\2\u0c34\u0be2\3\2\2\2\u0c34\u0bea\3\2\2\2\u0c34\u0bf3\3\2\2\2\u0c34"+
		"\u0bfc\3\2\2\2\u0c34\u0c04\3\2\2\2\u0c34\u0c06\3\2\2\2\u0c34\u0c08\3\2"+
		"\2\2\u0c34\u0c09\3\2\2\2\u0c34\u0c0e\3\2\2\2\u0c34\u0c16\3\2\2\2\u0c34"+
		"\u0c1a\3\2\2\2\u0c34\u0c1d\3\2\2\2\u0c34\u0c20\3\2\2\2\u0c34\u0c23\3\2"+
		"\2\2\u0c34\u0c25\3\2\2\2\u0c34\u0c26\3\2\2\2\u0c34\u0c28\3\2\2\2\u0c34"+
		"\u0c2a\3\2\2\2\u0c34\u0c2c\3\2\2\2\u0c34\u0c2d\3\2\2\2\u0c34\u0c33\3\2"+
		"\2\2\u0c35m\3\2\2\2\u0c36\u0c3f\5\u00a6T\2\u0c37\u0c3f\7\u010d\2\2\u0c38"+
		"\u0c3f\5\u0080A\2\u0c39\u0c3a\7\36\2\2\u0c3a\u0c3b\5b\62\2\u0c3b\u0c3c"+
		"\7\37\2\2\u0c3c\u0c3f\3\2\2\2\u0c3d\u0c3f\7\u010e\2\2\u0c3e\u0c36\3\2"+
		"\2\2\u0c3e\u0c37\3\2\2\2\u0c3e\u0c38\3\2\2\2\u0c3e\u0c39\3\2\2\2\u0c3e"+
		"\u0c3d\3\2\2\2\u0c3fo\3\2\2\2\u0c40\u0c44\7\u0158\2\2\u0c41\u0c44\5\u0114"+
		"\u008b\2\u0c42\u0c44\5\u0080A\2\u0c43\u0c40\3\2\2\2\u0c43\u0c41\3\2\2"+
		"\2\u0c43\u0c42\3\2\2\2\u0c44q\3\2\2\2\u0c45\u0c4f\5\u00a6T\2\u0c46\u0c4f"+
		"\7\u010d\2\2\u0c47\u0c48\7\u010f\2\2\u0c48\u0c49\7\u0144\2\2\u0c49\u0c4f"+
		"\5n8\2\u0c4a\u0c4b\7\36\2\2\u0c4b\u0c4c\7\u0158\2\2\u0c4c\u0c4f\7\37\2"+
		"\2\u0c4d\u0c4f\5\u0092J\2\u0c4e\u0c45\3\2\2\2\u0c4e\u0c46\3\2\2\2\u0c4e"+
		"\u0c47\3\2\2\2\u0c4e\u0c4a\3\2\2\2\u0c4e\u0c4d\3\2\2\2\u0c4fs\3\2\2\2"+
		"\u0c50\u0c56\5\u0114\u008b\2\u0c51\u0c53\5\u00a4S\2\u0c52\u0c51\3\2\2"+
		"\2\u0c53\u0c54\3\2\2\2\u0c54\u0c52\3\2\2\2\u0c54\u0c55\3\2\2\2\u0c55\u0c57"+
		"\3\2\2\2\u0c56\u0c52\3\2\2\2\u0c56\u0c57\3\2\2\2\u0c57\u0c58\3\2\2\2\u0c58"+
		"\u0c59\7\22\2\2\u0c59\u0c5a\5b\62\2\u0c5au\3\2\2\2\u0c5b\u0c60\5x=\2\u0c5c"+
		"\u0c5d\7r\2\2\u0c5d\u0c5f\5x=\2\u0c5e\u0c5c\3\2\2\2\u0c5f\u0c62\3\2\2"+
		"\2\u0c60\u0c5e\3\2\2\2\u0c60\u0c61\3\2\2\2\u0c61\u0c63\3\2\2\2\u0c62\u0c60"+
		"\3\2\2\2\u0c63\u0c64\7\u00df\2\2\u0c64\u0c65\5\u008aF\2\u0c65\u0c66\7"+
		"\u00f6\2\2\u0c66\u0c69\5b\62\2\u0c67\u0c68\7\u00b9\2\2\u0c68\u0c6a\5\u0114"+
		"\u008b\2\u0c69\u0c67\3\2\2\2\u0c69\u0c6a\3\2\2\2\u0c6a\u0c94\3\2\2\2\u0c6b"+
		"\u0c6c\7\20\2\2\u0c6c\u0c71\5x=\2\u0c6d\u0c6e\7r\2\2\u0c6e\u0c70\5x=\2"+
		"\u0c6f\u0c6d\3\2\2\2\u0c70\u0c73\3\2\2\2\u0c71\u0c6f\3\2\2\2\u0c71\u0c72"+
		"\3\2\2\2\u0c72\u0c74\3\2\2\2\u0c73\u0c71\3\2\2\2\u0c74\u0c75\7\u00df\2"+
		"\2\u0c75\u0c76\5\u008aF\2\u0c76\u0c77\7\21\2\2\u0c77\u0c78\7\u00f6\2\2"+
		"\u0c78\u0c7b\5b\62\2\u0c79\u0c7a\7\u00b9\2\2\u0c7a\u0c7c\5\u0114\u008b"+
		"\2\u0c7b\u0c79\3\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c\u0c94\3\2\2\2\u0c7d\u0c7e"+
		"\5\u008aF\2\u0c7e\u0c7f\7\u00f6\2\2\u0c7f\u0c82\5b\62\2\u0c80\u0c81\7"+
		"\u00b9\2\2\u0c81\u0c83\5\u0114\u008b\2\u0c82\u0c80\3\2\2\2\u0c82\u0c83"+
		"\3\2\2\2\u0c83\u0c94\3\2\2\2\u0c84\u0c85\7\u00df\2\2\u0c85\u0c86\5\u008a"+
		"F\2\u0c86\u0c87\7\u00f6\2\2\u0c87\u0c8a\5b\62\2\u0c88\u0c89\7\u00b9\2"+
		"\2\u0c89\u0c8b\5\u0114\u008b\2\u0c8a\u0c88\3\2\2\2\u0c8a\u0c8b\3\2\2\2"+
		"\u0c8b\u0c94\3\2\2\2\u0c8c\u0c8d\7\u00e0\2\2\u0c8d\u0c8e\7\u00f6\2\2\u0c8e"+
		"\u0c91\5b\62\2\u0c8f\u0c90\7\u00b9\2\2\u0c90\u0c92\5\u0114\u008b\2\u0c91"+
		"\u0c8f\3\2\2\2\u0c91\u0c92\3\2\2\2\u0c92\u0c94\3\2\2\2\u0c93\u0c5b\3\2"+
		"\2\2\u0c93\u0c6b\3\2\2\2\u0c93\u0c7d\3\2\2\2\u0c93\u0c84\3\2\2\2\u0c93"+
		"\u0c8c\3\2\2\2\u0c94w\3\2\2\2\u0c95\u0c96\5\u00a4S\2\u0c96\u0c97\7\u0144"+
		"\2\2\u0c97\u0c98\5\u008aF\2\u0c98\u0ca4\3\2\2\2\u0c99\u0c9a\5\u00a4S\2"+
		"\u0c9a\u0c9b\7\22\2\2\u0c9b\u0c9e\5\u008aF\2\u0c9c\u0c9d\7\u0144\2\2\u0c9d"+
		"\u0c9f\5\u008aF\2\u0c9e\u0c9c\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca0"+
		"\3\2\2\2\u0ca0\u0ca1\7\u00f6\2\2\u0ca1\u0ca2\5b\62\2\u0ca2\u0ca4\3\2\2"+
		"\2\u0ca3\u0c95\3\2\2\2\u0ca3\u0c99\3\2\2\2\u0ca4y\3\2\2\2\u0ca5\u0ca6"+
		"\5\u008aF\2\u0ca6\u0ca7\7\u00f6\2\2\u0ca7\u0ca8\5b\62\2\u0ca8\u0cb7\3"+
		"\2\2\2\u0ca9\u0cab\7\u0102\2\2\u0caa\u0cac\5\u0114\u008b\2\u0cab\u0caa"+
		"\3\2\2\2\u0cab\u0cac\3\2\2\2\u0cac\u0cad\3\2\2\2\u0cad\u0cae\7\20\2\2"+
		"\u0cae\u0caf\5\u008aF\2\u0caf\u0cb0\7\21\2\2\u0cb0\u0cb1\7\u00f6\2\2\u0cb1"+
		"\u0cb2\5b\62\2\u0cb2\u0cb7\3\2\2\2\u0cb3\u0cb4\7\u00e0\2\2\u0cb4\u0cb5"+
		"\7\u00f6\2\2\u0cb5\u0cb7\5b\62\2\u0cb6\u0ca5\3\2\2\2\u0cb6\u0ca9\3\2\2"+
		"\2\u0cb6\u0cb3\3\2\2\2\u0cb7{\3\2\2\2\u0cb8\u0cb9\5\u0080A\2\u0cb9\u0cba"+
		"\t\5\2\2\u0cba\u0cbb\5\u0080A\2\u0cbb}\3\2\2\2\u0cbc\u0cc6\5\u0114\u008b"+
		"\2\u0cbd\u0cc2\5\u0082B\2\u0cbe\u0cbf\7r\2\2\u0cbf\u0cc1\5\u0082B\2\u0cc0"+
		"\u0cbe\3\2\2\2\u0cc1\u0cc4\3\2\2\2\u0cc2\u0cc0\3\2\2\2\u0cc2\u0cc3\3\2"+
		"\2\2\u0cc3\u0cc6\3\2\2\2\u0cc4\u0cc2\3\2\2\2\u0cc5\u0cbc\3\2\2\2\u0cc5"+
		"\u0cbd\3\2\2\2\u0cc6\177\3\2\2\2\u0cc7\u0cc9\7\u0142\2\2\u0cc8\u0cc7\3"+
		"\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u0ccb\7\u015b\2\2"+
		"\u0ccb\u0081\3\2\2\2\u0ccc\u0cd2\5\u0080A\2\u0ccd\u0cce\5\u0080A\2\u0cce"+
		"\u0ccf\7\u0142\2\2\u0ccf\u0cd0\5\u0080A\2\u0cd0\u0cd2\3\2\2\2\u0cd1\u0ccc"+
		"\3\2\2\2\u0cd1\u0ccd\3\2\2\2\u0cd2\u0083\3\2\2\2\u0cd3\u0cd7\5~@\2\u0cd4"+
		"\u0cd7\7\u0110\2\2\u0cd5\u0cd7\7\u0111\2\2\u0cd6\u0cd3\3\2\2\2\u0cd6\u0cd4"+
		"\3\2\2\2\u0cd6\u0cd5\3\2\2\2\u0cd7\u0085\3\2\2\2\u0cd8\u0cda\7\u0154\2"+
		"\2\u0cd9\u0cd8\3\2\2\2\u0cd9\u0cda\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u0cdc"+
		"\7\u0112\2\2\u0cdc\u0ce1\5\u0088E\2\u0cdd\u0cde\7\33\2\2\u0cde\u0ce0\5"+
		"\u0088E\2\u0cdf\u0cdd\3\2\2\2\u0ce0\u0ce3\3\2\2\2\u0ce1\u0cdf\3\2\2\2"+
		"\u0ce1\u0ce2\3\2\2\2\u0ce2\u0087\3\2\2\2\u0ce3\u0ce1\3\2\2\2\u0ce4\u0ce8"+
		"\5\u0114\u008b\2\u0ce5\u0ce7\5\u0114\u008b\2\u0ce6\u0ce5\3\2\2\2\u0ce7"+
		"\u0cea\3\2\2\2\u0ce8\u0ce6\3\2\2\2\u0ce8\u0ce9\3\2\2\2\u0ce9\u0ceb\3\2"+
		"\2\2\u0cea\u0ce8\3\2\2\2\u0ceb\u0cec\7\22\2\2\u0cec\u0ced\5b\62\2\u0ced"+
		"\u0cf9\3\2\2\2\u0cee\u0cf2\5\u00a6T\2\u0cef\u0cf1\5\u0114\u008b\2\u0cf0"+
		"\u0cef\3\2\2\2\u0cf1\u0cf4\3\2\2\2\u0cf2\u0cf0\3\2\2\2\u0cf2\u0cf3\3\2"+
		"\2\2\u0cf3\u0cf5\3\2\2\2\u0cf4\u0cf2\3\2\2\2\u0cf5\u0cf6\7\22\2\2\u0cf6"+
		"\u0cf7\5b\62\2\u0cf7\u0cf9\3\2\2\2\u0cf8\u0ce4\3\2\2\2\u0cf8\u0cee\3\2"+
		"\2\2\u0cf9\u0089\3\2\2\2\u0cfa\u0cfb\5\u008cG\2\u0cfb\u008b\3\2\2\2\u0cfc"+
		"\u0cfd\bG\1\2\u0cfd\u0cfe\7\u0113\2\2\u0cfe\u0cff\5\u009eP\2\u0cff\u0d00"+
		"\7r\2\2\u0d00\u0d01\5\u00ccg\2\u0d01\u0d85\3\2\2\2\u0d02\u0d03\7\u00d8"+
		"\2\2\u0d03\u0d06\5\u0114\u008b\2\u0d04\u0d05\7\u0144\2\2\u0d05\u0d07\5"+
		"\u008aF\2\u0d06\u0d04\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u0d08\3\2\2\2"+
		"\u0d08\u0d09\7r\2\2\u0d09\u0d0a\5\u00c6d\2\u0d0a\u0d85\3\2\2\2\u0d0b\u0d0c"+
		"\7\u0114\2\2\u0d0c\u0d0f\5\u0114\u008b\2\u0d0d\u0d0e\7\u0144\2\2\u0d0e"+
		"\u0d10\5\u008aF\2\u0d0f\u0d0d\3\2\2\2\u0d0f\u0d10\3\2\2\2\u0d10\u0d11"+
		"\3\2\2\2\u0d11\u0d12\7r\2\2\u0d12\u0d13\5\u008aF\2\u0d13\u0d14\7\u00e1"+
		"\2\2\u0d14\u0d15\5\u00c6d\2\u0d15\u0d85\3\2\2\2\u0d16\u0d17\7\u00d8\2"+
		"\2\u0d17\u0d19\7\u0089\2\2\u0d18\u0d1a\5\u0114\u008b\2\u0d19\u0d18\3\2"+
		"\2\2\u0d1a\u0d1b\3\2\2\2\u0d1b\u0d19\3\2\2\2\u0d1b\u0d1c\3\2\2\2\u0d1c"+
		"\u0d1d\3\2\2\2\u0d1d\u0d1e\7r\2\2\u0d1e\u0d1f\5\u00c6d\2\u0d1f\u0d85\3"+
		"\2\2\2\u0d20\u0d21\7\u00f5\2\2\u0d21\u0d22\5\u009eP\2\u0d22\u0d23\7\u00f6"+
		"\2\2\u0d23\u0d24\5\u00ceh\2\u0d24\u0d85\3\2\2\2\u0d25\u0d26\7\u00a0\2"+
		"\2\u0d26\u0d85\5\u00acW\2\u0d27\u0d28\7\u00a2\2\2\u0d28\u0d85\5\u00ae"+
		"X\2\u0d29\u0d2a\7\u00f7\2\2\u0d2a\u0d2c\5\u0114\u008b\2\u0d2b\u0d2d\5"+
		"\u009eP\2\u0d2c\u0d2b\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d30\3\2\2\2"+
		"\u0d2e\u0d2f\7\u0144\2\2\u0d2f\u0d31\5\u008aF\2\u0d30\u0d2e\3\2\2\2\u0d30"+
		"\u0d31\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0d33\7\22\2\2\u0d33\u0d34\5"+
		"\u008aF\2\u0d34\u0d35\7U\2\2\u0d35\u0d36\5\u00d0i\2\u0d36\u0d85\3\2\2"+
		"\2\u0d37\u0d38\7\u00f7\2\2\u0d38\u0d39\7\u00a0\2\2\u0d39\u0d3a\5\u00b0"+
		"Y\2\u0d3a\u0d3b\7U\2\2\u0d3b\u0d3c\5\u00d2j\2\u0d3c\u0d85\3\2\2\2\u0d3d"+
		"\u0d3e\7\u00f7\2\2\u0d3e\u0d3f\7\u00a2\2\2\u0d3f\u0d40\5\u00b2Z\2\u0d40"+
		"\u0d41\7U\2\2\u0d41\u0d42\5\u00d6l\2\u0d42\u0d85\3\2\2\2\u0d43\u0d44\7"+
		"\u00f7\2\2\u0d44\u0d46\7\36\2\2\u0d45\u0d47\5\u00a4S\2\u0d46\u0d45\3\2"+
		"\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d4c\3\2\2\2\u0d48\u0d49\7r\2\2\u0d49"+
		"\u0d4b\5\u00a4S\2\u0d4a\u0d48\3\2\2\2\u0d4b\u0d4e\3\2\2\2\u0d4c\u0d4a"+
		"\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d\u0d4f\3\2\2\2\u0d4e\u0d4c\3\2\2\2\u0d4f"+
		"\u0d51\7\37\2\2\u0d50\u0d52\5\u00b8]\2\u0d51\u0d50\3\2\2\2\u0d51\u0d52"+
		"\3\2\2\2\u0d52\u0d53\3\2\2\2\u0d53\u0d54\7\22\2\2\u0d54\u0d55\5\u008a"+
		"F\2\u0d55\u0d56\7U\2\2\u0d56\u0d57\5\u00d8m\2\u0d57\u0d85\3\2\2\2\u0d58"+
		"\u0d59\7\u00f7\2\2\u0d59\u0d5a\7\u0115\2\2\u0d5a\u0d5d\5\u00c0a\2\u0d5b"+
		"\u0d5c\7U\2\2\u0d5c\u0d5e\5\u008aF\2\u0d5d\u0d5b\3\2\2\2\u0d5d\u0d5e\3"+
		"\2\2\2\u0d5e\u0d5f\3\2\2\2\u0d5f\u0d60\7\22\2\2\u0d60\u0d62\5\u008aF\2"+
		"\u0d61\u0d63\5\u00ba^\2\u0d62\u0d61\3\2\2\2\u0d62\u0d63\3\2\2\2\u0d63"+
		"\u0d64\3\2\2\2\u0d64\u0d65\7U\2\2\u0d65\u0d66\5\u00dan\2\u0d66\u0d85\3"+
		"\2\2\2\u0d67\u0d68\7\u0116\2\2\u0d68\u0d6a\5\u008aF\2\u0d69\u0d6b\5\u00b8"+
		"]\2\u0d6a\u0d69\3\2\2\2\u0d6a\u0d6b\3\2\2\2\u0d6b\u0d6c\3\2\2\2\u0d6c"+
		"\u0d6d\7\u00f3\2\2\u0d6d\u0d6e\5\u008aF\2\u0d6e\u0d6f\7\u00f4\2\2\u0d6f"+
		"\u0d70\5\u00dco\2\u0d70\u0d85\3\2\2\2\u0d71\u0d72\7\u00b9\2\2\u0d72\u0d76"+
		"\5\u00a6T\2\u0d73\u0d75\5\u0092J\2\u0d74\u0d73\3\2\2\2\u0d75\u0d78\3\2"+
		"\2\2\u0d76\u0d74\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d85\3\2\2\2\u0d78"+
		"\u0d76\3\2\2\2\u0d79\u0d7a\5\u008eH\2\u0d7a\u0d7b\t\6\2\2\u0d7b\u0d7e"+
		"\5\u008eH\2\u0d7c\u0d7d\t\7\2\2\u0d7d\u0d7f\5\u008eH\2\u0d7e\u0d7c\3\2"+
		"\2\2\u0d7e\u0d7f\3\2\2\2\u0d7f\u0d85\3\2\2\2\u0d80\u0d81\7\u0151\2\2\u0d81"+
		"\u0d85\5\u008cG\t\u0d82\u0d85\5\u00e6t\2\u0d83\u0d85\5\u008eH\2\u0d84"+
		"\u0cfc\3\2\2\2\u0d84\u0d02\3\2\2\2\u0d84\u0d0b\3\2\2\2\u0d84\u0d16\3\2"+
		"\2\2\u0d84\u0d20\3\2\2\2\u0d84\u0d25\3\2\2\2\u0d84\u0d27\3\2\2\2\u0d84"+
		"\u0d29\3\2\2\2\u0d84\u0d37\3\2\2\2\u0d84\u0d3d\3\2\2\2\u0d84\u0d43\3\2"+
		"\2\2\u0d84\u0d58\3\2\2\2\u0d84\u0d67\3\2\2\2\u0d84\u0d71\3\2\2\2\u0d84"+
		"\u0d79\3\2\2\2\u0d84\u0d80\3\2\2\2\u0d84\u0d82\3\2\2\2\u0d84\u0d83\3\2"+
		"\2\2\u0d85\u0dbf\3\2\2\2\u0d86\u0d87\f\f\2\2\u0d87\u0d88\7\u0144\2\2\u0d88"+
		"\u0dbe\5\u008cG\f\u0d89\u0d8a\f\13\2\2\u0d8a\u0d8b\7\u014c\2\2\u0d8b\u0dbe"+
		"\5\u008cG\13\u0d8c\u0d8d\f\b\2\2\u0d8d\u0d8e\7\u014d\2\2\u0d8e\u0dbe\5"+
		"\u008cG\b\u0d8f\u0d90\f\7\2\2\u0d90\u0d91\7\u014e\2\2\u0d91\u0dbe\5\u008c"+
		"G\7\u0d92\u0d93\f\6\2\2\u0d93\u0d94\7\u014f\2\2\u0d94\u0dbe\5\u008cG\7"+
		"\u0d95\u0d96\f\5\2\2\u0d96\u0d97\7\u0150\2\2\u0d97\u0dbe\5\u008cG\5\u0d98"+
		"\u0d99\f\22\2\2\u0d99\u0d9a\7\3\2\2\u0d9a\u0d9b\7\36\2\2\u0d9b\u0d9c\5"+
		"\u00a6T\2\u0d9c\u0d9d\7\37\2\2\u0d9d\u0dbe\3\2\2\2\u0d9e\u0d9f\f\21\2"+
		"\2\u0d9f\u0da0\7\3\2\2\u0da0\u0da1\7\36\2\2\u0da1\u0da3\5\u00a6T\2\u0da2"+
		"\u0da4\5\u009aN\2\u0da3\u0da2\3\2\2\2\u0da4\u0da5\3\2\2\2\u0da5\u0da3"+
		"\3\2\2\2\u0da5\u0da6\3\2\2\2\u0da6\u0da7\3\2\2\2\u0da7\u0da8\7\37\2\2"+
		"\u0da8\u0dbe\3\2\2\2\u0da9\u0daa\f\20\2\2\u0daa\u0dab\7\3\2\2\u0dab\u0dac"+
		"\7\36\2\2\u0dac\u0dad\7\u00b9\2\2\u0dad\u0daf\5\u00a6T\2\u0dae\u0db0\5"+
		"\u0092J\2\u0daf\u0dae\3\2\2\2\u0db0\u0db1\3\2\2\2\u0db1\u0daf\3\2\2\2"+
		"\u0db1\u0db2\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db4\7\37\2\2\u0db4\u0dbe"+
		"\3\2\2\2\u0db5\u0db6\f\17\2\2\u0db6\u0db7\7\u013b\2\2\u0db7\u0db8\7,\2"+
		"\2\u0db8\u0db9\5\u008aF\2\u0db9\u0dba\7.\2\2\u0dba\u0dbe\3\2\2\2\u0dbb"+
		"\u0dbc\f\n\2\2\u0dbc\u0dbe\7\u014b\2\2\u0dbd\u0d86\3\2\2\2\u0dbd\u0d89"+
		"\3\2\2\2\u0dbd\u0d8c\3\2\2\2\u0dbd\u0d8f\3\2\2\2\u0dbd\u0d92\3\2\2\2\u0dbd"+
		"\u0d95\3\2\2\2\u0dbd\u0d98\3\2\2\2\u0dbd\u0d9e\3\2\2\2\u0dbd\u0da9\3\2"+
		"\2\2\u0dbd\u0db5\3\2\2\2\u0dbd\u0dbb\3\2\2\2\u0dbe\u0dc1\3\2\2\2\u0dbf"+
		"\u0dbd\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0\u008d\3\2\2\2\u0dc1\u0dbf\3\2"+
		"\2\2\u0dc2\u0dc3\bH\1\2\u0dc3\u0dc5\5\u0090I\2\u0dc4\u0dc6\5\u009cO\2"+
		"\u0dc5\u0dc4\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0dc5\3\2\2\2\u0dc7\u0dc8"+
		"\3\2\2\2\u0dc8\u0dcb\3\2\2\2\u0dc9\u0dcb\5\u0090I\2\u0dca\u0dc2\3\2\2"+
		"\2\u0dca\u0dc9\3\2\2\2\u0dcb\u0dd4\3\2\2\2\u0dcc\u0dcd\f\5\2\2\u0dcd\u0dce"+
		"\t\b\2\2\u0dce\u0dd3\5\u008eH\6\u0dcf\u0dd0\f\4\2\2\u0dd0\u0dd1\t\t\2"+
		"\2\u0dd1\u0dd3\5\u008eH\5\u0dd2\u0dcc\3\2\2\2\u0dd2\u0dcf\3\2\2\2\u0dd3"+
		"\u0dd6\3\2\2\2\u0dd4\u0dd2\3\2\2\2\u0dd4\u0dd5\3\2\2\2\u0dd5\u008f\3\2"+
		"\2\2\u0dd6\u0dd4\3\2\2\2\u0dd7\u0dd8\7\u0142\2\2\u0dd8\u0ddb\5\u0092J"+
		"\2\u0dd9\u0ddb\5\u0092J\2\u0dda\u0dd7\3\2\2\2\u0dda\u0dd9\3\2\2\2\u0ddb"+
		"\u0091\3\2\2\2\u0ddc\u0ddd\bJ\1\2\u0ddd\u0dde\7,\2\2\u0dde\u0ddf\5\u008a"+
		"F\2\u0ddf\u0de0\7.\2\2\u0de0\u0de1\7\u013b\2\2\u0de1\u0de2\7,\2\2\u0de2"+
		"\u0de3\5\u008aF\2\u0de3\u0de4\7.\2\2\u0de4\u0e2e\3\2\2\2\u0de5\u0de6\7"+
		",\2\2\u0de6\u0de9\5\u0114\u008b\2\u0de7\u0de8\7\u0144\2\2\u0de8\u0dea"+
		"\5\u008aF\2\u0de9\u0de7\3\2\2\2\u0de9\u0dea\3\2\2\2\u0dea\u0deb\3\2\2"+
		"\2\u0deb\u0dec\7-\2\2\u0dec\u0ded\5\u008aF\2\u0ded\u0dee\7.\2\2\u0dee"+
		"\u0e2e\3\2\2\2\u0def\u0df0\7,\2\2\u0df0\u0df1\5\u0114\u008b\2\u0df1\u0df2"+
		"\7\u0144\2\2\u0df2\u0df3\5\u008aF\2\u0df3\u0df4\7-\2\2\u0df4\u0df5\5\u008a"+
		"F\2\u0df5\u0df6\7\u00e1\2\2\u0df6\u0df7\5\u008aF\2\u0df7\u0df8\7.\2\2"+
		"\u0df8\u0e2e\3\2\2\2\u0df9\u0dfa\7,\2\2\u0dfa\u0dfb\5\u0114\u008b\2\u0dfb"+
		"\u0dfc\7\u0144\2\2\u0dfc\u0dfd\5\u008aF\2\u0dfd\u0dfe\7\u00e1\2\2\u0dfe"+
		"\u0dff\5\u008aF\2\u0dff\u0e00\7.\2\2\u0e00\u0e2e\3\2\2\2\u0e01\u0e02\7"+
		",\2\2\u0e02\u0e03\5\u0114\u008b\2\u0e03\u0e04\7\u0144\2\2\u0e04\u0e05"+
		"\5\u008aF\2\u0e05\u0e06\7\u00e1\2\2\u0e06\u0e07\5\u008aF\2\u0e07\u0e08"+
		"\7\u00e1\2\2\u0e08\u0e09\5\u008aF\2\u0e09\u0e0a\7.\2\2\u0e0a\u0e2e\3\2"+
		"\2\2\u0e0b\u0e0c\7\u00e5\2\2\u0e0c\u0e11\5\u00b6\\\2\u0e0d\u0e0e\7r\2"+
		"\2\u0e0e\u0e10\5\u00b6\\\2\u0e0f\u0e0d\3\2\2\2\u0e10\u0e13\3\2\2\2\u0e11"+
		"\u0e0f\3\2\2\2\u0e11\u0e12\3\2\2\2\u0e12\u0e15\3\2\2\2\u0e13\u0e11\3\2"+
		"\2\2\u0e14\u0e16\5\u00ba^\2\u0e15\u0e14\3\2\2\2\u0e15\u0e16\3\2\2\2\u0e16"+
		"\u0e17\3\2\2\2\u0e17\u0e27\7\33\2\2\u0e18\u0e19\7-\2\2\u0e19\u0e1b\5\u00bc"+
		"_\2\u0e1a\u0e18\3\2\2\2\u0e1b\u0e1e\3\2\2\2\u0e1c\u0e1a\3\2\2\2\u0e1c"+
		"\u0e1d\3\2\2\2\u0e1d\u0e28\3\2\2\2\u0e1e\u0e1c\3\2\2\2\u0e1f\u0e24\5\u00bc"+
		"_\2\u0e20\u0e21\7-\2\2\u0e21\u0e23\5\u00bc_\2\u0e22\u0e20\3\2\2\2\u0e23"+
		"\u0e26\3\2\2\2\u0e24\u0e22\3\2\2\2\u0e24\u0e25\3\2\2\2\u0e25\u0e28\3\2"+
		"\2\2\u0e26\u0e24\3\2\2\2\u0e27\u0e1c\3\2\2\2\u0e27\u0e1f\3\2\2\2\u0e27"+
		"\u0e28\3\2\2\2\u0e28\u0e29\3\2\2\2\u0e29\u0e2a\7\u00f9\2\2\u0e2a\u0e2e"+
		"\3\2\2\2\u0e2b\u0e2e\5\u0096L\2\u0e2c\u0e2e\5\u0094K\2\u0e2d\u0ddc\3\2"+
		"\2\2\u0e2d\u0de5\3\2\2\2\u0e2d\u0def\3\2\2\2\u0e2d\u0df9\3\2\2\2\u0e2d"+
		"\u0e01\3\2\2\2\u0e2d\u0e0b\3\2\2\2\u0e2d\u0e2b\3\2\2\2\u0e2d\u0e2c\3\2"+
		"\2\2\u0e2e\u0e37\3\2\2\2\u0e2f\u0e30\f\7\2\2\u0e30\u0e31\7\u0152\2\2\u0e31"+
		"\u0e36\5\u0092J\b\u0e32\u0e33\f\6\2\2\u0e33\u0e34\7~\2\2\u0e34\u0e36\5"+
		"\u0114\u008b\2\u0e35\u0e2f\3\2\2\2\u0e35\u0e32\3\2\2\2\u0e36\u0e39\3\2"+
		"\2\2\u0e37\u0e35\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u0093\3\2\2\2\u0e39"+
		"\u0e37\3\2\2\2\u0e3a\u0e4a\5\u00a6T\2\u0e3b\u0e4a\5\u00aaV\2\u0e3c\u0e4a"+
		"\5\u00a8U\2\u0e3d\u0e4a\7\u015b\2\2\u0e3e\u0e4a\7\u00e0\2\2\u0e3f\u0e40"+
		"\7\36\2\2\u0e40\u0e41\5\u008aF\2\u0e41\u0e42\7\37\2\2\u0e42\u0e4a\3\2"+
		"\2\2\u0e43\u0e44\7\36\2\2\u0e44\u0e45\5\u008aF\2\u0e45\u0e46\7r\2\2\u0e46"+
		"\u0e47\5\u008aF\2\u0e47\u0e48\7\37\2\2\u0e48\u0e4a\3\2\2\2\u0e49\u0e3a"+
		"\3\2\2\2\u0e49\u0e3b\3\2\2\2\u0e49\u0e3c\3\2\2\2\u0e49\u0e3d\3\2\2\2\u0e49"+
		"\u0e3e\3\2\2\2\u0e49\u0e3f\3\2\2\2\u0e49\u0e43\3\2\2\2\u0e4a\u0095\3\2"+
		"\2\2\u0e4b\u0e4c\7\u0117\2\2\u0e4c\u0e4d\5\u008aF\2\u0e4d\u0e4e\7U\2\2"+
		"\u0e4e\u0e4f\5\u0098M\2\u0e4f\u0e77\3\2\2\2\u0e50\u0e51\7\u0117\2\2\u0e51"+
		"\u0e52\7\20\2\2\u0e52\u0e53\5\u008aF\2\u0e53\u0e54\7\21\2\2\u0e54\u0e55"+
		"\5\u008aF\2\u0e55\u0e56\7U\2\2\u0e56\u0e57\5\u0098M\2\u0e57\u0e77\3\2"+
		"\2\2\u0e58\u0e59\7\u0117\2\2\u0e59\u0e5a\7Q\2\2\u0e5a\u0e5b\5\u008aF\2"+
		"\u0e5b\u0e5c\7U\2\2\u0e5c\u0e5d\5\u0098M\2\u0e5d\u0e77\3\2\2\2\u0e5e\u0e5f"+
		"\7\u0117\2\2\u0e5f\u0e60\7Q\2\2\u0e60\u0e61\7\20\2\2\u0e61\u0e62\5\u008a"+
		"F\2\u0e62\u0e63\7\21\2\2\u0e63\u0e64\5\u008aF\2\u0e64\u0e65\7U\2\2\u0e65"+
		"\u0e66\5\u0098M\2\u0e66\u0e77\3\2\2\2\u0e67\u0e68\7\u0117\2\2\u0e68\u0e69"+
		"\7\u0150\2\2\u0e69\u0e6a\5\u008aF\2\u0e6a\u0e6b\7U\2\2\u0e6b\u0e6c\5\u0098"+
		"M\2\u0e6c\u0e77\3\2\2\2\u0e6d\u0e6e\7\u0117\2\2\u0e6e\u0e6f\7\u0150\2"+
		"\2\u0e6f\u0e70\7\20\2\2\u0e70\u0e71\5\u008aF\2\u0e71\u0e72\7\21\2\2\u0e72"+
		"\u0e73\5\u008aF\2\u0e73\u0e74\7U\2\2\u0e74\u0e75\5\u0098M\2\u0e75\u0e77"+
		"\3\2\2\2\u0e76\u0e4b\3\2\2\2\u0e76\u0e50\3\2\2\2\u0e76\u0e58\3\2\2\2\u0e76"+
		"\u0e5e\3\2\2\2\u0e76\u0e67\3\2\2\2\u0e76\u0e6d\3\2\2\2\u0e77\u0097\3\2"+
		"\2\2\u0e78\u0e79\5\u008aF\2\u0e79\u0099\3\2\2\2\u0e7a\u0e82\5\u0092J\2"+
		"\u0e7b\u0e7c\7\36\2\2\u0e7c\u0e7d\5\u0114\u008b\2\u0e7d\u0e7e\7\22\2\2"+
		"\u0e7e\u0e7f\5\u008aF\2\u0e7f\u0e80\7\37\2\2\u0e80\u0e82\3\2\2\2\u0e81"+
		"\u0e7a\3\2\2\2\u0e81\u0e7b\3\2\2\2\u0e82\u009b\3\2\2\2\u0e83\u0e84\t\n"+
		"\2\2\u0e84\u0e87\5\u0090I\2\u0e85\u0e87\5\u009aN\2\u0e86\u0e83\3\2\2\2"+
		"\u0e86\u0e85\3\2\2\2\u0e87\u009d\3\2\2\2\u0e88\u0e91\5\u00a0Q\2\u0e89"+
		"\u0e8d\5\u00a2R\2\u0e8a\u0e8c\5\u00a2R\2\u0e8b\u0e8a\3\2\2\2\u0e8c\u0e8f"+
		"\3\2\2\2\u0e8d\u0e8b\3\2\2\2\u0e8d\u0e8e\3\2\2\2\u0e8e\u0e91\3\2\2\2\u0e8f"+
		"\u0e8d\3\2\2\2\u0e90\u0e88\3\2\2\2\u0e90\u0e89\3\2\2\2\u0e91\u009f\3\2"+
		"\2\2\u0e92\u0e96\5\u00a4S\2\u0e93\u0e95\5\u00a4S\2\u0e94\u0e93\3\2\2\2"+
		"\u0e95\u0e98\3\2\2\2\u0e96\u0e94\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97\u0e99"+
		"\3\2\2\2\u0e98\u0e96\3\2\2\2\u0e99\u0e9a\7\u0144\2\2\u0e9a\u0e9b\5\u008a"+
		"F\2\u0e9b\u00a1\3\2\2\2\u0e9c\u0eb9\5\u00a4S\2\u0e9d\u0e9e\7\36\2\2\u0e9e"+
		"\u0ea2\5\u00a4S\2\u0e9f\u0ea1\5\u00a4S\2\u0ea0\u0e9f\3\2\2\2\u0ea1\u0ea4"+
		"\3\2\2\2\u0ea2\u0ea0\3\2\2\2\u0ea2\u0ea3\3\2\2\2\u0ea3\u0ea5\3\2\2\2\u0ea4"+
		"\u0ea2\3\2\2\2\u0ea5\u0ea6\7\u0144\2\2\u0ea6\u0ea7\5\u008aF\2\u0ea7\u0ea8"+
		"\7\37\2\2\u0ea8\u0eb9\3\2\2\2\u0ea9\u0eaa\7\36\2\2\u0eaa\u0eab\5\u00a4"+
		"S\2\u0eab\u0eac\7\22\2\2\u0eac\u0ead\5\u008aF\2\u0ead\u0eae\7\37\2\2\u0eae"+
		"\u0eb9\3\2\2\2\u0eaf\u0eb0\7\36\2\2\u0eb0\u0eb1\5\u00a4S\2\u0eb1\u0eb2"+
		"\7\u0144\2\2\u0eb2\u0eb3\5\u008aF\2\u0eb3\u0eb4\7\22\2\2\u0eb4\u0eb5\5"+
		"\u008aF\2\u0eb5\u0eb6\7\37\2\2\u0eb6\u0eb9\3\2\2\2\u0eb7\u0eb9\5\u0108"+
		"\u0085\2\u0eb8\u0e9c\3\2\2\2\u0eb8\u0e9d\3\2\2\2\u0eb8\u0ea9\3\2\2\2\u0eb8"+
		"\u0eaf\3\2\2\2\u0eb8\u0eb7\3\2\2\2\u0eb9\u00a3\3\2\2\2\u0eba\u0ebd\5\u0114"+
		"\u008b\2\u0ebb\u0ebd\7\u00e0\2\2\u0ebc\u0eba\3\2\2\2\u0ebc\u0ebb\3\2\2"+
		"\2\u0ebd\u00a5\3\2\2\2\u0ebe\u0ebf\bT\1\2\u0ebf\u0ec0\5\u0114\u008b\2"+
		"\u0ec0\u0ec5\3\2\2\2\u0ec1\u0ec2\f\3\2\2\u0ec2\u0ec4\7\u015a\2\2\u0ec3"+
		"\u0ec1\3\2\2\2\u0ec4\u0ec7\3\2\2\2\u0ec5\u0ec3\3\2\2\2\u0ec5\u0ec6\3\2"+
		"\2\2\u0ec6\u00a7\3\2\2\2\u0ec7\u0ec5\3\2\2\2\u0ec8\u0ec9\7\u0088\2\2\u0ec9"+
		"\u0eca\5\u0114\u008b\2\u0eca\u00a9\3\2\2\2\u0ecb\u0ecf\7\u0118\2\2\u0ecc"+
		"\u0ecf\7\u0119\2\2\u0ecd\u0ecf\7\23\2\2\u0ece\u0ecb\3\2\2\2\u0ece\u0ecc"+
		"\3\2\2\2\u0ece\u0ecd\3\2\2\2\u0ecf\u00ab\3\2\2\2\u0ed0\u0edd\5\u00b0Y"+
		"\2\u0ed1\u0ed6\5\u00b0Y\2\u0ed2\u0ed3\7\33\2\2\u0ed3\u0ed5\5\u00b0Y\2"+
		"\u0ed4\u0ed2\3\2\2\2\u0ed5\u0ed8\3\2\2\2\u0ed6\u0ed4\3\2\2\2\u0ed6\u0ed7"+
		"\3\2\2\2\u0ed7\u0ed9\3\2\2\2\u0ed8\u0ed6\3\2\2\2\u0ed9\u0eda\7\u011a\2"+
		"\2\u0eda\u0edb\5\u0114\u008b\2\u0edb\u0edd\3\2\2\2\u0edc\u0ed0\3\2\2\2"+
		"\u0edc\u0ed1\3\2\2\2\u0edd\u00ad\3\2\2\2\u0ede\u0eeb\5\u00b2Z\2\u0edf"+
		"\u0ee4\5\u00b2Z\2\u0ee0\u0ee1\7\33\2\2\u0ee1\u0ee3\5\u00b2Z\2\u0ee2\u0ee0"+
		"\3\2\2\2\u0ee3\u0ee6\3\2\2\2\u0ee4\u0ee2\3\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5"+
		"\u0ee7\3\2\2\2\u0ee6\u0ee4\3\2\2\2\u0ee7\u0ee8\7\u011a\2\2\u0ee8\u0ee9"+
		"\5\u0114\u008b\2\u0ee9\u0eeb\3\2\2\2\u0eea\u0ede\3\2\2\2\u0eea\u0edf\3"+
		"\2\2\2\u0eeb\u00af\3\2\2\2\u0eec\u0eed\5\u0114\u008b\2\u0eed\u0eef\5\u009e"+
		"P\2\u0eee\u0ef0\5\u00b4[\2\u0eef\u0eee\3\2\2\2\u0eef\u0ef0\3\2\2\2\u0ef0"+
		"\u0ef3\3\2\2\2\u0ef1\u0ef2\7\u0144\2\2\u0ef2\u0ef4\5\u008aF\2\u0ef3\u0ef1"+
		"\3\2\2\2\u0ef3\u0ef4\3\2\2\2\u0ef4\u0ef5\3\2\2\2\u0ef5\u0ef6\7\22\2\2"+
		"\u0ef6\u0ef7\5\u00d4k\2\u0ef7\u00b1\3\2\2\2\u0ef8\u0efa\5\u0114\u008b"+
		"\2\u0ef9\u0efb\5\u009eP\2\u0efa\u0ef9\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb"+
		"\u0efe\3\2\2\2\u0efc\u0efd\7\u0144\2\2\u0efd\u0eff\5\u008aF\2\u0efe\u0efc"+
		"\3\2\2\2\u0efe\u0eff\3\2\2\2\u0eff\u0f00\3\2\2\2\u0f00\u0f01\7\22\2\2"+
		"\u0f01\u0f02\5\u008aF\2\u0f02\u00b3\3\2\2\2\u0f03\u0f04\7,\2\2\u0f04\u0f05"+
		"\7\u00a1\2\2\u0f05\u0f06\5\u0114\u008b\2\u0f06\u0f07\7.\2\2\u0f07\u00b5"+
		"\3\2\2\2\u0f08\u0f0b\5\u008aF\2\u0f09\u0f0a\7\u008c\2\2\u0f0a\u0f0c\5"+
		"\u00a4S\2\u0f0b\u0f09\3\2\2\2\u0f0b\u0f0c\3\2\2\2\u0f0c\u0f15\3\2\2\2"+
		"\u0f0d\u0f0e\7U\2\2\u0f0e\u0f12\5\u00a6T\2\u0f0f\u0f11\5\u00c0a\2\u0f10"+
		"\u0f0f\3\2\2\2\u0f11\u0f14\3\2\2\2\u0f12\u0f10\3\2\2\2\u0f12\u0f13\3\2"+
		"\2\2\u0f13\u0f16\3\2\2\2\u0f14\u0f12\3\2\2\2\u0f15\u0f0d\3\2\2\2\u0f15"+
		"\u0f16\3\2\2\2\u0f16\u00b7\3\2\2\2\u0f17\u0f18\7\u008c\2\2\u0f18\u0f1a"+
		"\5\u00a4S\2\u0f19\u0f17\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f1b\3\2\2"+
		"\2\u0f1b\u0f1c\5\u00ba^\2\u0f1c\u00b9\3\2\2\2\u0f1d\u0f1e\7\u011b\2\2"+
		"\u0f1e\u0f1f\5\u00c8e\2\u0f1f\u00bb\3\2\2\2\u0f20\u0f25\5\u00be`\2\u0f21"+
		"\u0f22\7-\2\2\u0f22\u0f24\5\u00be`\2\u0f23\u0f21\3\2\2\2\u0f24\u0f27\3"+
		"\2\2\2\u0f25\u0f23\3\2\2\2\u0f25\u0f26\3\2\2\2\u0f26\u0f28\3\2\2\2\u0f27"+
		"\u0f25\3\2\2\2\u0f28\u0f29\7\u00f6\2\2\u0f29\u0f2a\5\u00caf\2\u0f2a\u00bd"+
		"\3\2\2\2\u0f2b\u0f30\5\u00c0a\2\u0f2c\u0f2d\7r\2\2\u0f2d\u0f2f\5\u00c0"+
		"a\2\u0f2e\u0f2c\3\2\2\2\u0f2f\u0f32\3\2\2\2\u0f30\u0f2e\3\2\2\2\u0f30"+
		"\u0f31\3\2\2\2\u0f31\u00bf\3\2\2\2\u0f32\u0f30\3\2\2\2\u0f33\u0f34\ba"+
		"\1\2\u0f34\u0f35\5\u00a6T\2\u0f35\u0f39\5\u00c2b\2\u0f36\u0f38\5\u00c2"+
		"b\2\u0f37\u0f36\3\2\2\2\u0f38\u0f3b\3\2\2\2\u0f39\u0f37\3\2\2\2\u0f39"+
		"\u0f3a\3\2\2\2\u0f3a\u0f54\3\2\2\2\u0f3b\u0f39\3\2\2\2\u0f3c\u0f3d\7\u00b9"+
		"\2\2\u0f3d\u0f3e\5\u00a6T\2\u0f3e\u0f42\5\u00c2b\2\u0f3f\u0f41\5\u00c2"+
		"b\2\u0f40\u0f3f\3\2\2\2\u0f41\u0f44\3\2\2\2\u0f42\u0f40\3\2\2\2\u0f42"+
		"\u0f43\3\2\2\2\u0f43\u0f54\3\2\2\2\u0f44\u0f42\3\2\2\2\u0f45\u0f54\5\u00a6"+
		"T\2\u0f46\u0f54\7\u00e0\2\2\u0f47\u0f54\7\u015b\2\2\u0f48\u0f49\7\36\2"+
		"\2\u0f49\u0f4e\5\u00c4c\2\u0f4a\u0f4b\7r\2\2\u0f4b\u0f4d\5\u00c4c\2\u0f4c"+
		"\u0f4a\3\2\2\2\u0f4d\u0f50\3\2\2\2\u0f4e\u0f4c\3\2\2\2\u0f4e\u0f4f\3\2"+
		"\2\2\u0f4f\u0f51\3\2\2\2\u0f50\u0f4e\3\2\2\2\u0f51\u0f52\7\37\2\2\u0f52"+
		"\u0f54\3\2\2\2\u0f53\u0f33\3\2\2\2\u0f53\u0f3c\3\2\2\2\u0f53\u0f45\3\2"+
		"\2\2\u0f53\u0f46\3\2\2\2\u0f53\u0f47\3\2\2\2\u0f53\u0f48\3\2\2\2\u0f54"+
		"\u0f60\3\2\2\2\u0f55\u0f56\f\t\2\2\u0f56\u0f57\7\u008c\2\2\u0f57\u0f5f"+
		"\5\u0114\u008b\2\u0f58\u0f59\f\b\2\2\u0f59\u0f5a\7~\2\2\u0f5a\u0f5f\5"+
		"\u0114\u008b\2\u0f5b\u0f5c\f\7\2\2\u0f5c\u0f5d\7\u013d\2\2\u0f5d\u0f5f"+
		"\5\u0114\u008b\2\u0f5e\u0f55\3\2\2\2\u0f5e\u0f58\3\2\2\2\u0f5e\u0f5b\3"+
		"\2\2\2\u0f5f\u0f62\3\2\2\2\u0f60\u0f5e\3\2\2\2\u0f60\u0f61\3\2\2\2\u0f61"+
		"\u00c1\3\2\2\2\u0f62\u0f60\3\2\2\2\u0f63\u0f64\5\u00c0a\2\u0f64\u0f65"+
		"\7\u008c\2\2\u0f65\u0f66\5\u0114\u008b\2\u0f66\u0f7e\3\2\2\2\u0f67\u0f68"+
		"\5\u00c0a\2\u0f68\u0f69\7~\2\2\u0f69\u0f6a\5\u0114\u008b\2\u0f6a\u0f7e"+
		"\3\2\2\2\u0f6b\u0f7e\5\u00a6T\2\u0f6c\u0f7e\7\u00e0\2\2\u0f6d\u0f7e\7"+
		"\u015b\2\2\u0f6e\u0f6f\7\36\2\2\u0f6f\u0f70\5\u00c0a\2\u0f70\u0f71\7\37"+
		"\2\2\u0f71\u0f7e\3\2\2\2\u0f72\u0f73\7\36\2\2\u0f73\u0f78\5\u00c4c\2\u0f74"+
		"\u0f75\7r\2\2\u0f75\u0f77\5\u00c4c\2\u0f76\u0f74\3\2\2\2\u0f77\u0f7a\3"+
		"\2\2\2\u0f78\u0f76\3\2\2\2\u0f78\u0f79\3\2\2\2\u0f79\u0f7b\3\2\2\2\u0f7a"+
		"\u0f78\3\2\2\2\u0f7b\u0f7c\7\37\2\2\u0f7c\u0f7e\3\2\2\2\u0f7d\u0f63\3"+
		"\2\2\2\u0f7d\u0f67\3\2\2\2\u0f7d\u0f6b\3\2\2\2\u0f7d\u0f6c\3\2\2\2\u0f7d"+
		"\u0f6d\3\2\2\2\u0f7d\u0f6e\3\2\2\2\u0f7d\u0f72\3\2\2\2\u0f7e\u00c3\3\2"+
		"\2\2\u0f7f\u0f84\5\u00c0a\2\u0f80\u0f81\7-\2\2\u0f81\u0f83\5\u00c0a\2"+
		"\u0f82\u0f80\3\2\2\2\u0f83\u0f86\3\2\2\2\u0f84\u0f82\3\2\2\2\u0f84\u0f85"+
		"\3\2\2\2\u0f85\u00c5\3\2\2\2\u0f86\u0f84\3\2\2\2\u0f87\u0f88\5\u008aF"+
		"\2\u0f88\u00c7\3\2\2\2\u0f89\u0f8a\5\u008aF\2\u0f8a\u00c9\3\2\2\2\u0f8b"+
		"\u0f8c\5\u008aF\2\u0f8c\u00cb\3\2\2\2\u0f8d\u0f8e\5\u008aF\2\u0f8e\u00cd"+
		"\3\2\2\2\u0f8f\u0f90\5\u008aF\2\u0f90\u00cf\3\2\2\2\u0f91\u0f92\5\u008a"+
		"F\2\u0f92\u00d1\3\2\2\2\u0f93\u0f94\5\u008aF\2\u0f94\u00d3\3\2\2\2\u0f95"+
		"\u0f96\5\u008aF\2\u0f96\u00d5\3\2\2\2\u0f97\u0f98\5\u008aF\2\u0f98\u00d7"+
		"\3\2\2\2\u0f99\u0f9a\5\u008aF\2\u0f9a\u00d9\3\2\2\2\u0f9b\u0f9c\5\u008a"+
		"F\2\u0f9c\u00db\3\2\2\2\u0f9d\u0f9e\5\u008aF\2\u0f9e\u00dd\3\2\2\2\u0f9f"+
		"\u0fa0\5\u00e0q\2\u0fa0\u0fa2\5\u0114\u008b\2\u0fa1\u0fa3\5\u009eP\2\u0fa2"+
		"\u0fa1\3\2\2\2\u0fa2\u0fa3\3\2\2\2\u0fa3\u0fa6\3\2\2\2\u0fa4\u0fa5\7\u0144"+
		"\2\2\u0fa5\u0fa7\5\u00aaV\2\u0fa6\u0fa4\3\2\2\2\u0fa6\u0fa7\3\2\2\2\u0fa7"+
		"\u0fa8\3\2\2\2\u0fa8\u0faa\7\22\2\2\u0fa9\u0fab\5\u0114\u008b\2\u0faa"+
		"\u0fa9\3\2\2\2\u0faa\u0fab\3\2\2\2\u0fab\u0fac\3\2\2\2\u0fac\u0fb5\7,"+
		"\2\2\u0fad\u0fb2\5\u00e2r\2\u0fae\u0faf\7\u00e8\2\2\u0faf\u0fb1\5\u00e2"+
		"r\2\u0fb0\u0fae\3\2\2\2\u0fb1\u0fb4\3\2\2\2\u0fb2\u0fb0\3\2\2\2\u0fb2"+
		"\u0fb3\3\2\2\2\u0fb3\u0fb6\3\2\2\2\u0fb4\u0fb2\3\2\2\2\u0fb5\u0fad\3\2"+
		"\2\2\u0fb5\u0fb6\3\2\2\2\u0fb6\u0fb7\3\2\2\2\u0fb7\u0fb8\7.\2\2\u0fb8"+
		"\u0fb9\7\3\2\2\u0fb9\u00df\3\2\2\2\u0fba\u0fbe\7\u011c\2\2\u0fbb\u0fbe"+
		"\7\u011d\2\2\u0fbc\u0fbe\7\u011e\2\2\u0fbd\u0fba\3\2\2\2\u0fbd\u0fbb\3"+
		"\2\2\2\u0fbd\u0fbc\3\2\2\2\u0fbe\u00e1\3\2\2\2\u0fbf\u0fc1\5\u00a4S\2"+
		"\u0fc0\u0fc2\5\u009eP\2\u0fc1\u0fc0\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2"+
		"\u0fc5\3\2\2\2\u0fc3\u0fc4\7\u0144\2\2\u0fc4\u0fc6\5\u008aF\2\u0fc5\u0fc3"+
		"\3\2\2\2\u0fc5\u0fc6\3\2\2\2\u0fc6\u0fc7\3\2\2\2\u0fc7\u0fc8\7\22\2\2"+
		"\u0fc8\u0fc9\5\u00e4s\2\u0fc9\u0fd2\3\2\2\2\u0fca\u0fcc\5\u00a4S\2\u0fcb"+
		"\u0fcd\5\u009eP\2\u0fcc\u0fcb\3\2\2\2\u0fcc\u0fcd\3\2\2\2\u0fcd\u0fce"+
		"\3\2\2\2\u0fce\u0fcf\7\u0144\2\2\u0fcf\u0fd0\5\u00e4s\2\u0fd0\u0fd2\3"+
		"\2\2\2\u0fd1\u0fbf\3\2\2\2\u0fd1\u0fca\3\2\2\2\u0fd2\u00e3\3\2\2\2\u0fd3"+
		"\u0fd4\5\u008aF\2\u0fd4\u00e5\3\2\2\2\u0fd5\u0fde\7\u011f\2\2\u0fd6\u0fdb"+
		"\5\u00e8u\2\u0fd7\u0fd8\7\u00e8\2\2\u0fd8\u0fda\5\u00e8u\2\u0fd9\u0fd7"+
		"\3\2\2\2\u0fda\u0fdd\3\2\2\2\u0fdb\u0fd9\3\2\2\2\u0fdb\u0fdc\3\2\2\2\u0fdc"+
		"\u0fdf\3\2\2\2\u0fdd\u0fdb\3\2\2\2\u0fde\u0fd6\3\2\2\2\u0fde\u0fdf\3\2"+
		"\2\2\u0fdf\u0fe0\3\2\2\2\u0fe0\u0fe1\7\u0120\2\2\u0fe1\u00e7\3\2\2\2\u0fe2"+
		"\u0fe4\5\u00a4S\2\u0fe3\u0fe5\5\u009eP\2\u0fe4\u0fe3\3\2\2\2\u0fe4\u0fe5"+
		"\3\2\2\2\u0fe5\u0fe6\3\2\2\2\u0fe6\u0fe7\7\22\2\2\u0fe7\u0fe8\5\u00ea"+
		"v\2\u0fe8\u00e9\3\2\2\2\u0fe9\u0fea\5\u008aF\2\u0fea\u00eb\3\2\2\2\u0feb"+
		"\u0fec\bw\1\2\u0fec\u0fef\5\u00a6T\2\u0fed\u0fef\5\u00f2z\2\u0fee\u0feb"+
		"\3\2\2\2\u0fee\u0fed\3\2\2\2\u0fef\u1000\3\2\2\2\u0ff0\u0ff1\f\5\2\2\u0ff1"+
		"\u0ff2\7\33\2\2\u0ff2\u0ff3\7\u0121\2\2\u0ff3\u0ff4\5\u00a6T\2\u0ff4\u0ff5"+
		"\7\22\2\2\u0ff5\u0ff6\5\u008aF\2\u0ff6\u0fff\3\2\2\2\u0ff7\u0ff8\f\4\2"+
		"\2\u0ff8\u0ff9\7\33\2\2\u0ff9\u0ffa\7\u0122\2\2\u0ffa\u0ffb\5\u00a6T\2"+
		"\u0ffb\u0ffc\7\22\2\2\u0ffc\u0ffd\5\u00a6T\2\u0ffd\u0fff\3\2\2\2\u0ffe"+
		"\u0ff0\3\2\2\2\u0ffe\u0ff7\3\2\2\2\u0fff\u1002\3\2\2\2\u1000\u0ffe\3\2"+
		"\2\2\u1000\u1001\3\2\2\2\u1001\u00ed\3\2\2\2\u1002\u1000\3\2\2\2\u1003"+
		"\u1004\7\36\2\2\u1004\u1005\7\13\2\2\u1005\u1009\5\u0114\u008b\2\u1006"+
		"\u1008\5\u0114\u008b\2\u1007\u1006\3\2\2\2\u1008\u100b\3\2\2\2\u1009\u1007"+
		"\3\2\2\2\u1009\u100a\3\2\2\2\u100a\u100c\3\2\2\2\u100b\u1009\3\2\2\2\u100c"+
		"\u100d\7\u0144\2\2\u100d\u100e\5\u00ecw\2\u100e\u100f\7\37\2\2\u100f\u102a"+
		"\3\2\2\2\u1010\u1011\7\36\2\2\u1011\u1012\7\f\2\2\u1012\u1016\5\u0114"+
		"\u008b\2\u1013\u1015\5\u0114\u008b\2\u1014\u1013\3\2\2\2\u1015\u1018\3"+
		"\2\2\2\u1016\u1014\3\2\2\2\u1016\u1017\3\2\2\2\u1017\u1019\3\2\2\2\u1018"+
		"\u1016\3\2\2\2\u1019\u101a\7\u0144\2\2\u101a\u101b\5\u00ecw\2\u101b\u101c"+
		"\7\37\2\2\u101c\u102a\3\2\2\2\u101d\u101e\7\36\2\2\u101e\u1022\5\u0114"+
		"\u008b\2\u101f\u1021\5\u0114\u008b\2\u1020\u101f\3\2\2\2\u1021\u1024\3"+
		"\2\2\2\u1022\u1020\3\2\2\2\u1022\u1023\3\2\2\2\u1023\u1025\3\2\2\2\u1024"+
		"\u1022\3\2\2\2\u1025\u1026\7\u0144\2\2\u1026\u1027\5\u00ecw\2\u1027\u1028"+
		"\7\37\2\2\u1028\u102a\3\2\2\2\u1029\u1003\3\2\2\2\u1029\u1010\3\2\2\2"+
		"\u1029\u101d\3\2\2\2\u102a\u00ef\3\2\2\2\u102b\u102f\5\u00eex\2\u102c"+
		"\u102e\5\u00eex\2\u102d\u102c\3\2\2\2\u102e\u1031\3\2\2\2\u102f\u102d"+
		"\3\2\2\2\u102f\u1030\3\2\2\2\u1030\u00f1\3\2\2\2\u1031\u102f\3\2\2\2\u1032"+
		"\u1036\5\u00a6T\2\u1033\u1035\5\u00a6T\2\u1034\u1033\3\2\2\2\u1035\u1038"+
		"\3\2\2\2\u1036\u1034\3\2\2\2\u1036\u1037\3\2\2\2\u1037\u1042\3\2\2\2\u1038"+
		"\u1036\3\2\2\2\u1039\u103a\7\u0089\2\2\u103a\u103e\5\u00a6T\2\u103b\u103d"+
		"\5\u00a6T\2\u103c\u103b\3\2\2\2\u103d\u1040\3\2\2\2\u103e\u103c\3\2\2"+
		"\2\u103e\u103f\3\2\2\2\u103f\u1042\3\2\2\2\u1040\u103e\3\2\2\2\u1041\u1032"+
		"\3\2\2\2\u1041\u1039\3\2\2\2\u1042\u00f3\3\2\2\2\u1043\u104e\5\u00f6|"+
		"\2\u1044\u104e\5\u00fc\177\2\u1045\u104e\5\u00fe\u0080\2\u1046\u104e\5"+
		"\u0106\u0084\2\u1047\u104e\5\u00dep\2\u1048\u104a\5\u010a\u0086\2\u1049"+
		"\u104b\5\u0110\u0089\2\u104a\u1049\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u104e"+
		"\3\2\2\2\u104c\u104e\5\u010e\u0088\2\u104d\u1043\3\2\2\2\u104d\u1044\3"+
		"\2\2\2\u104d\u1045\3\2\2\2\u104d\u1046\3\2\2\2\u104d\u1047\3\2\2\2\u104d"+
		"\u1048\3\2\2\2\u104d\u104c\3\2\2\2\u104e\u00f5\3\2\2\2\u104f\u1050\5\u00f8"+
		"}\2\u1050\u1051\5\u00fa~\2\u1051\u1052\7\3\2\2\u1052\u1061\3\2\2\2\u1053"+
		"\u1054\5\u00f8}\2\u1054\u1055\7\36\2\2\u1055\u1056\5\u00fa~\2\u1056\u105d"+
		"\7\37\2\2\u1057\u1058\7\36\2\2\u1058\u1059\5\u00fa~\2\u1059\u105a\7\37"+
		"\2\2\u105a\u105c\3\2\2\2\u105b\u1057\3\2\2\2\u105c\u105f\3\2\2\2\u105d"+
		"\u105b\3\2\2\2\u105d\u105e\3\2\2\2\u105e\u1061\3\2\2\2\u105f\u105d\3\2"+
		"\2\2\u1060\u104f\3\2\2\2\u1060\u1053\3\2\2\2\u1061\u00f7\3\2\2\2\u1062"+
		"\u106b\7\u0123\2\2\u1063\u106b\7\u0124\2\2\u1064\u106b\7\u0125\2\2\u1065"+
		"\u106b\7\u0126\2\2\u1066\u106b\7\u0127\2\2\u1067\u106b\7&\2\2\u1068\u106b"+
		"\7\u0128\2\2\u1069\u106b\7\u0129\2\2\u106a\u1062\3\2\2\2\u106a\u1063\3"+
		"\2\2\2\u106a\u1064\3\2\2\2\u106a\u1065\3\2\2\2\u106a\u1066\3\2\2\2\u106a"+
		"\u1067\3\2\2\2\u106a\u1068\3\2\2\2\u106a\u1069\3\2\2\2\u106b\u00f9\3\2"+
		"\2\2\u106c\u1070\5\u0114\u008b\2\u106d\u106f\5\u0114\u008b\2\u106e\u106d"+
		"\3\2\2\2\u106f\u1072\3\2\2\2\u1070\u106e\3\2\2\2\u1070\u1071\3\2\2\2\u1071"+
		"\u1073\3\2\2\2\u1072\u1070\3\2\2\2\u1073\u1074\7\u0144\2\2\u1074\u1075"+
		"\5\u008aF\2\u1075\u00fb\3\2\2\2\u1076\u1078\7\u0154\2\2\u1077\u1076\3"+
		"\2\2\2\u1077\u1078\3\2\2\2\u1078\u1079\3\2\2\2\u1079\u107a\7\u0121\2\2"+
		"\u107a\u107c\5\u0114\u008b\2\u107b\u107d\5\u009eP\2\u107c\u107b\3\2\2"+
		"\2\u107c\u107d\3\2\2\2\u107d\u1080\3\2\2\2\u107e\u107f\7\u0144\2\2\u107f"+
		"\u1081\5\u008aF\2\u1080\u107e\3\2\2\2\u1080\u1081\3\2\2\2\u1081\u1082"+
		"\3\2\2\2\u1082\u1083\7\22\2\2\u1083\u1084\5\u008aF\2\u1084\u1085\7\3\2"+
		"\2\u1085\u1094\3\2\2\2\u1086\u1087\7\u012a\2\2\u1087\u1089\5\u0114\u008b"+
		"\2\u1088\u108a\5\u009eP\2\u1089\u1088\3\2\2\2\u1089\u108a\3\2\2\2\u108a"+
		"\u108d\3\2\2\2\u108b\u108c\7\u0144\2\2\u108c\u108e\5\u008aF\2\u108d\u108b"+
		"\3\2\2\2\u108d\u108e\3\2\2\2\u108e\u108f\3\2\2\2\u108f\u1090\7\22\2\2"+
		"\u1090\u1091\5\u008aF\2\u1091\u1092\7\3\2\2\u1092\u1094\3\2\2\2\u1093"+
		"\u1077\3\2\2\2\u1093\u1086\3\2\2\2\u1094\u00fd\3\2\2\2\u1095\u1096\7\u011d"+
		"\2\2\u1096\u109b\5\u0100\u0081\2\u1097\u1098\7\33\2\2\u1098\u109a\5\u0100"+
		"\u0081\2\u1099\u1097\3\2\2\2\u109a\u109d\3\2\2\2\u109b\u1099\3\2\2\2\u109b"+
		"\u109c\3\2\2\2\u109c\u10a5\3\2\2\2\u109d\u109b\3\2\2\2\u109e\u109f\7\u012b"+
		"\2\2\u109f\u10a0\7\u0158\2\2\u10a0\u10a1\7\22\2\2\u10a1\u10a2\5\u008a"+
		"F\2\u10a2\u10a3\7\u0144\2\2\u10a3\u10a4\5\u0114\u008b\2\u10a4\u10a6\3"+
		"\2\2\2\u10a5\u109e\3\2\2\2\u10a5\u10a6\3\2\2\2\u10a6\u10a7\3\2\2\2\u10a7"+
		"\u10a8\7\3\2\2\u10a8\u10be\3\2\2\2\u10a9\u10aa\7\u011e\2\2\u10aa\u10af"+
		"\5\u0100\u0081\2\u10ab\u10ac\7\33\2\2\u10ac\u10ae\5\u0100\u0081\2\u10ad"+
		"\u10ab\3\2\2\2\u10ae\u10b1\3\2\2\2\u10af\u10ad\3\2\2\2\u10af\u10b0\3\2"+
		"\2\2\u10b0\u10b9\3\2\2\2\u10b1\u10af\3\2\2\2\u10b2\u10b3\7\u012b\2\2\u10b3"+
		"\u10b4\7\u0158\2\2\u10b4\u10b5\7\22\2\2\u10b5\u10b6\5\u008aF\2\u10b6\u10b7"+
		"\7\u0144\2\2\u10b7\u10b8\5\u0114\u008b\2\u10b8\u10ba\3\2\2\2\u10b9\u10b2"+
		"\3\2\2\2\u10b9\u10ba\3\2\2\2\u10ba\u10bb\3\2\2\2\u10bb\u10bc\7\3\2\2\u10bc"+
		"\u10be\3\2\2\2\u10bd\u1095\3\2\2\2\u10bd\u10a9\3\2\2\2\u10be\u00ff\3\2"+
		"\2\2\u10bf\u10c5\5\u0114\u008b\2\u10c0\u10c2\5\u009eP\2\u10c1\u10c0\3"+
		"\2\2\2\u10c1\u10c2\3\2\2\2\u10c2\u10c3\3\2\2\2\u10c3\u10c4\7\u0144\2\2"+
		"\u10c4\u10c6\5\u008aF\2\u10c5\u10c1\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6"+
		"\u10c7\3\2\2\2\u10c7\u10cb\7\22\2\2\u10c8\u10cc\5\u0102\u0082\2\u10c9"+
		"\u10ca\7-\2\2\u10ca\u10cc\5\u0102\u0082\2\u10cb\u10c8\3\2\2\2\u10cb\u10c9"+
		"\3\2\2\2\u10cb\u10cc\3\2\2\2\u10cc\u0101\3\2\2\2\u10cd\u10cf\5\u0114\u008b"+
		"\2\u10ce\u10d0\5\u009eP\2\u10cf\u10ce\3\2\2\2\u10cf\u10d0\3\2\2\2\u10d0"+
		"\u10d3\3\2\2\2\u10d1\u10d2\7\u0144\2\2\u10d2\u10d4\5\u008aF\2\u10d3\u10d1"+
		"\3\2\2\2\u10d3\u10d4\3\2\2\2\u10d4\u10d8\3\2\2\2\u10d5\u10d7\5\u0104\u0083"+
		"\2\u10d6\u10d5\3\2\2\2\u10d7\u10da\3\2\2\2\u10d8\u10d6\3\2\2\2\u10d8\u10d9"+
		"\3\2\2\2\u10d9\u0103\3\2\2\2\u10da\u10d8\3\2\2\2\u10db\u10dc\7-\2\2\u10dc"+
		"\u10de\5\u0114\u008b\2\u10dd\u10df\5\u009eP\2\u10de\u10dd\3\2\2\2\u10de"+
		"\u10df\3\2\2\2\u10df\u10e2\3\2\2\2\u10e0\u10e1\7\u0144\2\2\u10e1\u10e3"+
		"\5\u008aF\2\u10e2\u10e0\3\2\2\2\u10e2\u10e3\3\2\2\2\u10e3\u0105\3\2\2"+
		"\2\u10e4\u10e5\7\u012c\2\2\u10e5\u10ea\5\u00b0Y\2\u10e6\u10e7\7\33\2\2"+
		"\u10e7\u10e9\5\u00b0Y\2\u10e8\u10e6\3\2\2\2\u10e9\u10ec\3\2\2\2\u10ea"+
		"\u10e8\3\2\2\2\u10ea\u10eb\3\2\2\2\u10eb\u10f4\3\2\2\2\u10ec\u10ea\3\2"+
		"\2\2\u10ed\u10ee\7\u012b\2\2\u10ee\u10ef\7\u0158\2\2\u10ef\u10f0\7\22"+
		"\2\2\u10f0\u10f1\5\u008aF\2\u10f1\u10f2\7\u0144\2\2\u10f2\u10f3\5\u0114"+
		"\u008b\2\u10f3\u10f5\3\2\2\2\u10f4\u10ed\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5"+
		"\u10f6\3\2\2\2\u10f6\u10f7\7\3\2\2\u10f7\u110d\3\2\2\2\u10f8\u10f9\7\u012d"+
		"\2\2\u10f9\u10fe\5\u00b2Z\2\u10fa\u10fb\7\33\2\2\u10fb\u10fd\5\u00b2Z"+
		"\2\u10fc\u10fa\3\2\2\2\u10fd\u1100\3\2\2\2\u10fe\u10fc\3\2\2\2\u10fe\u10ff"+
		"\3\2\2\2\u10ff\u1108\3\2\2\2\u1100\u10fe\3\2\2\2\u1101\u1102\7\u012b\2"+
		"\2\u1102\u1103\7\u0158\2\2\u1103\u1104\7\22\2\2\u1104\u1105\5\u008aF\2"+
		"\u1105\u1106\7\u0144\2\2\u1106\u1107\5\u0114\u008b\2\u1107\u1109\3\2\2"+
		"\2\u1108\u1101\3\2\2\2\u1108\u1109\3\2\2\2\u1109\u110a\3\2\2\2\u110a\u110b"+
		"\7\3\2\2\u110b\u110d\3\2\2\2\u110c\u10e4\3\2\2\2\u110c\u10f8\3\2\2\2\u110d"+
		"\u0107\3\2\2\2\u110e\u110f\7,\2\2\u110f\u1110\5\u00a0Q\2\u1110\u1111\7"+
		".\2\2\u1111\u111b\3\2\2\2\u1112\u1114\7,\2\2\u1113\u1115\5\u00a2R\2\u1114"+
		"\u1113\3\2\2\2\u1115\u1116\3\2\2\2\u1116\u1114\3\2\2\2\u1116\u1117\3\2"+
		"\2\2\u1117\u1118\3\2\2\2\u1118\u1119\7.\2\2\u1119\u111b\3\2\2\2\u111a"+
		"\u110e\3\2\2\2\u111a\u1112\3\2\2\2\u111b\u0109\3\2\2\2\u111c\u111d\5\u010c"+
		"\u0087\2\u111d\u111f\5\u0114\u008b\2\u111e\u1120\5\u009eP\2\u111f\u111e"+
		"\3\2\2\2\u111f\u1120\3\2\2\2\u1120\u1121\3\2\2\2\u1121\u1122\7\u0144\2"+
		"\2\u1122\u1123\5\u008aF\2\u1123\u1124\7\3\2\2\u1124\u010b\3\2\2\2\u1125"+
		"\u112e\7\u012e\2\2\u1126\u112e\7\u012f\2\2\u1127\u112e\7\u0130\2\2\u1128"+
		"\u112e\7\u0131\2\2\u1129\u112e\7\u0132\2\2\u112a\u112e\7\u0133\2\2\u112b"+
		"\u112e\7\u0121\2\2\u112c\u112e\7\u0134\2\2\u112d\u1125\3\2\2\2\u112d\u1126"+
		"\3\2\2\2\u112d\u1127\3\2\2\2\u112d\u1128\3\2\2\2\u112d\u1129\3\2\2\2\u112d"+
		"\u112a\3\2\2\2\u112d\u112b\3\2\2\2\u112d\u112c\3\2\2\2\u112e\u010d\3\2"+
		"\2\2\u112f\u1130\7\u0135\2\2\u1130\u1131\5\u008aF\2\u1131\u1132\5\u0110"+
		"\u0089\2\u1132\u010f\3\2\2\2\u1133\u1134\5\16\b\2\u1134\u1135\7\3\2\2"+
		"\u1135\u1137\3\2\2\2\u1136\u1133\3\2\2\2\u1136\u1137\3\2\2\2\u1137\u1139"+
		"\3\2\2\2\u1138\u113a\5\u0112\u008a\2\u1139\u1138\3\2\2\2\u113a\u113b\3"+
		"\2\2\2\u113b\u1139\3\2\2\2\u113b\u113c\3\2\2\2\u113c\u113d\3\2\2\2\u113d"+
		"\u113e\t\13\2\2\u113e\u0111\3\2\2\2\u113f\u1141\5\6\4\2\u1140\u113f\3"+
		"\2\2\2\u1140\u1141\3\2\2\2\u1141\u1142\3\2\2\2\u1142\u114b\5\24\13\2\u1143"+
		"\u1145\5\6\4\2\u1144\u1143\3\2\2\2\u1144\u1145\3\2\2\2\u1145\u1146\3\2"+
		"\2\2\u1146\u1147\7,\2\2\u1147\u1148\5\24\13\2\u1148\u1149\7.\2\2\u1149"+
		"\u114b\3\2\2\2\u114a\u1140\3\2\2\2\u114a\u1144\3\2\2\2\u114b\u0113\3\2"+
		"\2\2\u114c\u116d\7\u0153\2\2\u114d\u116d\7\u008d\2\2\u114e\u116d\7\u0110"+
		"\2\2\u114f\u116d\7\u00b3\2\2\u1150\u116d\7K\2\2\u1151\u116d\7\u0097\2"+
		"\2\u1152\u116d\7R\2\2\u1153\u116d\7\u00e2\2\2\u1154\u116d\7\u00b5\2\2"+
		"\u1155\u116d\7\u0101\2\2\u1156\u116d\7\u0091\2\2\u1157\u116d\7\u0139\2"+
		"\2\u1158\u116d\7o\2\2\u1159\u116d\7\u013a\2\2\u115a\u116d\7\u0087\2\2"+
		"\u115b\u116d\7J\2\2\u115c\u116d\7\u00d9\2\2\u115d\u116d\7\u00da\2\2\u115e"+
		"\u116d\7\u009f\2\2\u115f\u116d\7\u010b\2\2\u1160\u116d\7\u0100\2\2\u1161"+
		"\u116d\7O\2\2\u1162\u116d\7\u00cb\2\2\u1163\u116d\7L\2\2\u1164\u116d\7"+
		"\\\2\2\u1165\u116d\7]\2\2\u1166\u116d\7^\2\2\u1167\u116d\7_\2\2\u1168"+
		"\u116d\7\u00bd\2\2\u1169\u116d\7\u00be\2\2\u116a\u116d\7\u00b6\2\2\u116b"+
		"\u116d\7\u0159\2\2\u116c\u114c\3\2\2\2\u116c\u114d\3\2\2\2\u116c\u114e"+
		"\3\2\2\2\u116c\u114f\3\2\2\2\u116c\u1150\3\2\2\2\u116c\u1151\3\2\2\2\u116c"+
		"\u1152\3\2\2\2\u116c\u1153\3\2\2\2\u116c\u1154\3\2\2\2\u116c\u1155\3\2"+
		"\2\2\u116c\u1156\3\2\2\2\u116c\u1157\3\2\2\2\u116c\u1158\3\2\2\2\u116c"+
		"\u1159\3\2\2\2\u116c\u115a\3\2\2\2\u116c\u115b\3\2\2\2\u116c\u115c\3\2"+
		"\2\2\u116c\u115d\3\2\2\2\u116c\u115e\3\2\2\2\u116c\u115f\3\2\2\2\u116c"+
		"\u1160\3\2\2\2\u116c\u1161\3\2\2\2\u116c\u1162\3\2\2\2\u116c\u1163\3\2"+
		"\2\2\u116c\u1164\3\2\2\2\u116c\u1165\3\2\2\2\u116c\u1166\3\2\2\2\u116c"+
		"\u1167\3\2\2\2\u116c\u1168\3\2\2\2\u116c\u1169\3\2\2\2\u116c\u116a\3\2"+
		"\2\2\u116c\u116b\3\2\2\2\u116d\u0115\3\2\2\2\u01db\u0119\u0122\u012e\u0132"+
		"\u0137\u013b\u014a\u0151\u015a\u0163\u0170\u017e\u0182\u018b\u0190\u0198"+
		"\u01a1\u01a9\u01b4\u01b7\u01be\u01c5\u01c9\u01db\u0209\u022e\u023f\u0245"+
		"\u0247\u024f\u0257\u025c\u0261\u0263\u0281\u0285\u028a\u028e\u0294\u029d"+
		"\u02a4\u02a8\u02ac\u02b2\u02b8\u02be\u02c0\u02cc\u02d2\u02dd\u02e4\u02e8"+
		"\u02f3\u02fb\u030a\u0311\u0319\u031f\u0328\u032a\u0339\u0340\u0349\u0350"+
		"\u0358\u035a\u0360\u0362\u036a\u036c\u0372\u0374\u037f\u0388\u0392\u0396"+
		"\u03a0\u03a7\u03b1\u03bb\u03c7\u03cf\u03d8\u03df\u03e6\u03eb\u03f0\u03f4"+
		"\u03f9\u03fd\u0402\u040e\u0419\u0425\u0427\u042f\u0431\u0439\u043b\u0441"+
		"\u0449\u0452\u0463\u046e\u0473\u047a\u0482\u0487\u048f\u0496\u049d\u04a4"+
		"\u04ab\u04b0\u04b3\u04bc\u04c1\u04c6\u04cc\u04d2\u04d7\u04df\u04e7\u04ef"+
		"\u04f2\u04f6\u04f9\u04fc\u0501\u053a\u0541\u0562\u0569\u056b\u056e\u0572"+
		"\u0575\u0581\u0594\u05ae\u05bb\u05c1\u05c7\u05cd\u05d5\u05dd\u05e5\u05ed"+
		"\u0623\u064f\u0651\u065d\u0662\u0668\u066a\u0670\u0676\u0681\u0687\u0692"+
		"\u0698\u069e\u06a4\u06a8\u06ae\u06b2\u06b8\u06da\u06e2\u06ec\u06f6\u06fd"+
		"\u0701\u0708\u070c\u0713\u071d\u071f\u072b\u0732\u073a\u073c\u0746\u074e"+
		"\u0750\u0752\u0781\u0788\u07ca\u07d0\u07d8\u07de\u07e6\u07f3\u07fd\u0804"+
		"\u0849\u084e\u0859\u087f\u0888\u0892\u08b7\u08c9\u08d1\u08df\u08e6\u08ee"+
		"\u08f5\u08fb\u0901\u093d\u0949\u0958\u0963\u096c\u096f\u097e\u098f\u0993"+
		"\u099f\u09a3\u09aa\u09b0\u09b4\u09bb\u09c1\u09c5\u09db\u09e2\u09ef\u09f6"+
		"\u0a03\u0a0a\u0a18\u0a1f\u0a2b\u0a2d\u0a32\u0a3b\u0a40\u0a46\u0a4a\u0a4f"+
		"\u0a53\u0a59\u0a5b\u0a5e\u0a64\u0a69\u0a6e\u0a72\u0a76\u0a7c\u0a83\u0a87"+
		"\u0a8c\u0a90\u0a94\u0a98\u0aa2\u0aad\u0ab2\u0ab9\u0ac0\u0ac6\u0acb\u0ad0"+
		"\u0ad6\u0adb\u0ae2\u0af0\u0af6\u0afd\u0b07\u0b0c\u0b12\u0b17\u0b1c\u0b2c"+
		"\u0b31\u0b36\u0b3b\u0b4d\u0b53\u0b59\u0b5d\u0b64\u0b6c\u0b71\u0b78\u0b7f"+
		"\u0b84\u0b8b\u0b92\u0b97\u0b9e\u0baa\u0bb5\u0bc0\u0bc8\u0bd1\u0bdd\u0be6"+
		"\u0be8\u0bef\u0bf1\u0bf8\u0bfa\u0c00\u0c02\u0c0c\u0c12\u0c31\u0c34\u0c3e"+
		"\u0c43\u0c4e\u0c54\u0c56\u0c60\u0c69\u0c71\u0c7b\u0c82\u0c8a\u0c91\u0c93"+
		"\u0c9e\u0ca3\u0cab\u0cb6\u0cc2\u0cc5\u0cc8\u0cd1\u0cd6\u0cd9\u0ce1\u0ce8"+
		"\u0cf2\u0cf8\u0d06\u0d0f\u0d1b\u0d2c\u0d30\u0d46\u0d4c\u0d51\u0d5d\u0d62"+
		"\u0d6a\u0d76\u0d7e\u0d84\u0da5\u0db1\u0dbd\u0dbf\u0dc7\u0dca\u0dd2\u0dd4"+
		"\u0dda\u0de9\u0e11\u0e15\u0e1c\u0e24\u0e27\u0e2d\u0e35\u0e37\u0e49\u0e76"+
		"\u0e81\u0e86\u0e8d\u0e90\u0e96\u0ea2\u0eb8\u0ebc\u0ec5\u0ece\u0ed6\u0edc"+
		"\u0ee4\u0eea\u0eef\u0ef3\u0efa\u0efe\u0f0b\u0f12\u0f15\u0f19\u0f25\u0f30"+
		"\u0f39\u0f42\u0f4e\u0f53\u0f5e\u0f60\u0f78\u0f7d\u0f84\u0fa2\u0fa6\u0faa"+
		"\u0fb2\u0fb5\u0fbd\u0fc1\u0fc5\u0fcc\u0fd1\u0fdb\u0fde\u0fe4\u0fee\u0ffe"+
		"\u1000\u1009\u1016\u1022\u1029\u102f\u1036\u103e\u1041\u104a\u104d\u105d"+
		"\u1060\u106a\u1070\u1077\u107c\u1080\u1089\u108d\u1093\u109b\u10a5\u10af"+
		"\u10b9\u10bd\u10c1\u10c5\u10cb\u10cf\u10d3\u10d8\u10de\u10e2\u10ea\u10f4"+
		"\u10fe\u1108\u110c\u1116\u111a\u111f\u112d\u1136\u113b\u1140\u1144\u114a"+
		"\u116c";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}